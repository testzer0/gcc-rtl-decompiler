
;; Function f (f, funcdef_no=0, decl_uid=2248, cgraph_uid=0, symbol_order=0)

f (int a)
{
  int b;
  int D.2258;
  int _5;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (a_2(D) <= 2)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  b_4 = 2;
  goto <bb 5>; [0.00%]
;;    succ:       5

;;   basic block 4, loop depth 0
;;    pred:       2
  b_3 = 3;
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
  # b_1 = PHI <b_4(3), b_3(4)>
  _5 = b_1;
;;    succ:       6

;;   basic block 6, loop depth 0
;;    pred:       5
<L3> [0.00%]:
  return _5;
;;    succ:       EXIT

}



Partition map 

Partition 1 (b_1 - 1 )
Partition 2 (a_2(D) - 2 )
Partition 3 (b_3 - 3 )
Partition 4 (b_4 - 4 )
Partition 5 (_5 - 5 )
Partition 7 (_7(D) - 7 )


Partition map 

Partition 0 (b_1 - 1 )
Partition 1 (a_2(D) - 2 )
Partition 2 (b_3 - 3 )
Partition 3 (b_4 - 4 )
Partition 4 (_7(D) - 7 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483646, 0) b_1 <-> b_3
(2147483646, 0) b_1 <-> b_4

Partition map 

Partition 0 (b_1 - 1 )
Partition 1 (a_2(D) - 2 )
Partition 2 (b_3 - 3 )
Partition 3 (b_4 - 4 )
Partition 4 (_7(D) - 7 )

Coalesce list: (1)b_1 & (3)b_3 [map: 0, 2] : Success -> 0
Coalesce list: (1)b_1 & (4)b_4 [map: 0, 3] : Success -> 0
Coalesce list: (1)b_1 & (3)b_1: Already Coalesced.
Coalesce list: (1)b_1 & (4)b_1: Already Coalesced.
After Coalescing:

Partition map 

Partition 0 (b_1 - 1 3 4 )
Partition 1 (a_2(D) - 2 )
Partition 2 (_5 - 5 )
Partition 3 (_7(D) - 7 )

f (int a)
{
  int b;
  int D.2258;
  int _5;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (a_2(D) <= 2)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  b_4 = 2;
  goto <bb 5>; [0.00%]
;;    succ:       5

;;   basic block 4, loop depth 0
;;    pred:       2
  b_3 = 3;
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
  # b_1 = PHI <b_4(3), b_3(4)>
  _5 = b_1;
;;    succ:       6

;;   basic block 6, loop depth 0
;;    pred:       5
<L3> [0.00%]:
  return _5;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; if (a_2(D) <= 2)

(insn 6 5 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -20 [0xffffffffffffffec])) [1 a+0 S4 A32])
            (const_int 2 [0x2]))) "test1.c":5 -1
     (nil))

(jump_insn 7 6 0 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":5 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; b_4 = 2;

(insn 9 8 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 b+0 S4 A32])
        (const_int 2 [0x2])) "test1.c":6 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; 

(code_label 12 11 13 2 (nil) [0 uses])

(note 13 12 0 NOTE_INSN_BASIC_BLOCK)

;; b_3 = 3;

(insn 14 13 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 b+0 S4 A32])
        (const_int 3 [0x3])) "test1.c":7 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; 

(code_label 15 14 16 3 (nil) [0 uses])

(note 16 15 0 NOTE_INSN_BASIC_BLOCK)

;; _5 = b_1;

(insn 17 16 0 (set (reg:SI 87 [ _5 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 b+0 S4 A32])) "test1.c":8 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; <L3> [0.00%]:

(code_label 18 17 19 4 (nil) [0 uses])

(note 19 18 0 NOTE_INSN_BASIC_BLOCK)

;; return _5;

(insn 20 19 21 (set (reg:SI 88 [ <retval> ])
        (reg:SI 87 [ _5 ])) "test1.c":8 -1
     (nil))

(jump_insn 21 20 22 (set (pc)
        (label_ref 0)) "test1.c":8 -1
     (nil))

(barrier 22 21 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 7 into block 6...
Merged blocks 6 and 7.
Merged 6 and 7 without moving.
Removing jump 21.
Merging block 8 into block 6...
Merged blocks 6 and 8.
Merged 6 and 8 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [1 a+0 S4 A32])
        (reg:SI 5 di [ a ])) "test1.c":3 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -20 [0xffffffffffffffec])) [1 a+0 S4 A32])
            (const_int 2 [0x2]))) "test1.c":5 -1
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 12)
            (pc))) "test1.c":5 -1
     (nil)
 -> 12)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 8 7 9 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 4 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 b+0 S4 A32])
        (const_int 2 [0x2])) "test1.c":6 -1
     (nil))
(jump_insn 10 9 11 4 (set (pc)
        (label_ref 15)) -1
     (nil)
 -> 15)
;;  succ:       6

(barrier 11 10 12)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 12 11 13 5 2 (nil) [1 uses])
(note 13 12 14 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 5 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 b+0 S4 A32])
        (const_int 3 [0x3])) "test1.c":7 -1
     (nil))
;;  succ:       6 (FALLTHRU)

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
;;              5 (FALLTHRU)
(code_label 15 14 16 6 3 (nil) [1 uses])
(note 16 15 17 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 20 6 (set (reg:SI 87 [ _5 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 b+0 S4 A32])) "test1.c":8 -1
     (nil))
(insn 20 17 24 6 (set (reg:SI 88 [ <retval> ])
        (reg:SI 87 [ _5 ])) "test1.c":8 -1
     (nil))
(insn 24 20 25 6 (set (reg/i:SI 0 ax)
        (reg:SI 88 [ <retval> ])) "test1.c":9 -1
     (nil))
(insn 25 24 0 6 (use (reg/i:SI 0 ax)) "test1.c":9 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function main (main, funcdef_no=1, decl_uid=2251, cgraph_uid=1, symbol_order=1)

main ()
{
  int b;
  int D.2260;
  int _4;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  b_3 = f (3);
  _4 = 0;
;;    succ:       3

;;   basic block 3, loop depth 0
;;    pred:       2
<L0> [0.00%]:
  return _4;
;;    succ:       EXIT

}



Partition map 

Partition 3 (b_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (_5(D) - 5 )


Partition map 

Partition 0 (_5(D) - 5 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (_5(D) - 5 )

After Coalescing:

Partition map 

Partition 0 (b_3 - 3 )
Partition 1 (_4 - 4 )
Partition 2 (_5(D) - 5 )

main ()
{
  int b;
  int D.2260;
  int _4;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  b_3 = f (3);
  _4 = 0;
;;    succ:       3

;;   basic block 3, loop depth 0
;;    pred:       2
<L0> [0.00%]:
  return _4;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; b_3 = f (3);

(insn 5 4 6 (set (reg:SI 5 di)
        (const_int 3 [0x3])) "test1.c":12 -1
     (nil))

(call_insn 6 5 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("f") [flags 0x3]  <function_decl 0x7fd4c4e90f00 f>) [0 f S1 A8])
            (const_int 0 [0]))) "test1.c":12 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))

(insn 7 6 8 (set (reg:SI 89)
        (reg:SI 0 ax)) "test1.c":12 -1
     (nil))

(insn 8 7 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 b+0 S4 A32])
        (reg:SI 89)) "test1.c":12 -1
     (nil))

;; _4 = 0;

(insn 9 8 0 (set (reg:SI 87 [ _4 ])
        (const_int 0 [0])) "test1.c":13 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; <L0> [0.00%]:

(code_label 10 9 11 6 (nil) [0 uses])

(note 11 10 0 NOTE_INSN_BASIC_BLOCK)

;; return _4;

(insn 12 11 13 (set (reg:SI 88 [ <retval> ])
        (reg:SI 87 [ _4 ])) -1
     (nil))

(jump_insn 13 12 14 (set (pc)
        (label_ref 0)) -1
     (nil))

(barrier 14 13 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 4 into block 2...
Merged blocks 2 and 4.
Merged 2 and 4 without moving.
Removing jump 13.
Merging block 5 into block 2...
Merged blocks 2 and 5.
Merged 2 and 5 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 5 di)
        (const_int 3 [0x3])) "test1.c":12 -1
     (nil))
(call_insn 6 5 7 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("f") [flags 0x3]  <function_decl 0x7fd4c4e90f00 f>) [0 f S1 A8])
            (const_int 0 [0]))) "test1.c":12 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 7 6 8 2 (set (reg:SI 89)
        (reg:SI 0 ax)) "test1.c":12 -1
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 b+0 S4 A32])
        (reg:SI 89)) "test1.c":12 -1
     (nil))
(insn 9 8 12 2 (set (reg:SI 87 [ _4 ])
        (const_int 0 [0])) "test1.c":13 -1
     (nil))
(insn 12 9 16 2 (set (reg:SI 88 [ <retval> ])
        (reg:SI 87 [ _4 ])) -1
     (nil))
(insn 16 12 17 2 (set (reg/i:SI 0 ax)
        (reg:SI 88 [ <retval> ])) "test1.c":14 -1
     (nil))
(insn 17 16 0 2 (use (reg/i:SI 0 ax)) "test1.c":14 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)

