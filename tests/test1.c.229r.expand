
;; Function loopy (loopy, funcdef_no=0, decl_uid=2248, cgraph_uid=0, symbol_order=0)

loopy (int a)
{
  int c;
  int b;
  int D.2262;
  int _6;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  b_5 = a_4(D);
  goto <bb 7>; [0.00%]
;;    succ:       7

;;   basic block 3, loop depth 1
;;    pred:       7
  c_8 = 1;
  goto <bb 5>; [0.00%]
;;    succ:       5

;;   basic block 4, loop depth 2
;;    pred:       5
  c_11 = c_3 * 2;
;;    succ:       5

;;   basic block 5, loop depth 2
;;    pred:       3
;;                4
  # c_3 = PHI <c_8(3), c_11(4)>
  if (a_1 > c_3)
    goto <bb 4>; [0.00%]
  else
    goto <bb 6>; [0.00%]
;;    succ:       4
;;                6

;;   basic block 6, loop depth 1
;;    pred:       5
  b_9 = b_2 + c_3;
  a_10 = a_1 - c_3;
;;    succ:       7

;;   basic block 7, loop depth 1
;;    pred:       2
;;                6
  # a_1 = PHI <a_4(D)(2), a_10(6)>
  # b_2 = PHI <b_5(2), b_9(6)>
  if (b_2 <= 999)
    goto <bb 3>; [0.00%]
  else
    goto <bb 8>; [0.00%]
;;    succ:       3
;;                8

;;   basic block 8, loop depth 0
;;    pred:       7
  _6 = b_2;
;;    succ:       9

;;   basic block 9, loop depth 0
;;    pred:       8
<L6> [0.00%]:
  return _6;
;;    succ:       EXIT

}



Partition map 

Partition 1 (a_1 - 1 )
Partition 2 (b_2 - 2 )
Partition 3 (c_3 - 3 )
Partition 4 (a_4(D) - 4 )
Partition 5 (b_5 - 5 )
Partition 6 (_6 - 6 )
Partition 8 (c_8 - 8 )
Partition 9 (b_9 - 9 )
Partition 10 (a_10 - 10 )
Partition 11 (c_11 - 11 )
Partition 12 (_12(D) - 12 )


Partition map 

Partition 0 (a_1 - 1 )
Partition 1 (b_2 - 2 )
Partition 2 (c_3 - 3 )
Partition 3 (a_4(D) - 4 )
Partition 4 (b_5 - 5 )
Partition 5 (c_8 - 8 )
Partition 6 (b_9 - 9 )
Partition 7 (a_10 - 10 )
Partition 8 (c_11 - 11 )
Partition 9 (_12(D) - 12 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483647, 0) a_1 <-> a_4(D)
(2147483647, 0) a_1 <-> a_10
(2147483646, 0) b_2 <-> b_5
(2147483646, 0) c_3 <-> c_8
(2147483646, 0) b_2 <-> b_9
(2147483646, 0) c_3 <-> c_11

Partition map 

Partition 0 (a_1 - 1 )
Partition 1 (b_2 - 2 )
Partition 2 (c_3 - 3 )
Partition 3 (a_4(D) - 4 )
Partition 4 (b_5 - 5 )
Partition 5 (c_8 - 8 )
Partition 6 (b_9 - 9 )
Partition 7 (a_10 - 10 )
Partition 8 (c_11 - 11 )
Partition 9 (_12(D) - 12 )

Coalesce list: (1)a_1 & (4)a_4(D) [map: 0, 3] : Success -> 0
Coalesce list: (1)a_1 & (10)a_10 [map: 0, 7] : Success -> 0
Coalesce list: (2)b_2 & (5)b_5 [map: 1, 4] : Success -> 1
Coalesce list: (3)c_3 & (8)c_8 [map: 2, 5] : Success -> 2
Coalesce list: (2)b_2 & (9)b_9 [map: 1, 6] : Success -> 1
Coalesce list: (3)c_3 & (11)c_11 [map: 2, 8] : Success -> 2
Coalesce list: (2)b_2 & (9)b_2: Already Coalesced.
Coalesce list: (2)b_2 & (5)b_2: Already Coalesced.
Coalesce list: (1)a_1 & (10)a_1: Already Coalesced.
Coalesce list: (3)c_3 & (11)c_3: Already Coalesced.
Coalesce list: (3)c_3 & (8)c_3: Already Coalesced.
After Coalescing:

Partition map 

Partition 0 (a_1 - 1 4 10 )
Partition 1 (b_2 - 2 5 9 )
Partition 2 (c_3 - 3 8 11 )
Partition 3 (_6 - 6 )
Partition 4 (_12(D) - 12 )

loopy (int a)
{
  int c;
  int b;
  int D.2262;
  int _6;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  b_5 = a_4(D);
  goto <bb 7>; [0.00%]
;;    succ:       7

;;   basic block 3, loop depth 1
;;    pred:       7
  c_8 = 1;
  goto <bb 5>; [0.00%]
;;    succ:       5

;;   basic block 4, loop depth 2
;;    pred:       5
  c_11 = c_3 * 2;
;;    succ:       5

;;   basic block 5, loop depth 2
;;    pred:       3
;;                4
  # c_3 = PHI <c_8(3), c_11(4)>
  if (a_1 > c_3)
    goto <bb 4>; [0.00%]
  else
    goto <bb 6>; [0.00%]
;;    succ:       4
;;                6

;;   basic block 6, loop depth 1
;;    pred:       5
  b_9 = b_2 + c_3;
  a_10 = a_1 - c_3;
;;    succ:       7

;;   basic block 7, loop depth 1
;;    pred:       2
;;                6
  # a_1 = PHI <a_4(D)(2), a_10(6)>
  # b_2 = PHI <b_5(2), b_9(6)>
  if (b_2 <= 999)
    goto <bb 3>; [0.00%]
  else
    goto <bb 8>; [0.00%]
;;    succ:       3
;;                8

;;   basic block 8, loop depth 0
;;    pred:       7
  _6 = b_2;
;;    succ:       9

;;   basic block 9, loop depth 0
;;    pred:       8
<L6> [0.00%]:
  return _6;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; b_5 = a_4(D);

(insn 6 5 7 (set (reg:SI 89)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [1 a+0 S4 A32])) "test1.c":4 -1
     (nil))

(insn 7 6 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 b+0 S4 A32])
        (reg:SI 89)) "test1.c":4 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; c_8 = 1;

(insn 11 10 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 c+0 S4 A32])
        (const_int 1 [0x1])) "test1.c":6 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; c_11 = c_3 * 2;

(insn 15 14 0 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -8 [0xfffffffffffffff8])) [1 c+0 S4 A32])
                (ashift:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -8 [0xfffffffffffffff8])) [1 c+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":8 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; 

(code_label 16 15 17 3 (nil) [0 uses])

(note 17 16 0 NOTE_INSN_BASIC_BLOCK)

;; if (a_1 > c_3)

(insn 19 17 20 (set (reg:SI 90)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [1 a+0 S4 A32])) "test1.c":7 -1
     (nil))

(insn 20 19 21 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 90)
            (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 c+0 S4 A32]))) "test1.c":7 -1
     (nil))

(jump_insn 21 20 0 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) "test1.c":7 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; b_9 = b_2 + c_3;

(insn 23 22 24 (set (reg:SI 91)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 c+0 S4 A32])) "test1.c":10 -1
     (nil))

(insn 24 23 0 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -4 [0xfffffffffffffffc])) [1 b+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -4 [0xfffffffffffffffc])) [1 b+0 S4 A32])
                    (reg:SI 91)))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":10 -1
     (nil))

;; a_10 = a_1 - c_3;

(insn 25 24 26 (set (reg:SI 92)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 c+0 S4 A32])) "test1.c":11 -1
     (nil))

(insn 26 25 0 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -20 [0xffffffffffffffec])) [1 a+0 S4 A32])
                (minus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -20 [0xffffffffffffffec])) [1 a+0 S4 A32])
                    (reg:SI 92)))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":11 -1
     (nil))

;; Generating RTL for gimple basic block 7

;; 

(code_label 27 26 28 2 (nil) [0 uses])

(note 28 27 0 NOTE_INSN_BASIC_BLOCK)

;; if (b_2 <= 999)

(insn 30 28 31 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 b+0 S4 A32])
            (const_int 999 [0x3e7]))) "test1.c":5 -1
     (nil))

(jump_insn 31 30 0 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) "test1.c":5 -1
     (nil))

;; Generating RTL for gimple basic block 8

;; _6 = b_2;

(insn 33 32 0 (set (reg:SI 87 [ _6 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 b+0 S4 A32])) "test1.c":13 -1
     (nil))

;; Generating RTL for gimple basic block 9

;; <L6> [0.00%]:

(code_label 34 33 35 6 (nil) [0 uses])

(note 35 34 0 NOTE_INSN_BASIC_BLOCK)

;; return _6;

(insn 36 35 37 (set (reg:SI 88 [ <retval> ])
        (reg:SI 87 [ _6 ])) "test1.c":13 -1
     (nil))

(jump_insn 37 36 38 (set (pc)
        (label_ref 0)) "test1.c":13 -1
     (nil))

(barrier 38 37 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 10 into block 9...
Merged blocks 9 and 10.
Merged 9 and 10 without moving.
Removing jump 37.
Merging block 11 into block 9...
Merged blocks 9 and 11.
Merged 9 and 11 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [1 a+0 S4 A32])
        (reg:SI 5 di [ a ])) "test1.c":3 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 89)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [1 a+0 S4 A32])) "test1.c":4 -1
     (nil))
(insn 7 6 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 b+0 S4 A32])
        (reg:SI 89)) "test1.c":4 -1
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (label_ref 27)) "test1.c":5 -1
     (nil)
 -> 27)
;;  succ:       8

(barrier 9 8 29)
;; basic block 4, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       8
(code_label 29 9 10 4 5 (nil) [1 uses])
(note 10 29 11 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 4 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 c+0 S4 A32])
        (const_int 1 [0x1])) "test1.c":6 -1
     (nil))
(jump_insn 12 11 13 4 (set (pc)
        (label_ref 16)) "test1.c":7 -1
     (nil)
 -> 16)
;;  succ:       6

(barrier 13 12 18)
;; basic block 5, loop depth 2, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       6
(code_label 18 13 14 5 4 (nil) [1 uses])
(note 14 18 15 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -8 [0xfffffffffffffff8])) [1 c+0 S4 A32])
                (ashift:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -8 [0xfffffffffffffff8])) [1 c+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":8 -1
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)

;; basic block 6, loop depth 2, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
;;              5 (FALLTHRU,DFS_BACK)
(code_label 16 15 17 6 3 (nil) [1 uses])
(note 17 16 19 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 19 17 20 6 (set (reg:SI 90)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [1 a+0 S4 A32])) "test1.c":7 -1
     (nil))
(insn 20 19 21 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 90)
            (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 c+0 S4 A32]))) "test1.c":7 -1
     (nil))
(jump_insn 21 20 22 6 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) "test1.c":7 -1
     (nil)
 -> 18)
;;  succ:       5
;;              7 (FALLTHRU)

;; basic block 7, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       6 (FALLTHRU)
(note 22 21 23 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 7 (set (reg:SI 91)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 c+0 S4 A32])) "test1.c":10 -1
     (nil))
(insn 24 23 25 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -4 [0xfffffffffffffffc])) [1 b+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -4 [0xfffffffffffffffc])) [1 b+0 S4 A32])
                    (reg:SI 91)))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":10 -1
     (nil))
(insn 25 24 26 7 (set (reg:SI 92)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 c+0 S4 A32])) "test1.c":11 -1
     (nil))
(insn 26 25 27 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -20 [0xffffffffffffffec])) [1 a+0 S4 A32])
                (minus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -20 [0xffffffffffffffec])) [1 a+0 S4 A32])
                    (reg:SI 92)))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":11 -1
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)

;; basic block 8, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              7 (FALLTHRU,DFS_BACK)
(code_label 27 26 28 8 2 (nil) [1 uses])
(note 28 27 30 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 30 28 31 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 b+0 S4 A32])
            (const_int 999 [0x3e7]))) "test1.c":5 -1
     (nil))
(jump_insn 31 30 32 8 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) "test1.c":5 -1
     (nil)
 -> 29)
;;  succ:       4
;;              9 (FALLTHRU)

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 (FALLTHRU)
(note 32 31 33 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 36 9 (set (reg:SI 87 [ _6 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 b+0 S4 A32])) "test1.c":13 -1
     (nil))
(insn 36 33 40 9 (set (reg:SI 88 [ <retval> ])
        (reg:SI 87 [ _6 ])) "test1.c":13 -1
     (nil))
(insn 40 36 41 9 (set (reg/i:SI 0 ax)
        (reg:SI 88 [ <retval> ])) "test1.c":14 -1
     (nil))
(insn 41 40 0 9 (use (reg/i:SI 0 ax)) "test1.c":14 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function main (main, funcdef_no=1, decl_uid=2258, cgraph_uid=1, symbol_order=1)

main ()
{
  int D.2264;

;;   basic block 2, loop depth 1
;;    pred:       ENTRY
;;                2
gotoboy [0.00%]:
  __builtin_puts (&"Hey!"[0]);
  goto <bb 2> (gotoboy); [0.00%]
;;    succ:       2

}



Partition map 

Partition 4 (_4(D) - 4 )


Partition map 

Partition 0 (_4(D) - 4 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (_4(D) - 4 )

After Coalescing:

Partition map 

Partition 0 (_4(D) - 4 )

main ()
{
  int D.2264;

;;   basic block 2, loop depth 1
;;    pred:       ENTRY
;;                2
gotoboy [0.00%]:
  __builtin_puts (&"Hey!"[0]);
  goto <bb 2> (gotoboy); [0.00%]
;;    succ:       2

}



;; Generating RTL for gimple basic block 2

;; gotoboy [0.00%]:

(code_label 4 2 5 8 ("gotoboy") [0 uses])

(note 5 4 0 NOTE_INSN_BASIC_BLOCK)

;; __builtin_puts (&"Hey!"[0]);

(insn 6 5 7 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f56b7ac0750 *.LC0>)) "test1.c":19 -1
     (nil))

(call_insn 7 6 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f56b79c4600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":19 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
deleting block 4


try_optimize_cfg iteration 1

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 4 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       3 [100.0%]  (FALLTHRU)

;; basic block 3, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 2, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       3 (DFS_BACK)
;;              2 [100.0%]  (FALLTHRU)
(code_label 4 2 5 3 8 ("gotoboy") [1 uses])
(note 5 4 6 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 6 5 7 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f56b7ac0750 *.LC0>)) "test1.c":19 -1
     (nil))
(call_insn 7 6 8 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f56b79c4600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":19 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 8 7 9 3 (set (pc)
        (label_ref 4)) "test1.c":20 -1
     (nil)
 -> 4)
;;  succ:       3 (DFS_BACK)

(barrier 9 8 0)
