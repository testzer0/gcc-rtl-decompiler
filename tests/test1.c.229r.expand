
;; Function isSafe (isSafe, funcdef_no=0, decl_uid=2257, cgraph_uid=0, symbol_order=0)

isSafe (int x, int y, int[8] * sol)
{
  int iftmp.0;
  int D.2300;
  long unsigned int _1;
  long unsigned int _2;
  int[8] * _3;
  int _4;
  int iftmp.0_5;
  int iftmp.0_10;
  int iftmp.0_11;
  int _12;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (x_6(D) >= 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 8>; [0.00%]
;;    succ:       3
;;                8

;;   basic block 3, loop depth 0
;;    pred:       2
  if (x_6(D) <= 7)
    goto <bb 4>; [0.00%]
  else
    goto <bb 8>; [0.00%]
;;    succ:       4
;;                8

;;   basic block 4, loop depth 0
;;    pred:       3
  if (y_7(D) >= 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 8>; [0.00%]
;;    succ:       5
;;                8

;;   basic block 5, loop depth 0
;;    pred:       4
  if (y_7(D) <= 7)
    goto <bb 6>; [0.00%]
  else
    goto <bb 8>; [0.00%]
;;    succ:       6
;;                8

;;   basic block 6, loop depth 0
;;    pred:       5
  _1 = (long unsigned int) x_6(D);
  _2 = _1 * 32;
  _3 = sol_8(D) + _2;
  _4 = *_3[y_7(D)];
  if (_4 == -1)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]
;;    succ:       7
;;                8

;;   basic block 7, loop depth 0
;;    pred:       6
  iftmp.0_10 = 1;
  goto <bb 9>; [0.00%]
;;    succ:       9

;;   basic block 8, loop depth 0
;;    pred:       2
;;                3
;;                4
;;                5
;;                6
  iftmp.0_11 = 0;
;;    succ:       9

;;   basic block 9, loop depth 0
;;    pred:       7
;;                8
  # iftmp.0_5 = PHI <iftmp.0_10(7), iftmp.0_11(8)>
  _12 = iftmp.0_5;
;;    succ:       10

;;   basic block 10, loop depth 0
;;    pred:       9
<L7> [0.00%]:
  return _12;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (iftmp.0_5 - 5 )
Partition 6 (x_6(D) - 6 )
Partition 7 (y_7(D) - 7 )
Partition 8 (sol_8(D) - 8 )
Partition 10 (iftmp.0_10 - 10 )
Partition 11 (iftmp.0_11 - 11 )
Partition 12 (_12 - 12 )
Partition 13 (_13(D) - 13 )


Partition map 

Partition 0 (iftmp.0_5 - 5 )
Partition 1 (x_6(D) - 6 )
Partition 2 (y_7(D) - 7 )
Partition 3 (sol_8(D) - 8 )
Partition 4 (iftmp.0_10 - 10 )
Partition 5 (iftmp.0_11 - 11 )
Partition 6 (_12 - 12 )
Partition 7 (_13(D) - 13 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(1, 0) iftmp.0_5 <-> _12

Partition map 

Partition 0 (iftmp.0_5 - 5 )
Partition 1 (x_6(D) - 6 )
Partition 2 (y_7(D) - 7 )
Partition 3 (sol_8(D) - 8 )
Partition 4 (iftmp.0_10 - 10 )
Partition 5 (iftmp.0_11 - 11 )
Partition 6 (_12 - 12 )
Partition 7 (_13(D) - 13 )

Coalesce list: (5)iftmp.0_5 & (12)_12 [map: 0, 6] : Success -> 0
Coalesce list: (5)iftmp.0_5 & (11)iftmp.0_11 [map: 0, 5] : Success -> 0
Coalesce list: (5)iftmp.0_5 & (10)iftmp.0_10 [map: 0, 4] : Success -> 0
After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (iftmp.0_5 - 5 10 11 12 )
Partition 5 (x_6(D) - 6 )
Partition 6 (y_7(D) - 7 )
Partition 7 (sol_8(D) - 8 )
Partition 8 (_13(D) - 13 )

isSafe (int x, int y, int[8] * sol)
{
  int iftmp.0;
  int D.2300;
  long unsigned int _1;
  long unsigned int _2;
  int[8] * _3;
  int _4;
  int iftmp.0_5;
  int iftmp.0_10;
  int iftmp.0_11;
  int _12;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (x_6(D) >= 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 8>; [0.00%]
;;    succ:       3
;;                8

;;   basic block 3, loop depth 0
;;    pred:       2
  if (x_6(D) <= 7)
    goto <bb 4>; [0.00%]
  else
    goto <bb 8>; [0.00%]
;;    succ:       4
;;                8

;;   basic block 4, loop depth 0
;;    pred:       3
  if (y_7(D) >= 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 8>; [0.00%]
;;    succ:       5
;;                8

;;   basic block 5, loop depth 0
;;    pred:       4
  if (y_7(D) <= 7)
    goto <bb 6>; [0.00%]
  else
    goto <bb 8>; [0.00%]
;;    succ:       6
;;                8

;;   basic block 6, loop depth 0
;;    pred:       5
  _1 = (long unsigned int) x_6(D);
  _2 = _1 * 32;
  _3 = sol_8(D) + _2;
  _4 = *_3[y_7(D)];
  if (_4 == -1)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]
;;    succ:       7
;;                8

;;   basic block 7, loop depth 0
;;    pred:       6
  iftmp.0_10 = 1;
  goto <bb 9>; [0.00%]
;;    succ:       9

;;   basic block 8, loop depth 0
;;    pred:       2
;;                3
;;                4
;;                5
;;                6
  iftmp.0_11 = 0;
;;    succ:       9

;;   basic block 9, loop depth 0
;;    pred:       7
;;                8
  # iftmp.0_5 = PHI <iftmp.0_10(7), iftmp.0_11(8)>
  _12 = iftmp.0_5;
;;    succ:       10

;;   basic block 10, loop depth 0
;;    pred:       9
<L7> [0.00%]:
  return _12;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; if (x_6(D) >= 0)

(insn 8 7 9 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
            (const_int 0 [0]))) "test1.c":14 -1
     (nil))

(jump_insn 9 8 0 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":14 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; if (x_6(D) <= 7)

(insn 11 10 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
            (const_int 7 [0x7]))) "test1.c":13 -1
     (nil))

(jump_insn 12 11 0 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":13 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; if (y_7(D) >= 0)

(insn 14 13 15 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
            (const_int 0 [0]))) "test1.c":13 -1
     (nil))

(jump_insn 15 14 0 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":13 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; if (y_7(D) <= 7)

(insn 17 16 18 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
            (const_int 7 [0x7]))) "test1.c":13 -1
     (nil))

(jump_insn 18 17 0 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":13 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; _1 = (long unsigned int) x_6(D);

(insn 20 19 21 (set (reg:SI 93)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])) "test1.c":14 -1
     (nil))

(insn 21 20 0 (set (reg:DI 87 [ _1 ])
        (sign_extend:DI (reg:SI 93))) "test1.c":14 -1
     (nil))

;; _2 = _1 * 32;

(insn 22 21 0 (parallel [
            (set (reg:DI 88 [ _2 ])
                (ashift:DI (reg:DI 87 [ _1 ])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":14 -1
     (nil))

;; _3 = sol_8(D) + _2;

(insn 23 22 24 (set (reg/f:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 sol+0 S8 A64])) "test1.c":14 -1
     (nil))

(insn 24 23 0 (parallel [
            (set (reg/f:DI 89 [ _3 ])
                (plus:DI (reg:DI 88 [ _2 ])
                    (reg/f:DI 94)))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":14 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -16 [0xfffffffffffffff0])) [2 sol+0 S8 A64])
            (reg:DI 88 [ _2 ]))
        (nil)))
Applying pattern match.pd:84, generic-match.c:11461
Applying pattern match.pd:84, generic-match.c:11461
Applying pattern match.pd:84, generic-match.c:11461

;; _4 = *_3[y_7(D)];

(insn 25 24 26 (set (reg:SI 96)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])) "test1.c":14 -1
     (nil))

(insn 26 25 27 (set (reg:DI 95)
        (sign_extend:DI (reg:SI 96))) "test1.c":14 -1
     (nil))

(insn 27 26 0 (set (reg:SI 90 [ _4 ])
        (mem:SI (plus:DI (mult:DI (reg:DI 95)
                    (const_int 4 [0x4]))
                (reg/f:DI 89 [ _3 ])) [1 *_3 S4 A32])) "test1.c":14 -1
     (nil))

;; if (_4 == -1)

(insn 28 27 29 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 90 [ _4 ])
            (const_int -1 [0xffffffffffffffff]))) "test1.c":14 -1
     (nil))

(jump_insn 29 28 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":14 -1
     (nil))

;; Generating RTL for gimple basic block 7

;; iftmp.0_10 = 1;

(insn 31 30 0 (set (reg:SI 91 [ iftmp.0_5 ])
        (const_int 1 [0x1])) "test1.c":14 -1
     (nil))

;; Generating RTL for gimple basic block 8

;; 

(code_label 34 33 35 2 (nil) [0 uses])

(note 35 34 0 NOTE_INSN_BASIC_BLOCK)

;; iftmp.0_11 = 0;

(insn 36 35 0 (set (reg:SI 91 [ iftmp.0_5 ])
        (const_int 0 [0])) "test1.c":14 -1
     (nil))

;; Generating RTL for gimple basic block 9

;; 

(code_label 37 36 38 3 (nil) [0 uses])

(note 38 37 0 NOTE_INSN_BASIC_BLOCK)

;; _12 = iftmp.0_5;

(nil)

;; Generating RTL for gimple basic block 10

;; <L7> [0.00%]:

(code_label 39 38 40 4 (nil) [0 uses])

(note 40 39 0 NOTE_INSN_BASIC_BLOCK)

;; return _12;

(insn 41 40 42 (set (reg:SI 92 [ <retval> ])
        (reg:SI 91 [ iftmp.0_5 ])) "test1.c":14 -1
     (nil))

(jump_insn 42 41 43 (set (pc)
        (label_ref 0)) "test1.c":14 -1
     (nil))

(barrier 43 42 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Redirecting jump 32 from 10 to 11.
Merging block 10 into block 9...
Merged blocks 9 and 10.
Merged 9 and 10 without moving.
Removing jump 42.
Merging block 12 into block 11...
Merged blocks 11 and 12.
Merged 11 and 12 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
        (reg:SI 5 di [ x ])) "test1.c":12 -1
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
        (reg:SI 4 si [ y ])) "test1.c":12 -1
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 sol+0 S8 A64])
        (reg:DI 1 dx [ sol ])) "test1.c":12 -1
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
            (const_int 0 [0]))) "test1.c":14 -1
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) "test1.c":14 -1
     (nil)
 -> 34)
;;  succ:       4 (FALLTHRU)
;;              9

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 10 9 11 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
            (const_int 7 [0x7]))) "test1.c":13 -1
     (nil))
(jump_insn 12 11 13 4 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) "test1.c":13 -1
     (nil)
 -> 34)
;;  succ:       5 (FALLTHRU)
;;              9

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 (FALLTHRU)
(note 13 12 14 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 5 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
            (const_int 0 [0]))) "test1.c":13 -1
     (nil))
(jump_insn 15 14 16 5 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) "test1.c":13 -1
     (nil)
 -> 34)
;;  succ:       6 (FALLTHRU)
;;              9

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 16 15 17 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
            (const_int 7 [0x7]))) "test1.c":13 -1
     (nil))
(jump_insn 18 17 19 6 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) "test1.c":13 -1
     (nil)
 -> 34)
;;  succ:       7 (FALLTHRU)
;;              9

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       6 (FALLTHRU)
(note 19 18 20 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 7 (set (reg:SI 93)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])) "test1.c":14 -1
     (nil))
(insn 21 20 22 7 (set (reg:DI 87 [ _1 ])
        (sign_extend:DI (reg:SI 93))) "test1.c":14 -1
     (nil))
(insn 22 21 23 7 (parallel [
            (set (reg:DI 88 [ _2 ])
                (ashift:DI (reg:DI 87 [ _1 ])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":14 -1
     (nil))
(insn 23 22 24 7 (set (reg/f:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 sol+0 S8 A64])) "test1.c":14 -1
     (nil))
(insn 24 23 25 7 (parallel [
            (set (reg/f:DI 89 [ _3 ])
                (plus:DI (reg:DI 88 [ _2 ])
                    (reg/f:DI 94)))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":14 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -16 [0xfffffffffffffff0])) [2 sol+0 S8 A64])
            (reg:DI 88 [ _2 ]))
        (nil)))
(insn 25 24 26 7 (set (reg:SI 96)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])) "test1.c":14 -1
     (nil))
(insn 26 25 27 7 (set (reg:DI 95)
        (sign_extend:DI (reg:SI 96))) "test1.c":14 -1
     (nil))
(insn 27 26 28 7 (set (reg:SI 90 [ _4 ])
        (mem:SI (plus:DI (mult:DI (reg:DI 95)
                    (const_int 4 [0x4]))
                (reg/f:DI 89 [ _3 ])) [1 *_3 S4 A32])) "test1.c":14 -1
     (nil))
(insn 28 27 29 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 90 [ _4 ])
            (const_int -1 [0xffffffffffffffff]))) "test1.c":14 -1
     (nil))
(jump_insn 29 28 30 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) "test1.c":14 -1
     (nil)
 -> 34)
;;  succ:       8 (FALLTHRU)
;;              9

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
(note 30 29 31 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 8 (set (reg:SI 91 [ iftmp.0_5 ])
        (const_int 1 [0x1])) "test1.c":14 -1
     (nil))
(jump_insn 32 31 33 8 (set (pc)
        (label_ref:DI 39)) "test1.c":14 659 {jump}
     (nil)
 -> 39)
;;  succ:       11 [100.0%] 

(barrier 33 32 34)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 11, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              4
;;              5
;;              6
;;              7
(code_label 34 33 35 9 2 (nil) [5 uses])
(note 35 34 36 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 39 9 (set (reg:SI 91 [ iftmp.0_5 ])
        (const_int 0 [0])) "test1.c":14 -1
     (nil))
;;  succ:       11 (FALLTHRU)

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       9 (FALLTHRU)
;;              8 [100.0%] 
(code_label 39 36 40 11 4 (nil) [1 uses])
(note 40 39 41 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 45 11 (set (reg:SI 92 [ <retval> ])
        (reg:SI 91 [ iftmp.0_5 ])) "test1.c":14 -1
     (nil))
(insn 45 41 46 11 (set (reg/i:SI 0 ax)
        (reg:SI 92 [ <retval> ])) "test1.c":15 -1
     (nil))
(insn 46 45 0 11 (use (reg/i:SI 0 ax)) "test1.c":15 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function printSolution (printSolution, funcdef_no=1, decl_uid=2260, cgraph_uid=1, symbol_order=1)

printSolution (int[8] * sol)
{
  int y;
  int x;
  long unsigned int _1;
  long unsigned int _2;
  int[8] * _3;
  int _4;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  x_9 = 0;
  goto <bb 7>; [0.00%]
;;    succ:       7

;;   basic block 3, loop depth 1
;;    pred:       7
  y_11 = 0;
  goto <bb 5>; [0.00%]
;;    succ:       5

;;   basic block 4, loop depth 2
;;    pred:       5
  _1 = (long unsigned int) x_5;
  _2 = _1 * 32;
  _3 = sol_14(D) + _2;
  _4 = *_3[y_6];
  printf (" %2d ", _4);
  y_16 = y_6 + 1;
;;    succ:       5

;;   basic block 5, loop depth 2
;;    pred:       3
;;                4
  # y_6 = PHI <y_11(3), y_16(4)>
  if (y_6 <= 7)
    goto <bb 4>; [0.00%]
  else
    goto <bb 6>; [0.00%]
;;    succ:       4
;;                6

;;   basic block 6, loop depth 1
;;    pred:       5
  __builtin_putchar (10);
  x_13 = x_5 + 1;
;;    succ:       7

;;   basic block 7, loop depth 1
;;    pred:       2
;;                6
  # x_5 = PHI <x_9(2), x_13(6)>
  if (x_5 <= 7)
    goto <bb 3>; [0.00%]
  else
    goto <bb 8>; [0.00%]
;;    succ:       3
;;                8

;;   basic block 8, loop depth 0
;;    pred:       7
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (x_5 - 5 )
Partition 6 (y_6 - 6 )
Partition 9 (x_9 - 9 )
Partition 11 (y_11 - 11 )
Partition 13 (x_13 - 13 )
Partition 14 (sol_14(D) - 14 )
Partition 16 (y_16 - 16 )


Partition map 

Partition 0 (x_5 - 5 )
Partition 1 (y_6 - 6 )
Partition 2 (x_9 - 9 )
Partition 3 (y_11 - 11 )
Partition 4 (x_13 - 13 )
Partition 5 (sol_14(D) - 14 )
Partition 6 (y_16 - 16 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483646, 0) x_5 <-> x_9
(2147483646, 0) y_6 <-> y_11
(2147483646, 0) x_5 <-> x_13
(2147483646, 0) y_6 <-> y_16

Partition map 

Partition 0 (x_5 - 5 )
Partition 1 (y_6 - 6 )
Partition 2 (x_9 - 9 )
Partition 3 (y_11 - 11 )
Partition 4 (x_13 - 13 )
Partition 5 (sol_14(D) - 14 )
Partition 6 (y_16 - 16 )

Coalesce list: (5)x_5 & (9)x_9 [map: 0, 2] : Success -> 0
Coalesce list: (6)y_6 & (11)y_11 [map: 1, 3] : Success -> 1
Coalesce list: (5)x_5 & (13)x_13 [map: 0, 4] : Success -> 0
Coalesce list: (6)y_6 & (16)y_16 [map: 1, 6] : Success -> 1
Coalesce list: (5)x_5 & (13)x_5: Already Coalesced.
Coalesce list: (5)x_5 & (9)x_5: Already Coalesced.
Coalesce list: (6)y_6 & (16)y_6: Already Coalesced.
Coalesce list: (6)y_6 & (11)y_6: Already Coalesced.
After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (x_5 - 5 9 13 )
Partition 5 (y_6 - 6 11 16 )
Partition 6 (sol_14(D) - 14 )

printSolution (int[8] * sol)
{
  int y;
  int x;
  long unsigned int _1;
  long unsigned int _2;
  int[8] * _3;
  int _4;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  x_9 = 0;
  goto <bb 7>; [0.00%]
;;    succ:       7

;;   basic block 3, loop depth 1
;;    pred:       7
  y_11 = 0;
  goto <bb 5>; [0.00%]
;;    succ:       5

;;   basic block 4, loop depth 2
;;    pred:       5
  _1 = (long unsigned int) x_5;
  _2 = _1 * 32;
  _3 = sol_14(D) + _2;
  _4 = *_3[y_6];
  printf (" %2d ", _4);
  y_16 = y_6 + 1;
;;    succ:       5

;;   basic block 5, loop depth 2
;;    pred:       3
;;                4
  # y_6 = PHI <y_11(3), y_16(4)>
  if (y_6 <= 7)
    goto <bb 4>; [0.00%]
  else
    goto <bb 6>; [0.00%]
;;    succ:       4
;;                6

;;   basic block 6, loop depth 1
;;    pred:       5
  __builtin_putchar (10);
  x_13 = x_5 + 1;
;;    succ:       7

;;   basic block 7, loop depth 1
;;    pred:       2
;;                6
  # x_5 = PHI <x_9(2), x_13(6)>
  if (x_5 <= 7)
    goto <bb 3>; [0.00%]
  else
    goto <bb 8>; [0.00%]
;;    succ:       3
;;                8

;;   basic block 8, loop depth 0
;;    pred:       7
  return;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; x_9 = 0;

(insn 6 5 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
        (const_int 0 [0])) "test1.c":20 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; y_11 = 0;

(insn 10 9 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
        (const_int 0 [0])) "test1.c":21 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; _1 = (long unsigned int) x_5;

(insn 14 13 15 (set (reg:SI 91)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])) "test1.c":22 -1
     (nil))

(insn 15 14 0 (set (reg:DI 87 [ _1 ])
        (sign_extend:DI (reg:SI 91))) "test1.c":22 -1
     (nil))

;; _2 = _1 * 32;

(insn 16 15 0 (parallel [
            (set (reg:DI 88 [ _2 ])
                (ashift:DI (reg:DI 87 [ _1 ])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":22 -1
     (nil))

;; _3 = sol_14(D) + _2;

(insn 17 16 18 (set (reg/f:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 sol+0 S8 A64])) "test1.c":22 -1
     (nil))

(insn 18 17 0 (parallel [
            (set (reg/f:DI 89 [ _3 ])
                (plus:DI (reg:DI 88 [ _2 ])
                    (reg/f:DI 92)))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":22 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -24 [0xffffffffffffffe8])) [2 sol+0 S8 A64])
            (reg:DI 88 [ _2 ]))
        (nil)))
Applying pattern match.pd:84, generic-match.c:11461
Applying pattern match.pd:84, generic-match.c:11461
Applying pattern match.pd:84, generic-match.c:11461

;; _4 = *_3[y_6];

(insn 19 18 20 (set (reg:SI 94)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])) "test1.c":22 -1
     (nil))

(insn 20 19 21 (set (reg:DI 93)
        (sign_extend:DI (reg:SI 94))) "test1.c":22 -1
     (nil))

(insn 21 20 0 (set (reg:SI 90 [ _4 ])
        (mem:SI (plus:DI (mult:DI (reg:DI 93)
                    (const_int 4 [0x4]))
                (reg/f:DI 89 [ _3 ])) [1 *_3 S4 A32])) "test1.c":22 -1
     (nil))

;; printf (" %2d ", _4);

(insn 22 21 23 (set (reg:SI 4 si)
        (reg:SI 90 [ _4 ])) "test1.c":22 -1
     (nil))

(insn 23 22 24 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fa2de79c090 *.LC0>)) "test1.c":22 -1
     (nil))

(insn 24 23 25 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":22 -1
     (nil))

(call_insn 25 24 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fa2de68bf00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":22 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))

;; y_16 = y_6 + 1;

(insn 26 25 0 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":21 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; 

(code_label 27 26 28 7 (nil) [0 uses])

(note 28 27 0 NOTE_INSN_BASIC_BLOCK)

;; if (y_6 <= 7)

(insn 30 28 31 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
            (const_int 7 [0x7]))) "test1.c":21 -1
     (nil))

(jump_insn 31 30 0 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) "test1.c":21 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; __builtin_putchar (10);

(insn 33 32 34 (set (reg:SI 5 di)
        (const_int 10 [0xa])) "test1.c":23 -1
     (nil))

(call_insn 34 33 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7fa2de68c200 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) "test1.c":23 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))

;; x_13 = x_5 + 1;

(insn 35 34 0 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":20 -1
     (nil))

;; Generating RTL for gimple basic block 7

;; 

(code_label 36 35 37 6 (nil) [0 uses])

(note 37 36 0 NOTE_INSN_BASIC_BLOCK)

;; if (x_5 <= 7)

(insn 39 37 40 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
            (const_int 7 [0x7]))) "test1.c":20 -1
     (nil))

(jump_insn 40 39 0 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 38)
            (pc))) "test1.c":20 -1
     (nil))

;; Generating RTL for gimple basic block 8


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Forwarding edge 8->9 to 10 failed.
Merging block 10 into block 9...
Merged blocks 9 and 10.
Merged 9 and 10 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 sol+0 S8 A64])
        (reg:DI 5 di [ sol ])) "test1.c":19 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
        (const_int 0 [0])) "test1.c":20 -1
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (label_ref 36)) "test1.c":20 -1
     (nil)
 -> 36)
;;  succ:       8

(barrier 8 7 38)
;; basic block 4, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       8
(code_label 38 8 9 4 9 (nil) [1 uses])
(note 9 38 10 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 4 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
        (const_int 0 [0])) "test1.c":21 -1
     (nil))
(jump_insn 11 10 12 4 (set (pc)
        (label_ref 27)) "test1.c":21 -1
     (nil)
 -> 27)
;;  succ:       6

(barrier 12 11 29)
;; basic block 5, loop depth 2, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       6
(code_label 29 12 13 5 8 (nil) [1 uses])
(note 13 29 14 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 5 (set (reg:SI 91)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])) "test1.c":22 -1
     (nil))
(insn 15 14 16 5 (set (reg:DI 87 [ _1 ])
        (sign_extend:DI (reg:SI 91))) "test1.c":22 -1
     (nil))
(insn 16 15 17 5 (parallel [
            (set (reg:DI 88 [ _2 ])
                (ashift:DI (reg:DI 87 [ _1 ])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":22 -1
     (nil))
(insn 17 16 18 5 (set (reg/f:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 sol+0 S8 A64])) "test1.c":22 -1
     (nil))
(insn 18 17 19 5 (parallel [
            (set (reg/f:DI 89 [ _3 ])
                (plus:DI (reg:DI 88 [ _2 ])
                    (reg/f:DI 92)))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":22 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -24 [0xffffffffffffffe8])) [2 sol+0 S8 A64])
            (reg:DI 88 [ _2 ]))
        (nil)))
(insn 19 18 20 5 (set (reg:SI 94)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])) "test1.c":22 -1
     (nil))
(insn 20 19 21 5 (set (reg:DI 93)
        (sign_extend:DI (reg:SI 94))) "test1.c":22 -1
     (nil))
(insn 21 20 22 5 (set (reg:SI 90 [ _4 ])
        (mem:SI (plus:DI (mult:DI (reg:DI 93)
                    (const_int 4 [0x4]))
                (reg/f:DI 89 [ _3 ])) [1 *_3 S4 A32])) "test1.c":22 -1
     (nil))
(insn 22 21 23 5 (set (reg:SI 4 si)
        (reg:SI 90 [ _4 ])) "test1.c":22 -1
     (nil))
(insn 23 22 24 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fa2de79c090 *.LC0>)) "test1.c":22 -1
     (nil))
(insn 24 23 25 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":22 -1
     (nil))
(call_insn 25 24 26 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fa2de68bf00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":22 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 26 25 27 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":21 -1
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)

;; basic block 6, loop depth 2, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
;;              5 (FALLTHRU,DFS_BACK)
(code_label 27 26 28 6 7 (nil) [1 uses])
(note 28 27 30 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 30 28 31 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
            (const_int 7 [0x7]))) "test1.c":21 -1
     (nil))
(jump_insn 31 30 32 6 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) "test1.c":21 -1
     (nil)
 -> 29)
;;  succ:       5
;;              7 (FALLTHRU)

;; basic block 7, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       6 (FALLTHRU)
(note 32 31 33 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 7 (set (reg:SI 5 di)
        (const_int 10 [0xa])) "test1.c":23 -1
     (nil))
(call_insn 34 33 35 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7fa2de68c200 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) "test1.c":23 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 35 34 36 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":20 -1
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)

;; basic block 8, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              7 (FALLTHRU,DFS_BACK)
(code_label 36 35 37 8 6 (nil) [1 uses])
(note 37 36 39 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 39 37 40 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
            (const_int 7 [0x7]))) "test1.c":20 -1
     (nil))
(jump_insn 40 39 41 8 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 38)
            (pc))) "test1.c":20 -1
     (nil)
 -> 38)
;;  succ:       4
;;              9 (FALLTHRU)

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 (FALLTHRU)
(note 41 40 44 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 44 41 0 9 (const_int 0 [0]) "test1.c":25 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function solveKT (solveKT, funcdef_no=2, decl_uid=2270, cgraph_uid=2, symbol_order=2)

solveKT ()
{
  int y;
  int x;
  int yMove[8];
  int xMove[8];
  int sol[8][8];
  int D.2312;
  int _1;
  int _4;
  int _29;
  int _31;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  x_8 = 0;
  goto <bb 7>; [0.00%]
;;    succ:       7

;;   basic block 3, loop depth 1
;;    pred:       7
  y_35 = 0;
  goto <bb 5>; [0.00%]
;;    succ:       5

;;   basic block 4, loop depth 2
;;    pred:       5
  sol[x_2][y_3] = -1;
  y_38 = y_3 + 1;
;;    succ:       5

;;   basic block 5, loop depth 2
;;    pred:       3
;;                4
  # y_3 = PHI <y_35(3), y_38(4)>
  if (y_3 <= 7)
    goto <bb 4>; [0.00%]
  else
    goto <bb 6>; [0.00%]
;;    succ:       4
;;                6

;;   basic block 6, loop depth 1
;;    pred:       5
  x_36 = x_2 + 1;
;;    succ:       7

;;   basic block 7, loop depth 1
;;    pred:       2
;;                6
  # x_2 = PHI <x_8(2), x_36(6)>
  if (x_2 <= 7)
    goto <bb 3>; [0.00%]
  else
    goto <bb 8>; [0.00%]
;;    succ:       3
;;                8

;;   basic block 8, loop depth 0
;;    pred:       7
  xMove[0] = 2;
  xMove[1] = 1;
  xMove[2] = -1;
  xMove[3] = -2;
  xMove[4] = -2;
  xMove[5] = -1;
  xMove[6] = 1;
  xMove[7] = 2;
  yMove[0] = 1;
  yMove[1] = 2;
  yMove[2] = 2;
  yMove[3] = 1;
  yMove[4] = -1;
  yMove[5] = -2;
  yMove[6] = -2;
  yMove[7] = -1;
  sol[0][0] = 0;
  _1 = solveKTUtil (0, 0, 1, &sol, &xMove, &yMove);
  if (_1 == 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]
;;    succ:       9
;;                10

;;   basic block 9, loop depth 0
;;    pred:       8
  printf ("Solution does not exist");
  _31 = 0;
  goto <bb 11>; [0.00%]
;;    succ:       11

;;   basic block 10, loop depth 0
;;    pred:       8
  printSolution (&sol);
  _29 = 1;
;;    succ:       11

;;   basic block 11, loop depth 0
;;    pred:       9
;;                10
  # _4 = PHI <_31(9), _29(10)>
  sol ={v} {CLOBBER};
  xMove ={v} {CLOBBER};
  yMove ={v} {CLOBBER};
;;    succ:       12

;;   basic block 12, loop depth 0
;;    pred:       11
<L9> [0.00%]:
  return _4;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (x_2 - 2 )
Partition 3 (y_3 - 3 )
Partition 4 (_4 - 4 )
Partition 8 (x_8 - 8 )
Partition 29 (_29 - 29 )
Partition 31 (_31 - 31 )
Partition 35 (y_35 - 35 )
Partition 36 (x_36 - 36 )
Partition 38 (y_38 - 38 )
Partition 39 (_39(D) - 39 )


Partition map 

Partition 0 (x_2 - 2 )
Partition 1 (y_3 - 3 )
Partition 2 (_4 - 4 )
Partition 3 (x_8 - 8 )
Partition 4 (_29 - 29 )
Partition 5 (_31 - 31 )
Partition 6 (y_35 - 35 )
Partition 7 (x_36 - 36 )
Partition 8 (y_38 - 38 )
Partition 9 (_39(D) - 39 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483646, 0) x_2 <-> x_8
(2147483646, 0) y_3 <-> y_35
(2147483646, 0) x_2 <-> x_36
(2147483646, 0) y_3 <-> y_38

Partition map 

Partition 0 (x_2 - 2 )
Partition 1 (y_3 - 3 )
Partition 2 (_4 - 4 )
Partition 3 (x_8 - 8 )
Partition 4 (_29 - 29 )
Partition 5 (_31 - 31 )
Partition 6 (y_35 - 35 )
Partition 7 (x_36 - 36 )
Partition 8 (y_38 - 38 )
Partition 9 (_39(D) - 39 )

Coalesce list: (2)x_2 & (8)x_8 [map: 0, 3] : Success -> 0
Coalesce list: (3)y_3 & (35)y_35 [map: 1, 6] : Success -> 1
Coalesce list: (2)x_2 & (36)x_36 [map: 0, 7] : Success -> 0
Coalesce list: (3)y_3 & (38)y_38 [map: 1, 8] : Success -> 1
Coalesce list: (4)_4 & (29)_29 [map: 2, 4] : Success -> 2
Coalesce list: (4)_4 & (31)_31 [map: 2, 5] : Success -> 2
Coalesce list: (2)x_2 & (36)x_2: Already Coalesced.
Coalesce list: (2)x_2 & (8)x_2: Already Coalesced.
Coalesce list: (3)y_3 & (38)y_3: Already Coalesced.
Coalesce list: (3)y_3 & (35)y_3: Already Coalesced.
After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (x_2 - 2 8 36 )
Partition 2 (y_3 - 3 35 38 )
Partition 3 (_4 - 4 29 31 )
Partition 4 (_39(D) - 39 )

solveKT ()
{
  int y;
  int x;
  int yMove[8];
  int xMove[8];
  int sol[8][8];
  int D.2312;
  int _1;
  int _4;
  int _29;
  int _31;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  x_8 = 0;
  goto <bb 7>; [0.00%]
;;    succ:       7

;;   basic block 3, loop depth 1
;;    pred:       7
  y_35 = 0;
  goto <bb 5>; [0.00%]
;;    succ:       5

;;   basic block 4, loop depth 2
;;    pred:       5
  sol[x_2][y_3] = -1;
  y_38 = y_3 + 1;
;;    succ:       5

;;   basic block 5, loop depth 2
;;    pred:       3
;;                4
  # y_3 = PHI <y_35(3), y_38(4)>
  if (y_3 <= 7)
    goto <bb 4>; [0.00%]
  else
    goto <bb 6>; [0.00%]
;;    succ:       4
;;                6

;;   basic block 6, loop depth 1
;;    pred:       5
  x_36 = x_2 + 1;
;;    succ:       7

;;   basic block 7, loop depth 1
;;    pred:       2
;;                6
  # x_2 = PHI <x_8(2), x_36(6)>
  if (x_2 <= 7)
    goto <bb 3>; [0.00%]
  else
    goto <bb 8>; [0.00%]
;;    succ:       3
;;                8

;;   basic block 8, loop depth 0
;;    pred:       7
  xMove[0] = 2;
  xMove[1] = 1;
  xMove[2] = -1;
  xMove[3] = -2;
  xMove[4] = -2;
  xMove[5] = -1;
  xMove[6] = 1;
  xMove[7] = 2;
  yMove[0] = 1;
  yMove[1] = 2;
  yMove[2] = 2;
  yMove[3] = 1;
  yMove[4] = -1;
  yMove[5] = -2;
  yMove[6] = -2;
  yMove[7] = -1;
  sol[0][0] = 0;
  _1 = solveKTUtil (0, 0, 1, &sol, &xMove, &yMove);
  if (_1 == 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]
;;    succ:       9
;;                10

;;   basic block 9, loop depth 0
;;    pred:       8
  printf ("Solution does not exist");
  _31 = 0;
  goto <bb 11>; [0.00%]
;;    succ:       11

;;   basic block 10, loop depth 0
;;    pred:       8
  printSolution (&sol);
  _29 = 1;
;;    succ:       11

;;   basic block 11, loop depth 0
;;    pred:       9
;;                10
  # _4 = PHI <_31(9), _29(10)>
  sol ={v} {CLOBBER};
  xMove ={v} {CLOBBER};
  yMove ={v} {CLOBBER};
;;    succ:       12

;;   basic block 12, loop depth 0
;;    pred:       11
<L9> [0.00%]:
  return _4;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; x_8 = 0;

(insn 5 4 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
        (const_int 0 [0])) "test1.c":39 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; y_35 = 0;

(insn 9 8 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
        (const_int 0 [0])) "test1.c":40 -1
     (nil))

;; Generating RTL for gimple basic block 4
Applying pattern match.pd:84, generic-match.c:11461
Applying pattern match.pd:84, generic-match.c:11461
Applying pattern match.pd:84, generic-match.c:11461

;; sol[x_2][y_3] = -1;

(insn 13 12 14 (set (reg:SI 91)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])) "test1.c":41 -1
     (nil))

(insn 14 13 15 (set (reg:DI 90)
        (sign_extend:DI (reg:SI 91))) "test1.c":41 -1
     (nil))

(insn 15 14 16 (set (reg:SI 93)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])) "test1.c":41 -1
     (nil))

(insn 16 15 17 (set (reg:DI 92)
        (sign_extend:DI (reg:SI 93))) "test1.c":41 -1
     (nil))

(insn 17 16 18 (parallel [
            (set (reg:DI 94)
                (ashift:DI (reg:DI 92)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":41 -1
     (nil))

(insn 18 17 19 (parallel [
            (set (reg:DI 95)
                (plus:DI (reg:DI 94)
                    (reg:DI 90)))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":41 -1
     (nil))

(insn 19 18 0 (set (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 95)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -272 [0xfffffffffffffef0])) [1 sol S4 A32])
        (const_int -1 [0xffffffffffffffff])) "test1.c":41 -1
     (nil))

;; y_38 = y_3 + 1;

(insn 20 19 0 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":40 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; 

(code_label 21 20 22 12 (nil) [0 uses])

(note 22 21 0 NOTE_INSN_BASIC_BLOCK)

;; if (y_3 <= 7)

(insn 24 22 25 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
            (const_int 7 [0x7]))) "test1.c":40 -1
     (nil))

(jump_insn 25 24 0 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) "test1.c":40 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; x_36 = x_2 + 1;

(insn 27 26 0 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":39 -1
     (nil))

;; Generating RTL for gimple basic block 7

;; 

(code_label 28 27 29 11 (nil) [0 uses])

(note 29 28 0 NOTE_INSN_BASIC_BLOCK)

;; if (x_2 <= 7)

(insn 31 29 32 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
            (const_int 7 [0x7]))) "test1.c":39 -1
     (nil))

(jump_insn 32 31 0 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) "test1.c":39 -1
     (nil))

;; Generating RTL for gimple basic block 8

;; xMove[0] = 2;

(insn 34 33 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -304 [0xfffffffffffffed0])) [1 xMove+0 S4 A64])
        (const_int 2 [0x2])) "test1.c":46 -1
     (nil))

;; xMove[1] = 1;

(insn 35 34 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -300 [0xfffffffffffffed4])) [1 xMove+4 S4 A32])
        (const_int 1 [0x1])) "test1.c":46 -1
     (nil))

;; xMove[2] = -1;

(insn 36 35 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -296 [0xfffffffffffffed8])) [1 xMove+8 S4 A64])
        (const_int -1 [0xffffffffffffffff])) "test1.c":46 -1
     (nil))

;; xMove[3] = -2;

(insn 37 36 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -292 [0xfffffffffffffedc])) [1 xMove+12 S4 A32])
        (const_int -2 [0xfffffffffffffffe])) "test1.c":46 -1
     (nil))

;; xMove[4] = -2;

(insn 38 37 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -288 [0xfffffffffffffee0])) [1 xMove+16 S4 A64])
        (const_int -2 [0xfffffffffffffffe])) "test1.c":46 -1
     (nil))

;; xMove[5] = -1;

(insn 39 38 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -284 [0xfffffffffffffee4])) [1 xMove+20 S4 A32])
        (const_int -1 [0xffffffffffffffff])) "test1.c":46 -1
     (nil))

;; xMove[6] = 1;

(insn 40 39 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -280 [0xfffffffffffffee8])) [1 xMove+24 S4 A64])
        (const_int 1 [0x1])) "test1.c":46 -1
     (nil))

;; xMove[7] = 2;

(insn 41 40 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -276 [0xfffffffffffffeec])) [1 xMove+28 S4 A32])
        (const_int 2 [0x2])) "test1.c":46 -1
     (nil))

;; yMove[0] = 1;

(insn 42 41 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -336 [0xfffffffffffffeb0])) [1 yMove+0 S4 A64])
        (const_int 1 [0x1])) "test1.c":47 -1
     (nil))

;; yMove[1] = 2;

(insn 43 42 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -332 [0xfffffffffffffeb4])) [1 yMove+4 S4 A32])
        (const_int 2 [0x2])) "test1.c":47 -1
     (nil))

;; yMove[2] = 2;

(insn 44 43 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -328 [0xfffffffffffffeb8])) [1 yMove+8 S4 A64])
        (const_int 2 [0x2])) "test1.c":47 -1
     (nil))

;; yMove[3] = 1;

(insn 45 44 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -324 [0xfffffffffffffebc])) [1 yMove+12 S4 A32])
        (const_int 1 [0x1])) "test1.c":47 -1
     (nil))

;; yMove[4] = -1;

(insn 46 45 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -320 [0xfffffffffffffec0])) [1 yMove+16 S4 A64])
        (const_int -1 [0xffffffffffffffff])) "test1.c":47 -1
     (nil))

;; yMove[5] = -2;

(insn 47 46 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -316 [0xfffffffffffffec4])) [1 yMove+20 S4 A32])
        (const_int -2 [0xfffffffffffffffe])) "test1.c":47 -1
     (nil))

;; yMove[6] = -2;

(insn 48 47 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -312 [0xfffffffffffffec8])) [1 yMove+24 S4 A64])
        (const_int -2 [0xfffffffffffffffe])) "test1.c":47 -1
     (nil))

;; yMove[7] = -1;

(insn 49 48 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -308 [0xfffffffffffffecc])) [1 yMove+28 S4 A32])
        (const_int -1 [0xffffffffffffffff])) "test1.c":47 -1
     (nil))

;; sol[0][0] = 0;

(insn 50 49 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -272 [0xfffffffffffffef0])) [1 sol+0 S4 A64])
        (const_int 0 [0])) "test1.c":50 -1
     (nil))

;; _1 = solveKTUtil (0, 0, 1, &sol, &xMove, &yMove);

(insn 51 50 52 (parallel [
            (set (reg:DI 96)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -336 [0xfffffffffffffeb0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":54 -1
     (nil))

(insn 52 51 53 (parallel [
            (set (reg:DI 97)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -304 [0xfffffffffffffed0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":54 -1
     (nil))

(insn 53 52 54 (parallel [
            (set (reg:DI 98)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":54 -1
     (nil))

(insn 54 53 55 (set (reg:DI 38 r9)
        (reg:DI 96)) "test1.c":54 -1
     (nil))

(insn 55 54 56 (set (reg:DI 37 r8)
        (reg:DI 97)) "test1.c":54 -1
     (nil))

(insn 56 55 57 (set (reg:DI 2 cx)
        (reg:DI 98)) "test1.c":54 -1
     (nil))

(insn 57 56 58 (set (reg:SI 1 dx)
        (const_int 1 [0x1])) "test1.c":54 -1
     (nil))

(insn 58 57 59 (set (reg:SI 4 si)
        (const_int 0 [0])) "test1.c":54 -1
     (nil))

(insn 59 58 60 (set (reg:SI 5 di)
        (const_int 0 [0])) "test1.c":54 -1
     (nil))

(call_insn 60 59 61 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("solveKTUtil") [flags 0x3]  <function_decl 0x7fa2de775f00 solveKTUtil>) [0 solveKTUtil S1 A8])
            (const_int 0 [0]))) "test1.c":54 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))

(insn 61 60 0 (set (reg:SI 87 [ _1 ])
        (reg:SI 0 ax)) "test1.c":54 -1
     (nil))

;; if (_1 == 0)

(insn 62 61 63 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 87 [ _1 ])
            (const_int 0 [0]))) "test1.c":54 -1
     (nil))

(jump_insn 63 62 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":54 -1
     (nil))

;; Generating RTL for gimple basic block 9

;; printf ("Solution does not exist");

(insn 65 64 66 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fa2de79c870 *.LC1>)) "test1.c":55 -1
     (nil))

(insn 66 65 67 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":55 -1
     (nil))

(call_insn 67 66 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fa2de68bf00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":55 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))

;; _31 = 0;

(insn 68 67 0 (set (reg:SI 88 [ _4 ])
        (const_int 0 [0])) "test1.c":56 -1
     (nil))

;; Generating RTL for gimple basic block 10

;; 

(code_label 71 70 72 15 (nil) [0 uses])

(note 72 71 0 NOTE_INSN_BASIC_BLOCK)

;; printSolution (&sol);

(insn 73 72 74 (parallel [
            (set (reg:DI 99)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":59 -1
     (nil))

(insn 74 73 75 (set (reg:DI 5 di)
        (reg:DI 99)) "test1.c":59 -1
     (nil))

(call_insn 75 74 0 (call (mem:QI (symbol_ref:DI ("printSolution") [flags 0x3]  <function_decl 0x7fa2de77a200 printSolution>) [0 printSolution S1 A8])
        (const_int 0 [0])) "test1.c":59 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; _29 = 1;

(insn 76 75 0 (set (reg:SI 88 [ _4 ])
        (const_int 1 [0x1])) "test1.c":61 -1
     (nil))

;; Generating RTL for gimple basic block 11

;; 

(code_label 77 76 78 16 (nil) [0 uses])

(note 78 77 0 NOTE_INSN_BASIC_BLOCK)

;; sol ={v} {CLOBBER};

(nil)

;; xMove ={v} {CLOBBER};

(nil)

;; yMove ={v} {CLOBBER};

(nil)

;; Generating RTL for gimple basic block 12

;; <L9> [0.00%]:

(code_label 79 78 80 17 (nil) [0 uses])

(note 80 79 0 NOTE_INSN_BASIC_BLOCK)

;; return _4;

(insn 81 80 82 (set (reg:SI 89 [ <retval> ])
        (reg:SI 88 [ _4 ])) -1
     (nil))

(jump_insn 82 81 83 (set (pc)
        (label_ref 0)) -1
     (nil))

(barrier 83 82 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Redirecting jump 69 from 12 to 13.
Merging block 12 into block 11...
Merged blocks 11 and 12.
Merged 11 and 12 without moving.
Removing jump 82.
Merging block 14 into block 13...
Merged blocks 13 and 14.
Merged 13 and 14 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
        (const_int 0 [0])) "test1.c":39 -1
     (nil))
(jump_insn 6 5 7 2 (set (pc)
        (label_ref 28)) "test1.c":39 -1
     (nil)
 -> 28)
;;  succ:       8

(barrier 7 6 30)
;; basic block 4, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       8
(code_label 30 7 8 4 14 (nil) [1 uses])
(note 8 30 9 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 4 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
        (const_int 0 [0])) "test1.c":40 -1
     (nil))
(jump_insn 10 9 11 4 (set (pc)
        (label_ref 21)) "test1.c":40 -1
     (nil)
 -> 21)
;;  succ:       6

(barrier 11 10 23)
;; basic block 5, loop depth 2, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       6
(code_label 23 11 12 5 13 (nil) [1 uses])
(note 12 23 13 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 5 (set (reg:SI 91)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])) "test1.c":41 -1
     (nil))
(insn 14 13 15 5 (set (reg:DI 90)
        (sign_extend:DI (reg:SI 91))) "test1.c":41 -1
     (nil))
(insn 15 14 16 5 (set (reg:SI 93)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])) "test1.c":41 -1
     (nil))
(insn 16 15 17 5 (set (reg:DI 92)
        (sign_extend:DI (reg:SI 93))) "test1.c":41 -1
     (nil))
(insn 17 16 18 5 (parallel [
            (set (reg:DI 94)
                (ashift:DI (reg:DI 92)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":41 -1
     (nil))
(insn 18 17 19 5 (parallel [
            (set (reg:DI 95)
                (plus:DI (reg:DI 94)
                    (reg:DI 90)))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":41 -1
     (nil))
(insn 19 18 20 5 (set (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 95)
                        (const_int 4 [0x4]))
                    (reg/f:DI 82 virtual-stack-vars))
                (const_int -272 [0xfffffffffffffef0])) [1 sol S4 A32])
        (const_int -1 [0xffffffffffffffff])) "test1.c":41 -1
     (nil))
(insn 20 19 21 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":40 -1
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)

;; basic block 6, loop depth 2, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
;;              5 (FALLTHRU,DFS_BACK)
(code_label 21 20 22 6 12 (nil) [1 uses])
(note 22 21 24 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 24 22 25 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
            (const_int 7 [0x7]))) "test1.c":40 -1
     (nil))
(jump_insn 25 24 26 6 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) "test1.c":40 -1
     (nil)
 -> 23)
;;  succ:       5
;;              7 (FALLTHRU)

;; basic block 7, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       6 (FALLTHRU)
(note 26 25 27 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":39 -1
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)

;; basic block 8, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              7 (FALLTHRU,DFS_BACK)
(code_label 28 27 29 8 11 (nil) [1 uses])
(note 29 28 31 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 31 29 32 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
            (const_int 7 [0x7]))) "test1.c":39 -1
     (nil))
(jump_insn 32 31 33 8 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) "test1.c":39 -1
     (nil)
 -> 30)
;;  succ:       4
;;              9 (FALLTHRU)

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 (FALLTHRU)
(note 33 32 34 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 9 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -304 [0xfffffffffffffed0])) [1 xMove+0 S4 A64])
        (const_int 2 [0x2])) "test1.c":46 -1
     (nil))
(insn 35 34 36 9 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -300 [0xfffffffffffffed4])) [1 xMove+4 S4 A32])
        (const_int 1 [0x1])) "test1.c":46 -1
     (nil))
(insn 36 35 37 9 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -296 [0xfffffffffffffed8])) [1 xMove+8 S4 A64])
        (const_int -1 [0xffffffffffffffff])) "test1.c":46 -1
     (nil))
(insn 37 36 38 9 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -292 [0xfffffffffffffedc])) [1 xMove+12 S4 A32])
        (const_int -2 [0xfffffffffffffffe])) "test1.c":46 -1
     (nil))
(insn 38 37 39 9 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -288 [0xfffffffffffffee0])) [1 xMove+16 S4 A64])
        (const_int -2 [0xfffffffffffffffe])) "test1.c":46 -1
     (nil))
(insn 39 38 40 9 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -284 [0xfffffffffffffee4])) [1 xMove+20 S4 A32])
        (const_int -1 [0xffffffffffffffff])) "test1.c":46 -1
     (nil))
(insn 40 39 41 9 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -280 [0xfffffffffffffee8])) [1 xMove+24 S4 A64])
        (const_int 1 [0x1])) "test1.c":46 -1
     (nil))
(insn 41 40 42 9 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -276 [0xfffffffffffffeec])) [1 xMove+28 S4 A32])
        (const_int 2 [0x2])) "test1.c":46 -1
     (nil))
(insn 42 41 43 9 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -336 [0xfffffffffffffeb0])) [1 yMove+0 S4 A64])
        (const_int 1 [0x1])) "test1.c":47 -1
     (nil))
(insn 43 42 44 9 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -332 [0xfffffffffffffeb4])) [1 yMove+4 S4 A32])
        (const_int 2 [0x2])) "test1.c":47 -1
     (nil))
(insn 44 43 45 9 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -328 [0xfffffffffffffeb8])) [1 yMove+8 S4 A64])
        (const_int 2 [0x2])) "test1.c":47 -1
     (nil))
(insn 45 44 46 9 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -324 [0xfffffffffffffebc])) [1 yMove+12 S4 A32])
        (const_int 1 [0x1])) "test1.c":47 -1
     (nil))
(insn 46 45 47 9 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -320 [0xfffffffffffffec0])) [1 yMove+16 S4 A64])
        (const_int -1 [0xffffffffffffffff])) "test1.c":47 -1
     (nil))
(insn 47 46 48 9 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -316 [0xfffffffffffffec4])) [1 yMove+20 S4 A32])
        (const_int -2 [0xfffffffffffffffe])) "test1.c":47 -1
     (nil))
(insn 48 47 49 9 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -312 [0xfffffffffffffec8])) [1 yMove+24 S4 A64])
        (const_int -2 [0xfffffffffffffffe])) "test1.c":47 -1
     (nil))
(insn 49 48 50 9 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -308 [0xfffffffffffffecc])) [1 yMove+28 S4 A32])
        (const_int -1 [0xffffffffffffffff])) "test1.c":47 -1
     (nil))
(insn 50 49 51 9 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -272 [0xfffffffffffffef0])) [1 sol+0 S4 A64])
        (const_int 0 [0])) "test1.c":50 -1
     (nil))
(insn 51 50 52 9 (parallel [
            (set (reg:DI 96)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -336 [0xfffffffffffffeb0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":54 -1
     (nil))
(insn 52 51 53 9 (parallel [
            (set (reg:DI 97)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -304 [0xfffffffffffffed0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":54 -1
     (nil))
(insn 53 52 54 9 (parallel [
            (set (reg:DI 98)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":54 -1
     (nil))
(insn 54 53 55 9 (set (reg:DI 38 r9)
        (reg:DI 96)) "test1.c":54 -1
     (nil))
(insn 55 54 56 9 (set (reg:DI 37 r8)
        (reg:DI 97)) "test1.c":54 -1
     (nil))
(insn 56 55 57 9 (set (reg:DI 2 cx)
        (reg:DI 98)) "test1.c":54 -1
     (nil))
(insn 57 56 58 9 (set (reg:SI 1 dx)
        (const_int 1 [0x1])) "test1.c":54 -1
     (nil))
(insn 58 57 59 9 (set (reg:SI 4 si)
        (const_int 0 [0])) "test1.c":54 -1
     (nil))
(insn 59 58 60 9 (set (reg:SI 5 di)
        (const_int 0 [0])) "test1.c":54 -1
     (nil))
(call_insn 60 59 61 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("solveKTUtil") [flags 0x3]  <function_decl 0x7fa2de775f00 solveKTUtil>) [0 solveKTUtil S1 A8])
            (const_int 0 [0]))) "test1.c":54 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 61 60 62 9 (set (reg:SI 87 [ _1 ])
        (reg:SI 0 ax)) "test1.c":54 -1
     (nil))
(insn 62 61 63 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 87 [ _1 ])
            (const_int 0 [0]))) "test1.c":54 -1
     (nil))
(jump_insn 63 62 64 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) "test1.c":54 -1
     (nil)
 -> 71)
;;  succ:       10 (FALLTHRU)
;;              11

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
(note 64 63 65 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 10 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fa2de79c870 *.LC1>)) "test1.c":55 -1
     (nil))
(insn 66 65 67 10 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":55 -1
     (nil))
(call_insn 67 66 68 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fa2de68bf00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":55 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 68 67 69 10 (set (reg:SI 88 [ _4 ])
        (const_int 0 [0])) "test1.c":56 -1
     (nil))
(jump_insn 69 68 70 10 (set (pc)
        (label_ref:DI 79)) "test1.c":56 659 {jump}
     (nil)
 -> 79)
;;  succ:       13 [100.0%] 

(barrier 70 69 71)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 13, flags: (NEW, REACHABLE, RTL)
;;  pred:       9
(code_label 71 70 72 11 15 (nil) [1 uses])
(note 72 71 73 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 73 72 74 11 (parallel [
            (set (reg:DI 99)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":59 -1
     (nil))
(insn 74 73 75 11 (set (reg:DI 5 di)
        (reg:DI 99)) "test1.c":59 -1
     (nil))
(call_insn 75 74 76 11 (call (mem:QI (symbol_ref:DI ("printSolution") [flags 0x3]  <function_decl 0x7fa2de77a200 printSolution>) [0 printSolution S1 A8])
        (const_int 0 [0])) "test1.c":59 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 76 75 79 11 (set (reg:SI 88 [ _4 ])
        (const_int 1 [0x1])) "test1.c":61 -1
     (nil))
;;  succ:       13 (FALLTHRU)

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       11 (FALLTHRU)
;;              10 [100.0%] 
(code_label 79 76 80 13 17 (nil) [1 uses])
(note 80 79 81 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 85 13 (set (reg:SI 89 [ <retval> ])
        (reg:SI 88 [ _4 ])) -1
     (nil))
(insn 85 81 86 13 (set (reg/i:SI 0 ax)
        (reg:SI 89 [ <retval> ])) "test1.c":62 -1
     (nil))
(insn 86 85 0 13 (use (reg/i:SI 0 ax)) "test1.c":62 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function solveKTUtil (solveKTUtil, funcdef_no=3, decl_uid=2253, cgraph_uid=3, symbol_order=3)

solveKTUtil (int x, int y, int movei, int[8] * sol, int * xMove, int * yMove)
{
  int next_y;
  int next_x;
  int k;
  int D.2317;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  int _4;
  long unsigned int _5;
  long unsigned int _6;
  int * _7;
  int _8;
  int _9;
  long unsigned int _10;
  long unsigned int _11;
  int[8] * _12;
  int _13;
  int _14;
  long unsigned int _15;
  long unsigned int _16;
  int[8] * _17;
  int _19;
  int _26;
  int _38;
  int _40;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (movei_23(D) == 64)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  _40 = 1;
  goto <bb 12> (<L9>); [0.00%]
;;    succ:       12

;;   basic block 4, loop depth 0
;;    pred:       2
  k_24 = 0;
  goto <bb 10>; [0.00%]
;;    succ:       10

;;   basic block 5, loop depth 1
;;    pred:       10
  _1 = (long unsigned int) k_18;
  _2 = _1 * 4;
  _3 = xMove_27(D) + _2;
  _4 = *_3;
  next_x_29 = x_28(D) + _4;
  _5 = (long unsigned int) k_18;
  _6 = _5 * 4;
  _7 = yMove_30(D) + _6;
  _8 = *_7;
  next_y_32 = y_31(D) + _8;
  _9 = isSafe (next_x_29, next_y_32, sol_33(D));
  if (_9 != 0)
    goto <bb 6>; [0.00%]
  else
    goto <bb 9>; [0.00%]
;;    succ:       6
;;                9

;;   basic block 6, loop depth 1
;;    pred:       5
  _10 = (long unsigned int) next_x_29;
  _11 = _10 * 32;
  _12 = sol_33(D) + _11;
  *_12[next_y_32] = movei_23(D);
  _13 = movei_23(D) + 1;
  _14 = solveKTUtil (next_x_29, next_y_32, _13, sol_33(D), xMove_27(D), yMove_30(D));
  if (_14 == 1)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]
;;    succ:       7
;;                8

;;   basic block 7, loop depth 0
;;    pred:       6
  _38 = 1;
  goto <bb 12> (<L9>); [0.00%]
;;    succ:       12

;;   basic block 8, loop depth 1
;;    pred:       6
  _15 = (long unsigned int) next_x_29;
  _16 = _15 * 32;
  _17 = sol_33(D) + _16;
  *_17[next_y_32] = -1;
;;    succ:       9

;;   basic block 9, loop depth 1
;;    pred:       5
;;                8
  k_39 = k_18 + 1;
;;    succ:       10

;;   basic block 10, loop depth 1
;;    pred:       4
;;                9
  # k_18 = PHI <k_24(4), k_39(9)>
  if (k_18 <= 7)
    goto <bb 5>; [0.00%]
  else
    goto <bb 11>; [0.00%]
;;    succ:       5
;;                11

;;   basic block 11, loop depth 0
;;    pred:       10
  _26 = 0;
;;    succ:       12

;;   basic block 12, loop depth 0
;;    pred:       3
;;                7
;;                11
  # _19 = PHI <_40(3), _38(7), _26(11)>
<L9> [0.00%]:
  return _19;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (_5 - 5 )
Partition 6 (_6 - 6 )
Partition 7 (_7 - 7 )
Partition 8 (_8 - 8 )
Partition 9 (_9 - 9 )
Partition 10 (_10 - 10 )
Partition 11 (_11 - 11 )
Partition 12 (_12 - 12 )
Partition 13 (_13 - 13 )
Partition 14 (_14 - 14 )
Partition 15 (_15 - 15 )
Partition 16 (_16 - 16 )
Partition 17 (_17 - 17 )
Partition 18 (k_18 - 18 )
Partition 19 (_19 - 19 )
Partition 23 (movei_23(D) - 23 )
Partition 24 (k_24 - 24 )
Partition 26 (_26 - 26 )
Partition 27 (xMove_27(D) - 27 )
Partition 28 (x_28(D) - 28 )
Partition 29 (next_x_29 - 29 )
Partition 30 (yMove_30(D) - 30 )
Partition 31 (y_31(D) - 31 )
Partition 32 (next_y_32 - 32 )
Partition 33 (sol_33(D) - 33 )
Partition 38 (_38 - 38 )
Partition 39 (k_39 - 39 )
Partition 40 (_40 - 40 )
Partition 41 (_41(D) - 41 )


Partition map 

Partition 0 (k_18 - 18 )
Partition 1 (_19 - 19 )
Partition 2 (movei_23(D) - 23 )
Partition 3 (k_24 - 24 )
Partition 4 (_26 - 26 )
Partition 5 (xMove_27(D) - 27 )
Partition 6 (x_28(D) - 28 )
Partition 7 (yMove_30(D) - 30 )
Partition 8 (y_31(D) - 31 )
Partition 9 (sol_33(D) - 33 )
Partition 10 (_38 - 38 )
Partition 11 (k_39 - 39 )
Partition 12 (_40 - 40 )
Partition 13 (_41(D) - 41 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483646, 0) k_18 <-> k_24
(2147483646, 0) k_18 <-> k_39

Partition map 

Partition 0 (k_18 - 18 )
Partition 1 (_19 - 19 )
Partition 2 (movei_23(D) - 23 )
Partition 3 (k_24 - 24 )
Partition 4 (_26 - 26 )
Partition 5 (xMove_27(D) - 27 )
Partition 6 (x_28(D) - 28 )
Partition 7 (yMove_30(D) - 30 )
Partition 8 (y_31(D) - 31 )
Partition 9 (sol_33(D) - 33 )
Partition 10 (_38 - 38 )
Partition 11 (k_39 - 39 )
Partition 12 (_40 - 40 )
Partition 13 (_41(D) - 41 )

Coalesce list: (18)k_18 & (24)k_24 [map: 0, 3] : Success -> 0
Coalesce list: (18)k_18 & (39)k_39 [map: 0, 11] : Success -> 0
Coalesce list: (19)_19 & (26)_26 [map: 1, 4] : Success -> 1
Coalesce list: (19)_19 & (38)_38 [map: 1, 10] : Success -> 1
Coalesce list: (19)_19 & (40)_40 [map: 1, 12] : Success -> 1
Coalesce list: (18)k_18 & (39)k_18: Already Coalesced.
Coalesce list: (18)k_18 & (24)k_18: Already Coalesced.
After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (_5 - 5 )
Partition 5 (_6 - 6 )
Partition 6 (_7 - 7 )
Partition 7 (_8 - 8 )
Partition 8 (_9 - 9 )
Partition 9 (_10 - 10 )
Partition 10 (_11 - 11 )
Partition 11 (_12 - 12 )
Partition 12 (_13 - 13 )
Partition 13 (_14 - 14 )
Partition 14 (_15 - 15 )
Partition 15 (_16 - 16 )
Partition 16 (_17 - 17 )
Partition 17 (k_18 - 18 24 39 )
Partition 18 (_19 - 19 26 38 40 )
Partition 19 (movei_23(D) - 23 )
Partition 20 (xMove_27(D) - 27 )
Partition 21 (x_28(D) - 28 )
Partition 22 (next_x_29 - 29 )
Partition 23 (yMove_30(D) - 30 )
Partition 24 (y_31(D) - 31 )
Partition 25 (next_y_32 - 32 )
Partition 26 (sol_33(D) - 33 )
Partition 27 (_41(D) - 41 )

solveKTUtil (int x, int y, int movei, int[8] * sol, int * xMove, int * yMove)
{
  int next_y;
  int next_x;
  int k;
  int D.2317;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  int _4;
  long unsigned int _5;
  long unsigned int _6;
  int * _7;
  int _8;
  int _9;
  long unsigned int _10;
  long unsigned int _11;
  int[8] * _12;
  int _13;
  int _14;
  long unsigned int _15;
  long unsigned int _16;
  int[8] * _17;
  int _19;
  int _26;
  int _38;
  int _40;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (movei_23(D) == 64)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  _40 = 1;
  goto <bb 12> (<L9>); [0.00%]
;;    succ:       12

;;   basic block 4, loop depth 0
;;    pred:       2
  k_24 = 0;
  goto <bb 10>; [0.00%]
;;    succ:       10

;;   basic block 5, loop depth 1
;;    pred:       10
  _1 = (long unsigned int) k_18;
  _2 = _1 * 4;
  _3 = xMove_27(D) + _2;
  _4 = *_3;
  next_x_29 = x_28(D) + _4;
  _5 = (long unsigned int) k_18;
  _6 = _5 * 4;
  _7 = yMove_30(D) + _6;
  _8 = *_7;
  next_y_32 = y_31(D) + _8;
  _9 = isSafe (next_x_29, next_y_32, sol_33(D));
  if (_9 != 0)
    goto <bb 6>; [0.00%]
  else
    goto <bb 9>; [0.00%]
;;    succ:       6
;;                9

;;   basic block 6, loop depth 1
;;    pred:       5
  _10 = (long unsigned int) next_x_29;
  _11 = _10 * 32;
  _12 = sol_33(D) + _11;
  *_12[next_y_32] = movei_23(D);
  _13 = movei_23(D) + 1;
  _14 = solveKTUtil (next_x_29, next_y_32, _13, sol_33(D), xMove_27(D), yMove_30(D));
  if (_14 == 1)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]
;;    succ:       7
;;                8

;;   basic block 7, loop depth 0
;;    pred:       6
  _38 = 1;
  goto <bb 12> (<L9>); [0.00%]
;;    succ:       12

;;   basic block 8, loop depth 1
;;    pred:       6
  _15 = (long unsigned int) next_x_29;
  _16 = _15 * 32;
  _17 = sol_33(D) + _16;
  *_17[next_y_32] = -1;
;;    succ:       9

;;   basic block 9, loop depth 1
;;    pred:       5
;;                8
  k_39 = k_18 + 1;
;;    succ:       10

;;   basic block 10, loop depth 1
;;    pred:       4
;;                9
  # k_18 = PHI <k_24(4), k_39(9)>
  if (k_18 <= 7)
    goto <bb 5>; [0.00%]
  else
    goto <bb 11>; [0.00%]
;;    succ:       5
;;                11

;;   basic block 11, loop depth 0
;;    pred:       10
  _26 = 0;
;;    succ:       12

;;   basic block 12, loop depth 0
;;    pred:       3
;;                7
;;                11
  # _19 = PHI <_40(3), _38(7), _26(11)>
<L9> [0.00%]:
  return _19;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; if (movei_23(D) == 64)

(insn 11 10 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])) [1 movei+0 S4 A32])
            (const_int 64 [0x40]))) "test1.c":70 -1
     (nil))

(jump_insn 12 11 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":70 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; _40 = 1;

(insn 14 13 0 (set (reg:SI 104 [ _19 ])
        (const_int 1 [0x1])) "test1.c":71 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; 

(code_label 17 16 18 19 (nil) [0 uses])

(note 18 17 0 NOTE_INSN_BASIC_BLOCK)

;; k_24 = 0;

(insn 19 18 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 k+0 S4 A32])
        (const_int 0 [0])) "test1.c":75 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; _1 = (long unsigned int) k_18;

(insn 23 22 24 (set (reg:SI 106)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 k+0 S4 A32])) "test1.c":76 -1
     (nil))

(insn 24 23 0 (set (reg:DI 87 [ _1 ])
        (sign_extend:DI (reg:SI 106))) "test1.c":76 -1
     (nil))

;; _2 = _1 * 4;

(insn 25 24 0 (parallel [
            (set (reg:DI 88 [ _2 ])
                (ashift:DI (reg:DI 87 [ _1 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":76 -1
     (nil))

;; _3 = xMove_27(D) + _2;

(insn 26 25 27 (set (reg/f:DI 107)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -48 [0xffffffffffffffd0])) [2 xMove+0 S8 A64])) "test1.c":76 -1
     (nil))

(insn 27 26 0 (parallel [
            (set (reg/f:DI 89 [ _3 ])
                (plus:DI (reg:DI 88 [ _2 ])
                    (reg/f:DI 107)))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":76 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -48 [0xffffffffffffffd0])) [2 xMove+0 S8 A64])
            (reg:DI 88 [ _2 ]))
        (nil)))

;; _4 = *_3;

(insn 28 27 0 (set (reg:SI 90 [ _4 ])
        (mem:SI (reg/f:DI 89 [ _3 ]) [1 *_3+0 S4 A32])) "test1.c":76 -1
     (nil))

;; next_x_29 = x_28(D) + _4;

(insn 32 28 33 (set (reg:SI 111)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [1 x+0 S4 A32])) "test1.c":76 -1
     (nil))

(insn 33 32 34 (parallel [
            (set (reg:SI 110)
                (plus:SI (reg:SI 90 [ _4 ])
                    (reg:SI 111)))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":76 -1
     (expr_list:REG_EQUAL (plus:SI (reg:SI 90 [ _4 ])
            (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -20 [0xffffffffffffffec])) [1 x+0 S4 A32]))
        (nil)))

(insn 34 33 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 next_x+0 S4 A32])
        (reg:SI 110)) "test1.c":76 -1
     (nil))

;; _5 = (long unsigned int) k_18;

(insn 35 34 36 (set (reg:SI 112)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 k+0 S4 A32])) "test1.c":77 -1
     (nil))

(insn 36 35 0 (set (reg:DI 91 [ _5 ])
        (sign_extend:DI (reg:SI 112))) "test1.c":77 -1
     (nil))

;; _6 = _5 * 4;

(insn 37 36 0 (parallel [
            (set (reg:DI 92 [ _6 ])
                (ashift:DI (reg:DI 91 [ _5 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":77 -1
     (nil))

;; _7 = yMove_30(D) + _6;

(insn 38 37 39 (set (reg/f:DI 113)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -56 [0xffffffffffffffc8])) [2 yMove+0 S8 A64])) "test1.c":77 -1
     (nil))

(insn 39 38 0 (parallel [
            (set (reg/f:DI 93 [ _7 ])
                (plus:DI (reg:DI 92 [ _6 ])
                    (reg/f:DI 113)))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":77 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -56 [0xffffffffffffffc8])) [2 yMove+0 S8 A64])
            (reg:DI 92 [ _6 ]))
        (nil)))

;; _8 = *_7;

(insn 40 39 0 (set (reg:SI 94 [ _8 ])
        (mem:SI (reg/f:DI 93 [ _7 ]) [1 *_7+0 S4 A32])) "test1.c":77 -1
     (nil))

;; next_y_32 = y_31(D) + _8;

(insn 44 40 45 (set (reg:SI 117)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [1 y+0 S4 A32])) "test1.c":77 -1
     (nil))

(insn 45 44 46 (parallel [
            (set (reg:SI 116)
                (plus:SI (reg:SI 94 [ _8 ])
                    (reg:SI 117)))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":77 -1
     (expr_list:REG_EQUAL (plus:SI (reg:SI 94 [ _8 ])
            (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -24 [0xffffffffffffffe8])) [1 y+0 S4 A32]))
        (nil)))

(insn 46 45 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 next_y+0 S4 A32])
        (reg:SI 116)) "test1.c":77 -1
     (nil))

;; _9 = isSafe (next_x_29, next_y_32, sol_33(D));

(insn 47 46 48 (set (reg:DI 118)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 sol+0 S8 A64])) "test1.c":78 -1
     (nil))

(insn 48 47 49 (set (reg:SI 119)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 next_y+0 S4 A32])) "test1.c":78 -1
     (nil))

(insn 49 48 50 (set (reg:SI 120)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 next_x+0 S4 A32])) "test1.c":78 -1
     (nil))

(insn 50 49 51 (set (reg:DI 1 dx)
        (reg:DI 118)) "test1.c":78 -1
     (nil))

(insn 51 50 52 (set (reg:SI 4 si)
        (reg:SI 119)) "test1.c":78 -1
     (nil))

(insn 52 51 53 (set (reg:SI 5 di)
        (reg:SI 120)) "test1.c":78 -1
     (nil))

(call_insn 53 52 54 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("isSafe") [flags 0x3]  <function_decl 0x7fa2de77a000 isSafe>) [0 isSafe S1 A8])
            (const_int 0 [0]))) "test1.c":78 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))

(insn 54 53 0 (set (reg:SI 95 [ _9 ])
        (reg:SI 0 ax)) "test1.c":78 -1
     (nil))

;; if (_9 != 0)

(insn 55 54 56 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 95 [ _9 ])
            (const_int 0 [0]))) "test1.c":78 -1
     (nil))

(jump_insn 56 55 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":78 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; _10 = (long unsigned int) next_x_29;

(insn 58 57 59 (set (reg:SI 121)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 next_x+0 S4 A32])) "test1.c":79 -1
     (nil))

(insn 59 58 0 (set (reg:DI 96 [ _10 ])
        (sign_extend:DI (reg:SI 121))) "test1.c":79 -1
     (nil))

;; _11 = _10 * 32;

(insn 60 59 0 (parallel [
            (set (reg:DI 97 [ _11 ])
                (ashift:DI (reg:DI 96 [ _10 ])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":79 -1
     (nil))

;; _12 = sol_33(D) + _11;

(insn 61 60 62 (set (reg/f:DI 122)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 sol+0 S8 A64])) "test1.c":79 -1
     (nil))

(insn 62 61 0 (parallel [
            (set (reg/f:DI 98 [ _12 ])
                (plus:DI (reg:DI 97 [ _11 ])
                    (reg/f:DI 122)))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":79 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -40 [0xffffffffffffffd8])) [2 sol+0 S8 A64])
            (reg:DI 97 [ _11 ]))
        (nil)))
Applying pattern match.pd:84, generic-match.c:11461
Applying pattern match.pd:84, generic-match.c:11461
Applying pattern match.pd:84, generic-match.c:11461

;; *_12[next_y_32] = movei_23(D);

(insn 63 62 64 (set (reg:SI 124)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 next_y+0 S4 A32])) "test1.c":79 -1
     (nil))

(insn 64 63 65 (set (reg:DI 123)
        (sign_extend:DI (reg:SI 124))) "test1.c":79 -1
     (nil))

(insn 65 64 66 (set (reg:SI 125)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [1 movei+0 S4 A32])) "test1.c":79 -1
     (nil))

(insn 66 65 0 (set (mem:SI (plus:DI (mult:DI (reg:DI 123)
                    (const_int 4 [0x4]))
                (reg/f:DI 98 [ _12 ])) [1 *_12 S4 A32])
        (reg:SI 125)) "test1.c":79 -1
     (nil))

;; _13 = movei_23(D) + 1;

(insn 67 66 68 (set (reg:SI 126)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [1 movei+0 S4 A32])) "test1.c":80 -1
     (nil))

(insn 68 67 0 (parallel [
            (set (reg:SI 99 [ _13 ])
                (plus:SI (reg:SI 126)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":80 -1
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])) [1 movei+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))

;; _14 = solveKTUtil (next_x_29, next_y_32, _13, sol_33(D), xMove_27(D), yMove_30(D));

(insn 69 68 70 (set (reg:DI 127)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -56 [0xffffffffffffffc8])) [2 yMove+0 S8 A64])) "test1.c":80 -1
     (nil))

(insn 70 69 71 (set (reg:DI 128)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -48 [0xffffffffffffffd0])) [2 xMove+0 S8 A64])) "test1.c":80 -1
     (nil))

(insn 71 70 72 (set (reg:DI 129)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 sol+0 S8 A64])) "test1.c":80 -1
     (nil))

(insn 72 71 73 (set (reg:SI 130)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 next_y+0 S4 A32])) "test1.c":80 -1
     (nil))

(insn 73 72 74 (set (reg:SI 131)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 next_x+0 S4 A32])) "test1.c":80 -1
     (nil))

(insn 74 73 75 (set (reg:DI 38 r9)
        (reg:DI 127)) "test1.c":80 -1
     (nil))

(insn 75 74 76 (set (reg:DI 37 r8)
        (reg:DI 128)) "test1.c":80 -1
     (nil))

(insn 76 75 77 (set (reg:DI 2 cx)
        (reg:DI 129)) "test1.c":80 -1
     (nil))

(insn 77 76 78 (set (reg:SI 1 dx)
        (reg:SI 99 [ _13 ])) "test1.c":80 -1
     (nil))

(insn 78 77 79 (set (reg:SI 4 si)
        (reg:SI 130)) "test1.c":80 -1
     (nil))

(insn 79 78 80 (set (reg:SI 5 di)
        (reg:SI 131)) "test1.c":80 -1
     (nil))

(call_insn 80 79 81 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("solveKTUtil") [flags 0x3]  <function_decl 0x7fa2de775f00 solveKTUtil>) [0 solveKTUtil S1 A8])
            (const_int 0 [0]))) "test1.c":80 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))

(insn 81 80 0 (set (reg:SI 100 [ _14 ])
        (reg:SI 0 ax)) "test1.c":80 -1
     (nil))

;; if (_14 == 1)

(insn 82 81 83 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 100 [ _14 ])
            (const_int 1 [0x1]))) "test1.c":80 -1
     (nil))

(jump_insn 83 82 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":80 -1
     (nil))

;; Generating RTL for gimple basic block 7

;; _38 = 1;

(insn 85 84 0 (set (reg:SI 104 [ _19 ])
        (const_int 1 [0x1])) "test1.c":83 -1
     (nil))

;; Generating RTL for gimple basic block 8

;; 

(code_label 88 87 89 23 (nil) [0 uses])

(note 89 88 0 NOTE_INSN_BASIC_BLOCK)

;; _15 = (long unsigned int) next_x_29;

(insn 90 89 91 (set (reg:SI 132)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 next_x+0 S4 A32])) "test1.c":85 -1
     (nil))

(insn 91 90 0 (set (reg:DI 101 [ _15 ])
        (sign_extend:DI (reg:SI 132))) "test1.c":85 -1
     (nil))

;; _16 = _15 * 32;

(insn 92 91 0 (parallel [
            (set (reg:DI 102 [ _16 ])
                (ashift:DI (reg:DI 101 [ _15 ])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":85 -1
     (nil))

;; _17 = sol_33(D) + _16;

(insn 93 92 94 (set (reg/f:DI 133)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 sol+0 S8 A64])) "test1.c":85 -1
     (nil))

(insn 94 93 0 (parallel [
            (set (reg/f:DI 103 [ _17 ])
                (plus:DI (reg:DI 102 [ _16 ])
                    (reg/f:DI 133)))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":85 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -40 [0xffffffffffffffd8])) [2 sol+0 S8 A64])
            (reg:DI 102 [ _16 ]))
        (nil)))
Applying pattern match.pd:84, generic-match.c:11461
Applying pattern match.pd:84, generic-match.c:11461
Applying pattern match.pd:84, generic-match.c:11461

;; *_17[next_y_32] = -1;

(insn 95 94 96 (set (reg:SI 135)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 next_y+0 S4 A32])) "test1.c":85 -1
     (nil))

(insn 96 95 97 (set (reg:DI 134)
        (sign_extend:DI (reg:SI 135))) "test1.c":85 -1
     (nil))

(insn 97 96 0 (set (mem:SI (plus:DI (mult:DI (reg:DI 134)
                    (const_int 4 [0x4]))
                (reg/f:DI 103 [ _17 ])) [1 *_17 S4 A32])
        (const_int -1 [0xffffffffffffffff])) "test1.c":85 -1
     (nil))

;; Generating RTL for gimple basic block 9

;; 

(code_label 98 97 99 22 (nil) [0 uses])

(note 99 98 0 NOTE_INSN_BASIC_BLOCK)

;; k_39 = k_18 + 1;

(insn 100 99 0 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -4 [0xfffffffffffffffc])) [1 k+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -4 [0xfffffffffffffffc])) [1 k+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":75 -1
     (nil))

;; Generating RTL for gimple basic block 10

;; 

(code_label 101 100 102 21 (nil) [0 uses])

(note 102 101 0 NOTE_INSN_BASIC_BLOCK)

;; if (k_18 <= 7)

(insn 104 102 105 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 k+0 S4 A32])
            (const_int 7 [0x7]))) "test1.c":75 -1
     (nil))

(jump_insn 105 104 0 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 103)
            (pc))) "test1.c":75 -1
     (nil))

;; Generating RTL for gimple basic block 11

;; _26 = 0;

(insn 107 106 0 (set (reg:SI 104 [ _19 ])
        (const_int 0 [0])) "test1.c":89 -1
     (nil))

;; Generating RTL for gimple basic block 12

;; <L9> [0.00%]:

(code_label 108 107 109 20 (nil) [0 uses])

(note 109 108 0 NOTE_INSN_BASIC_BLOCK)

;; return _19;

(insn 110 109 111 (set (reg:SI 105 [ <retval> ])
        (reg:SI 104 [ _19 ])) -1
     (nil))

(jump_insn 111 110 112 (set (pc)
        (label_ref 0)) -1
     (nil))

(barrier 112 111 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Removing jump 111.
Merging block 14 into block 13...
Merged blocks 13 and 14.
Merged 13 and 14 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [1 x+0 S4 A32])
        (reg:SI 5 di [ x ])) "test1.c":68 -1
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [1 y+0 S4 A32])
        (reg:SI 4 si [ y ])) "test1.c":68 -1
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [1 movei+0 S4 A32])
        (reg:SI 1 dx [ movei ])) "test1.c":68 -1
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 sol+0 S8 A64])
        (reg:DI 2 cx [ sol ])) "test1.c":68 -1
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -48 [0xffffffffffffffd0])) [2 xMove+0 S8 A64])
        (reg:DI 37 r8 [ xMove ])) "test1.c":68 -1
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -56 [0xffffffffffffffc8])) [2 yMove+0 S8 A64])
        (reg:DI 38 r9 [ yMove ])) "test1.c":68 -1
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])) [1 movei+0 S4 A32])
            (const_int 64 [0x40]))) "test1.c":70 -1
     (nil))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) "test1.c":70 -1
     (nil)
 -> 17)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 13 12 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 4 (set (reg:SI 104 [ _19 ])
        (const_int 1 [0x1])) "test1.c":71 -1
     (nil))
(jump_insn 15 14 16 4 (set (pc)
        (label_ref 108)) "test1.c":71 -1
     (nil)
 -> 108)
;;  succ:       13

(barrier 16 15 17)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 17 16 18 5 19 (nil) [1 uses])
(note 18 17 19 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 5 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 k+0 S4 A32])
        (const_int 0 [0])) "test1.c":75 -1
     (nil))
(jump_insn 20 19 21 5 (set (pc)
        (label_ref 101)) "test1.c":75 -1
     (nil)
 -> 101)
;;  succ:       11

(barrier 21 20 103)
;; basic block 6, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       11
(code_label 103 21 22 6 24 (nil) [1 uses])
(note 22 103 23 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 6 (set (reg:SI 106)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 k+0 S4 A32])) "test1.c":76 -1
     (nil))
(insn 24 23 25 6 (set (reg:DI 87 [ _1 ])
        (sign_extend:DI (reg:SI 106))) "test1.c":76 -1
     (nil))
(insn 25 24 26 6 (parallel [
            (set (reg:DI 88 [ _2 ])
                (ashift:DI (reg:DI 87 [ _1 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":76 -1
     (nil))
(insn 26 25 27 6 (set (reg/f:DI 107)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -48 [0xffffffffffffffd0])) [2 xMove+0 S8 A64])) "test1.c":76 -1
     (nil))
(insn 27 26 28 6 (parallel [
            (set (reg/f:DI 89 [ _3 ])
                (plus:DI (reg:DI 88 [ _2 ])
                    (reg/f:DI 107)))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":76 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -48 [0xffffffffffffffd0])) [2 xMove+0 S8 A64])
            (reg:DI 88 [ _2 ]))
        (nil)))
(insn 28 27 32 6 (set (reg:SI 90 [ _4 ])
        (mem:SI (reg/f:DI 89 [ _3 ]) [1 *_3+0 S4 A32])) "test1.c":76 -1
     (nil))
(insn 32 28 33 6 (set (reg:SI 111)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [1 x+0 S4 A32])) "test1.c":76 -1
     (nil))
(insn 33 32 34 6 (parallel [
            (set (reg:SI 110)
                (plus:SI (reg:SI 90 [ _4 ])
                    (reg:SI 111)))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":76 -1
     (expr_list:REG_EQUAL (plus:SI (reg:SI 90 [ _4 ])
            (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -20 [0xffffffffffffffec])) [1 x+0 S4 A32]))
        (nil)))
(insn 34 33 35 6 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 next_x+0 S4 A32])
        (reg:SI 110)) "test1.c":76 -1
     (nil))
(insn 35 34 36 6 (set (reg:SI 112)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 k+0 S4 A32])) "test1.c":77 -1
     (nil))
(insn 36 35 37 6 (set (reg:DI 91 [ _5 ])
        (sign_extend:DI (reg:SI 112))) "test1.c":77 -1
     (nil))
(insn 37 36 38 6 (parallel [
            (set (reg:DI 92 [ _6 ])
                (ashift:DI (reg:DI 91 [ _5 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":77 -1
     (nil))
(insn 38 37 39 6 (set (reg/f:DI 113)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -56 [0xffffffffffffffc8])) [2 yMove+0 S8 A64])) "test1.c":77 -1
     (nil))
(insn 39 38 40 6 (parallel [
            (set (reg/f:DI 93 [ _7 ])
                (plus:DI (reg:DI 92 [ _6 ])
                    (reg/f:DI 113)))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":77 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -56 [0xffffffffffffffc8])) [2 yMove+0 S8 A64])
            (reg:DI 92 [ _6 ]))
        (nil)))
(insn 40 39 44 6 (set (reg:SI 94 [ _8 ])
        (mem:SI (reg/f:DI 93 [ _7 ]) [1 *_7+0 S4 A32])) "test1.c":77 -1
     (nil))
(insn 44 40 45 6 (set (reg:SI 117)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [1 y+0 S4 A32])) "test1.c":77 -1
     (nil))
(insn 45 44 46 6 (parallel [
            (set (reg:SI 116)
                (plus:SI (reg:SI 94 [ _8 ])
                    (reg:SI 117)))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":77 -1
     (expr_list:REG_EQUAL (plus:SI (reg:SI 94 [ _8 ])
            (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -24 [0xffffffffffffffe8])) [1 y+0 S4 A32]))
        (nil)))
(insn 46 45 47 6 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 next_y+0 S4 A32])
        (reg:SI 116)) "test1.c":77 -1
     (nil))
(insn 47 46 48 6 (set (reg:DI 118)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 sol+0 S8 A64])) "test1.c":78 -1
     (nil))
(insn 48 47 49 6 (set (reg:SI 119)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 next_y+0 S4 A32])) "test1.c":78 -1
     (nil))
(insn 49 48 50 6 (set (reg:SI 120)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 next_x+0 S4 A32])) "test1.c":78 -1
     (nil))
(insn 50 49 51 6 (set (reg:DI 1 dx)
        (reg:DI 118)) "test1.c":78 -1
     (nil))
(insn 51 50 52 6 (set (reg:SI 4 si)
        (reg:SI 119)) "test1.c":78 -1
     (nil))
(insn 52 51 53 6 (set (reg:SI 5 di)
        (reg:SI 120)) "test1.c":78 -1
     (nil))
(call_insn 53 52 54 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("isSafe") [flags 0x3]  <function_decl 0x7fa2de77a000 isSafe>) [0 isSafe S1 A8])
            (const_int 0 [0]))) "test1.c":78 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 54 53 55 6 (set (reg:SI 95 [ _9 ])
        (reg:SI 0 ax)) "test1.c":78 -1
     (nil))
(insn 55 54 56 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 95 [ _9 ])
            (const_int 0 [0]))) "test1.c":78 -1
     (nil))
(jump_insn 56 55 57 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 98)
            (pc))) "test1.c":78 -1
     (nil)
 -> 98)
;;  succ:       7 (FALLTHRU)
;;              10

;; basic block 7, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       6 (FALLTHRU)
(note 57 56 58 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 7 (set (reg:SI 121)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 next_x+0 S4 A32])) "test1.c":79 -1
     (nil))
(insn 59 58 60 7 (set (reg:DI 96 [ _10 ])
        (sign_extend:DI (reg:SI 121))) "test1.c":79 -1
     (nil))
(insn 60 59 61 7 (parallel [
            (set (reg:DI 97 [ _11 ])
                (ashift:DI (reg:DI 96 [ _10 ])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":79 -1
     (nil))
(insn 61 60 62 7 (set (reg/f:DI 122)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 sol+0 S8 A64])) "test1.c":79 -1
     (nil))
(insn 62 61 63 7 (parallel [
            (set (reg/f:DI 98 [ _12 ])
                (plus:DI (reg:DI 97 [ _11 ])
                    (reg/f:DI 122)))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":79 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -40 [0xffffffffffffffd8])) [2 sol+0 S8 A64])
            (reg:DI 97 [ _11 ]))
        (nil)))
(insn 63 62 64 7 (set (reg:SI 124)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 next_y+0 S4 A32])) "test1.c":79 -1
     (nil))
(insn 64 63 65 7 (set (reg:DI 123)
        (sign_extend:DI (reg:SI 124))) "test1.c":79 -1
     (nil))
(insn 65 64 66 7 (set (reg:SI 125)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [1 movei+0 S4 A32])) "test1.c":79 -1
     (nil))
(insn 66 65 67 7 (set (mem:SI (plus:DI (mult:DI (reg:DI 123)
                    (const_int 4 [0x4]))
                (reg/f:DI 98 [ _12 ])) [1 *_12 S4 A32])
        (reg:SI 125)) "test1.c":79 -1
     (nil))
(insn 67 66 68 7 (set (reg:SI 126)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [1 movei+0 S4 A32])) "test1.c":80 -1
     (nil))
(insn 68 67 69 7 (parallel [
            (set (reg:SI 99 [ _13 ])
                (plus:SI (reg:SI 126)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":80 -1
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])) [1 movei+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 69 68 70 7 (set (reg:DI 127)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -56 [0xffffffffffffffc8])) [2 yMove+0 S8 A64])) "test1.c":80 -1
     (nil))
(insn 70 69 71 7 (set (reg:DI 128)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -48 [0xffffffffffffffd0])) [2 xMove+0 S8 A64])) "test1.c":80 -1
     (nil))
(insn 71 70 72 7 (set (reg:DI 129)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 sol+0 S8 A64])) "test1.c":80 -1
     (nil))
(insn 72 71 73 7 (set (reg:SI 130)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 next_y+0 S4 A32])) "test1.c":80 -1
     (nil))
(insn 73 72 74 7 (set (reg:SI 131)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 next_x+0 S4 A32])) "test1.c":80 -1
     (nil))
(insn 74 73 75 7 (set (reg:DI 38 r9)
        (reg:DI 127)) "test1.c":80 -1
     (nil))
(insn 75 74 76 7 (set (reg:DI 37 r8)
        (reg:DI 128)) "test1.c":80 -1
     (nil))
(insn 76 75 77 7 (set (reg:DI 2 cx)
        (reg:DI 129)) "test1.c":80 -1
     (nil))
(insn 77 76 78 7 (set (reg:SI 1 dx)
        (reg:SI 99 [ _13 ])) "test1.c":80 -1
     (nil))
(insn 78 77 79 7 (set (reg:SI 4 si)
        (reg:SI 130)) "test1.c":80 -1
     (nil))
(insn 79 78 80 7 (set (reg:SI 5 di)
        (reg:SI 131)) "test1.c":80 -1
     (nil))
(call_insn 80 79 81 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("solveKTUtil") [flags 0x3]  <function_decl 0x7fa2de775f00 solveKTUtil>) [0 solveKTUtil S1 A8])
            (const_int 0 [0]))) "test1.c":80 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 81 80 82 7 (set (reg:SI 100 [ _14 ])
        (reg:SI 0 ax)) "test1.c":80 -1
     (nil))
(insn 82 81 83 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 100 [ _14 ])
            (const_int 1 [0x1]))) "test1.c":80 -1
     (nil))
(jump_insn 83 82 84 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 88)
            (pc))) "test1.c":80 -1
     (nil)
 -> 88)
;;  succ:       8 (FALLTHRU)
;;              9

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 (FALLTHRU)
(note 84 83 85 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 86 8 (set (reg:SI 104 [ _19 ])
        (const_int 1 [0x1])) "test1.c":83 -1
     (nil))
(jump_insn 86 85 87 8 (set (pc)
        (label_ref 108)) "test1.c":83 -1
     (nil)
 -> 108)
;;  succ:       13

(barrier 87 86 88)
;; basic block 9, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       7
(code_label 88 87 89 9 23 (nil) [1 uses])
(note 89 88 90 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 9 (set (reg:SI 132)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 next_x+0 S4 A32])) "test1.c":85 -1
     (nil))
(insn 91 90 92 9 (set (reg:DI 101 [ _15 ])
        (sign_extend:DI (reg:SI 132))) "test1.c":85 -1
     (nil))
(insn 92 91 93 9 (parallel [
            (set (reg:DI 102 [ _16 ])
                (ashift:DI (reg:DI 101 [ _15 ])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":85 -1
     (nil))
(insn 93 92 94 9 (set (reg/f:DI 133)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 sol+0 S8 A64])) "test1.c":85 -1
     (nil))
(insn 94 93 95 9 (parallel [
            (set (reg/f:DI 103 [ _17 ])
                (plus:DI (reg:DI 102 [ _16 ])
                    (reg/f:DI 133)))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":85 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -40 [0xffffffffffffffd8])) [2 sol+0 S8 A64])
            (reg:DI 102 [ _16 ]))
        (nil)))
(insn 95 94 96 9 (set (reg:SI 135)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 next_y+0 S4 A32])) "test1.c":85 -1
     (nil))
(insn 96 95 97 9 (set (reg:DI 134)
        (sign_extend:DI (reg:SI 135))) "test1.c":85 -1
     (nil))
(insn 97 96 98 9 (set (mem:SI (plus:DI (mult:DI (reg:DI 134)
                    (const_int 4 [0x4]))
                (reg/f:DI 103 [ _17 ])) [1 *_17 S4 A32])
        (const_int -1 [0xffffffffffffffff])) "test1.c":85 -1
     (nil))
;;  succ:       10 (FALLTHRU)

;; basic block 10, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL)
;;  pred:       6
;;              9 (FALLTHRU)
(code_label 98 97 99 10 22 (nil) [1 uses])
(note 99 98 100 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -4 [0xfffffffffffffffc])) [1 k+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -4 [0xfffffffffffffffc])) [1 k+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":75 -1
     (nil))
;;  succ:       11 (FALLTHRU,DFS_BACK)

;; basic block 11, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
;;              10 (FALLTHRU,DFS_BACK)
(code_label 101 100 102 11 21 (nil) [1 uses])
(note 102 101 104 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 104 102 105 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 k+0 S4 A32])
            (const_int 7 [0x7]))) "test1.c":75 -1
     (nil))
(jump_insn 105 104 106 11 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 103)
            (pc))) "test1.c":75 -1
     (nil)
 -> 103)
;;  succ:       6
;;              12 (FALLTHRU)

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL)
;;  pred:       11 (FALLTHRU)
(note 106 105 107 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 107 106 108 12 (set (reg:SI 104 [ _19 ])
        (const_int 0 [0])) "test1.c":89 -1
     (nil))
;;  succ:       13 (FALLTHRU)

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
;;              8
;;              12 (FALLTHRU)
(code_label 108 107 109 13 20 (nil) [2 uses])
(note 109 108 110 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 110 109 114 13 (set (reg:SI 105 [ <retval> ])
        (reg:SI 104 [ _19 ])) -1
     (nil))
(insn 114 110 115 13 (set (reg/i:SI 0 ax)
        (reg:SI 105 [ <retval> ])) "test1.c":90 -1
     (nil))
(insn 115 114 0 13 (use (reg/i:SI 0 ax)) "test1.c":90 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function main (main, funcdef_no=4, decl_uid=2297, cgraph_uid=4, symbol_order=4)

main ()
{
  int D.2323;
  int _3;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  solveKT ();
  _3 = 0;
;;    succ:       3

;;   basic block 3, loop depth 0
;;    pred:       2
<L0> [0.00%]:
  return _3;
;;    succ:       EXIT

}



Partition map 

Partition 3 (_3 - 3 )
Partition 4 (_4(D) - 4 )


Partition map 

Partition 0 (_4(D) - 4 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (_4(D) - 4 )

After Coalescing:

Partition map 

Partition 0 (_3 - 3 )
Partition 1 (_4(D) - 4 )

main ()
{
  int D.2323;
  int _3;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  solveKT ();
  _3 = 0;
;;    succ:       3

;;   basic block 3, loop depth 0
;;    pred:       2
<L0> [0.00%]:
  return _3;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; solveKT ();

(insn 5 4 6 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":97 -1
     (nil))

(call_insn 6 5 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("solveKT") [flags 0x3]  <function_decl 0x7fa2de77a400 solveKT>) [0 solveKT S1 A8])
            (const_int 0 [0]))) "test1.c":97 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (nil)))

;; _3 = 0;

(insn 7 6 0 (set (reg:SI 87 [ _3 ])
        (const_int 0 [0])) "test1.c":98 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; <L0> [0.00%]:

(code_label 8 7 9 26 (nil) [0 uses])

(note 9 8 0 NOTE_INSN_BASIC_BLOCK)

;; return _3;

(insn 10 9 11 (set (reg:SI 88 [ <retval> ])
        (reg:SI 87 [ _3 ])) -1
     (nil))

(jump_insn 11 10 12 (set (pc)
        (label_ref 0)) -1
     (nil))

(barrier 12 11 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 4 into block 2...
Merged blocks 2 and 4.
Merged 2 and 4 without moving.
Removing jump 11.
Merging block 5 into block 2...
Merged blocks 2 and 5.
Merged 2 and 5 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":97 -1
     (nil))
(call_insn 6 5 7 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("solveKT") [flags 0x3]  <function_decl 0x7fa2de77a400 solveKT>) [0 solveKT S1 A8])
            (const_int 0 [0]))) "test1.c":97 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (nil)))
(insn 7 6 10 2 (set (reg:SI 87 [ _3 ])
        (const_int 0 [0])) "test1.c":98 -1
     (nil))
(insn 10 7 14 2 (set (reg:SI 88 [ <retval> ])
        (reg:SI 87 [ _3 ])) -1
     (nil))
(insn 14 10 15 2 (set (reg/i:SI 0 ax)
        (reg:SI 88 [ <retval> ])) "test1.c":99 -1
     (nil))
(insn 15 14 0 2 (use (reg/i:SI 0 ax)) "test1.c":99 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)

