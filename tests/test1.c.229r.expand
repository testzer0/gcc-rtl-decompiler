
;; Function max (max, funcdef_no=5, decl_uid=2769, cgraph_uid=5, symbol_order=5)

max (int a, int b)
{
  int D.2859;
  int _3;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _3 = MAX_EXPR <b_1(D), a_2(D)>;
;;    succ:       3

;;   basic block 3, loop depth 0
;;    pred:       2
<L0> [0.00%]:
  return _3;
;;    succ:       EXIT

}



Partition map 

Partition 1 (b_1(D) - 1 )
Partition 2 (a_2(D) - 2 )
Partition 3 (_3 - 3 )
Partition 5 (_5(D) - 5 )


Partition map 

Partition 0 (b_1(D) - 1 )
Partition 1 (a_2(D) - 2 )
Partition 2 (_5(D) - 5 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (b_1(D) - 1 )
Partition 1 (a_2(D) - 2 )
Partition 2 (_5(D) - 5 )

After Coalescing:

Partition map 

Partition 0 (b_1(D) - 1 )
Partition 1 (a_2(D) - 2 )
Partition 2 (_3 - 3 )
Partition 3 (_5(D) - 5 )

max (int a, int b)
{
  int D.2859;
  int _3;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _3 = MAX_EXPR <b_1(D), a_2(D)>;
;;    succ:       3

;;   basic block 3, loop depth 0
;;    pred:       2
<L0> [0.00%]:
  return _3;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; _3 = MAX_EXPR <b_1(D), a_2(D)>;

(insn 7 6 8 (set (reg:SI 89)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 a+0 S4 A32])) "test1.c":13 -1
     (nil))

(insn 8 7 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 b+0 S4 A32])
            (reg:SI 89))) "test1.c":13 -1
     (nil))

(insn 9 8 0 (set (reg:SI 87 [ _3 ])
        (if_then_else:SI (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 b+0 S4 A32])
            (reg:SI 89))) "test1.c":13 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; <L0> [0.00%]:

(code_label 10 9 11 2 (nil) [0 uses])

(note 11 10 0 NOTE_INSN_BASIC_BLOCK)

;; return _3;

(insn 12 11 13 (set (reg:SI 88 [ <retval> ])
        (reg:SI 87 [ _3 ])) "test1.c":13 -1
     (nil))

(jump_insn 13 12 14 (set (pc)
        (label_ref 0)) "test1.c":13 -1
     (nil))

(barrier 14 13 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 4 into block 2...
Merged blocks 2 and 4.
Merged 2 and 4 without moving.
Removing jump 13.
Merging block 5 into block 2...
Merged blocks 2 and 5.
Merged 2 and 5 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 a+0 S4 A32])
        (reg:SI 5 di [ a ])) "test1.c":13 -1
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 b+0 S4 A32])
        (reg:SI 4 si [ b ])) "test1.c":13 -1
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 89)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 a+0 S4 A32])) "test1.c":13 -1
     (nil))
(insn 8 7 9 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 b+0 S4 A32])
            (reg:SI 89))) "test1.c":13 -1
     (nil))
(insn 9 8 12 2 (set (reg:SI 87 [ _3 ])
        (if_then_else:SI (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 b+0 S4 A32])
            (reg:SI 89))) "test1.c":13 -1
     (nil))
(insn 12 9 16 2 (set (reg:SI 88 [ <retval> ])
        (reg:SI 87 [ _3 ])) "test1.c":13 -1
     (nil))
(insn 16 12 17 2 (set (reg/i:SI 0 ax)
        (reg:SI 88 [ <retval> ])) "test1.c":13 -1
     (nil))
(insn 17 16 0 2 (use (reg/i:SI 0 ax)) "test1.c":13 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function newNode (newNode, funcdef_no=6, decl_uid=2772, cgraph_uid=6, symbol_order=6)

newNode (int key)
{
  struct avlNode * node;
  struct avlNode * D.2864;
  struct avlNode * _11;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  node_4 = malloc (32);
  if (node_4 == 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  __builtin_puts (&"!! Out of Space !!"[0]);
  goto <bb 5>; [0.00%]
;;    succ:       5

;;   basic block 4, loop depth 0
;;    pred:       2
  node_4->key = key_5(D);
  node_4->left = 0B;
  node_4->right = 0B;
  node_4->height = 0;
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
  _11 = node_4;
;;    succ:       6

;;   basic block 6, loop depth 0
;;    pred:       5
<L3> [0.00%]:
  return _11;
;;    succ:       EXIT

}



Partition map 

Partition 4 (node_4 - 4 )
Partition 5 (key_5(D) - 5 )
Partition 11 (_11 - 11 )
Partition 12 (_12(D) - 12 )


Partition map 

Partition 0 (key_5(D) - 5 )
Partition 1 (_12(D) - 12 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (key_5(D) - 5 )
Partition 1 (_12(D) - 12 )

After Coalescing:

Partition map 

Partition 0 (node_4 - 4 )
Partition 1 (key_5(D) - 5 )
Partition 2 (_11 - 11 )
Partition 3 (_12(D) - 12 )

newNode (int key)
{
  struct avlNode * node;
  struct avlNode * D.2864;
  struct avlNode * _11;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  node_4 = malloc (32);
  if (node_4 == 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  __builtin_puts (&"!! Out of Space !!"[0]);
  goto <bb 5>; [0.00%]
;;    succ:       5

;;   basic block 4, loop depth 0
;;    pred:       2
  node_4->key = key_5(D);
  node_4->left = 0B;
  node_4->right = 0B;
  node_4->height = 0;
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
  _11 = node_4;
;;    succ:       6

;;   basic block 6, loop depth 0
;;    pred:       5
<L3> [0.00%]:
  return _11;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; node_4 = malloc (32);

(insn 6 5 7 (set (reg:DI 5 di)
        (const_int 32 [0x20])) "test1.c":17 -1
     (nil))

(call_insn 7 6 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fddd76d1300 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) "test1.c":17 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 8 7 9 (set (reg/f:DI 89)
        (reg:DI 0 ax)) "test1.c":17 -1
     (expr_list:REG_NOALIAS (reg/f:DI 89)
        (nil)))

(insn 9 8 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])
        (reg/f:DI 89)) "test1.c":17 -1
     (nil))

;; if (node_4 == 0B)

(insn 10 9 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])
            (const_int 0 [0]))) "test1.c":19 -1
     (nil))

(jump_insn 11 10 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":19 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; __builtin_puts (&"!! Out of Space !!"[0]);

(insn 13 12 14 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fddd7452000 *.LC0>)) "test1.c":20 -1
     (nil))

(call_insn 14 13 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":20 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; Generating RTL for gimple basic block 4

;; 

(code_label 17 16 18 4 (nil) [0 uses])

(note 18 17 0 NOTE_INSN_BASIC_BLOCK)

;; node_4->key = key_5(D);

(insn 19 18 20 (set (reg/f:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":23 -1
     (nil))

(insn 20 19 21 (set (reg:SI 91)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [1 key+0 S4 A32])) "test1.c":23 -1
     (nil))

(insn 21 20 0 (set (mem:SI (reg/f:DI 90) [1 node_4->key+0 S4 A64])
        (reg:SI 91)) "test1.c":23 -1
     (nil))

;; node_4->left = 0B;

(insn 22 21 23 (set (reg/f:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":24 -1
     (nil))

(insn 23 22 0 (set (mem/f:DI (plus:DI (reg/f:DI 92)
                (const_int 8 [0x8])) [2 node_4->left+0 S8 A64])
        (const_int 0 [0])) "test1.c":24 -1
     (nil))

;; node_4->right = 0B;

(insn 24 23 25 (set (reg/f:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":25 -1
     (nil))

(insn 25 24 0 (set (mem/f:DI (plus:DI (reg/f:DI 93)
                (const_int 16 [0x10])) [2 node_4->right+0 S8 A64])
        (const_int 0 [0])) "test1.c":25 -1
     (nil))

;; node_4->height = 0;

(insn 26 25 27 (set (reg/f:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":26 -1
     (nil))

(insn 27 26 0 (set (mem:SI (plus:DI (reg/f:DI 94)
                (const_int 24 [0x18])) [1 node_4->height+0 S4 A64])
        (const_int 0 [0])) "test1.c":26 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; 

(code_label 28 27 29 5 (nil) [0 uses])

(note 29 28 0 NOTE_INSN_BASIC_BLOCK)

;; _11 = node_4;

(insn 30 29 0 (set (reg/f:DI 87 [ _11 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":29 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; <L3> [0.00%]:

(code_label 31 30 32 6 (nil) [0 uses])

(note 32 31 0 NOTE_INSN_BASIC_BLOCK)

;; return _11;

(insn 33 32 34 (set (reg/f:DI 88 [ <retval> ])
        (reg/f:DI 87 [ _11 ])) "test1.c":29 -1
     (nil))

(jump_insn 34 33 35 (set (pc)
        (label_ref 0)) "test1.c":29 -1
     (nil))

(barrier 35 34 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 7 into block 6...
Merged blocks 6 and 7.
Merged 6 and 7 without moving.
Removing jump 34.
Merging block 8 into block 6...
Merged blocks 6 and 8.
Merged 6 and 8 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [1 key+0 S4 A32])
        (reg:SI 5 di [ key ])) "test1.c":16 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 5 di)
        (const_int 32 [0x20])) "test1.c":17 -1
     (nil))
(call_insn 7 6 8 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fddd76d1300 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) "test1.c":17 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 8 7 9 2 (set (reg/f:DI 89)
        (reg:DI 0 ax)) "test1.c":17 -1
     (expr_list:REG_NOALIAS (reg/f:DI 89)
        (nil)))
(insn 9 8 10 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])
        (reg/f:DI 89)) "test1.c":17 -1
     (nil))
(insn 10 9 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])
            (const_int 0 [0]))) "test1.c":19 -1
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) "test1.c":19 -1
     (nil)
 -> 17)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 12 11 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fddd7452000 *.LC0>)) "test1.c":20 -1
     (nil))
(call_insn 14 13 15 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":20 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 15 14 16 4 (set (pc)
        (label_ref 28)) -1
     (nil)
 -> 28)
;;  succ:       6

(barrier 16 15 17)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 17 16 18 5 4 (nil) [1 uses])
(note 18 17 19 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 5 (set (reg/f:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":23 -1
     (nil))
(insn 20 19 21 5 (set (reg:SI 91)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [1 key+0 S4 A32])) "test1.c":23 -1
     (nil))
(insn 21 20 22 5 (set (mem:SI (reg/f:DI 90) [1 node_4->key+0 S4 A64])
        (reg:SI 91)) "test1.c":23 -1
     (nil))
(insn 22 21 23 5 (set (reg/f:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":24 -1
     (nil))
(insn 23 22 24 5 (set (mem/f:DI (plus:DI (reg/f:DI 92)
                (const_int 8 [0x8])) [2 node_4->left+0 S8 A64])
        (const_int 0 [0])) "test1.c":24 -1
     (nil))
(insn 24 23 25 5 (set (reg/f:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":25 -1
     (nil))
(insn 25 24 26 5 (set (mem/f:DI (plus:DI (reg/f:DI 93)
                (const_int 16 [0x10])) [2 node_4->right+0 S8 A64])
        (const_int 0 [0])) "test1.c":25 -1
     (nil))
(insn 26 25 27 5 (set (reg/f:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":26 -1
     (nil))
(insn 27 26 28 5 (set (mem:SI (plus:DI (reg/f:DI 94)
                (const_int 24 [0x18])) [1 node_4->height+0 S4 A64])
        (const_int 0 [0])) "test1.c":26 -1
     (nil))
;;  succ:       6 (FALLTHRU)

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
;;              5 (FALLTHRU)
(code_label 28 27 29 6 5 (nil) [1 uses])
(note 29 28 30 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 33 6 (set (reg/f:DI 87 [ _11 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":29 -1
     (nil))
(insn 33 30 37 6 (set (reg/f:DI 88 [ <retval> ])
        (reg/f:DI 87 [ _11 ])) "test1.c":29 -1
     (nil))
(insn 37 33 38 6 (set (reg/i:DI 0 ax)
        (reg/f:DI 88 [ <retval> ])) "test1.c":30 -1
     (nil))
(insn 38 37 0 6 (use (reg/i:DI 0 ax)) "test1.c":30 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function nodeHeight (nodeHeight, funcdef_no=7, decl_uid=2776, cgraph_uid=7, symbol_order=7)

nodeHeight (struct avlNode * node)
{
  int D.2868;
  int _1;
  int _4;
  int _5;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (node_2(D) == 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  _5 = -1;
  goto <bb 5> (<L2>); [0.00%]
;;    succ:       5

;;   basic block 4, loop depth 0
;;    pred:       2
  _4 = node_2(D)->height;
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
  # _1 = PHI <_5(3), _4(4)>
<L2> [0.00%]:
  return _1;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (node_2(D) - 2 )
Partition 4 (_4 - 4 )
Partition 5 (_5 - 5 )
Partition 6 (_6(D) - 6 )


Partition map 

Partition 0 (_1 - 1 )
Partition 1 (node_2(D) - 2 )
Partition 2 (_4 - 4 )
Partition 3 (_5 - 5 )
Partition 4 (_6(D) - 6 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (node_2(D) - 2 )
Partition 2 (_4 - 4 )
Partition 3 (_5 - 5 )
Partition 4 (_6(D) - 6 )

Coalesce list: (1)_1 & (4)_4 [map: 0, 2] : Success -> 0
Coalesce list: (1)_1 & (5)_5 [map: 0, 3] : Success -> 0
After Coalescing:

Partition map 

Partition 0 (_1 - 1 4 5 )
Partition 1 (node_2(D) - 2 )
Partition 2 (_6(D) - 6 )

nodeHeight (struct avlNode * node)
{
  int D.2868;
  int _1;
  int _4;
  int _5;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (node_2(D) == 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  _5 = -1;
  goto <bb 5> (<L2>); [0.00%]
;;    succ:       5

;;   basic block 4, loop depth 0
;;    pred:       2
  _4 = node_2(D)->height;
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
  # _1 = PHI <_5(3), _4(4)>
<L2> [0.00%]:
  return _1;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; if (node_2(D) == 0B)

(insn 6 5 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])
            (const_int 0 [0]))) "test1.c":34 -1
     (nil))

(jump_insn 7 6 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":34 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; _5 = -1;

(insn 9 8 0 (set (reg:SI 87 [ _1 ])
        (const_int -1 [0xffffffffffffffff])) "test1.c":35 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; 

(code_label 12 11 13 8 (nil) [0 uses])

(note 13 12 0 NOTE_INSN_BASIC_BLOCK)

;; _4 = node_2(D)->height;

(insn 14 13 15 (set (reg/f:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":37 -1
     (nil))

(insn 15 14 0 (set (reg:SI 87 [ _1 ])
        (mem:SI (plus:DI (reg/f:DI 89)
                (const_int 24 [0x18])) [1 node_2(D)->height+0 S4 A64])) "test1.c":37 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; <L2> [0.00%]:

(code_label 16 15 17 9 (nil) [0 uses])

(note 17 16 0 NOTE_INSN_BASIC_BLOCK)

;; return _1;

(insn 18 17 19 (set (reg:SI 88 [ <retval> ])
        (reg:SI 87 [ _1 ])) -1
     (nil))

(jump_insn 19 18 20 (set (pc)
        (label_ref 0)) -1
     (nil))

(barrier 20 19 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Removing jump 19.
Merging block 7 into block 6...
Merged blocks 6 and 7.
Merged 6 and 7 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])
        (reg:DI 5 di [ node ])) "test1.c":33 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])
            (const_int 0 [0]))) "test1.c":34 -1
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 12)
            (pc))) "test1.c":34 -1
     (nil)
 -> 12)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 8 7 9 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 4 (set (reg:SI 87 [ _1 ])
        (const_int -1 [0xffffffffffffffff])) "test1.c":35 -1
     (nil))
(jump_insn 10 9 11 4 (set (pc)
        (label_ref 16)) "test1.c":35 -1
     (nil)
 -> 16)
;;  succ:       6

(barrier 11 10 12)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 12 11 13 5 8 (nil) [1 uses])
(note 13 12 14 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 5 (set (reg/f:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":37 -1
     (nil))
(insn 15 14 16 5 (set (reg:SI 87 [ _1 ])
        (mem:SI (plus:DI (reg/f:DI 89)
                (const_int 24 [0x18])) [1 node_2(D)->height+0 S4 A64])) "test1.c":37 -1
     (nil))
;;  succ:       6 (FALLTHRU)

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
;;              5 (FALLTHRU)
(code_label 16 15 17 6 9 (nil) [1 uses])
(note 17 16 18 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 22 6 (set (reg:SI 88 [ <retval> ])
        (reg:SI 87 [ _1 ])) -1
     (nil))
(insn 22 18 23 6 (set (reg/i:SI 0 ax)
        (reg:SI 88 [ <retval> ])) "test1.c":38 -1
     (nil))
(insn 23 22 0 6 (use (reg/i:SI 0 ax)) "test1.c":38 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function heightDiff (heightDiff, funcdef_no=8, decl_uid=2779, cgraph_uid=8, symbol_order=8)

heightDiff (struct avlNode * node)
{
  int D.2872;
  struct AVLnode * _1;
  int _2;
  struct AVLnode * _3;
  int _4;
  int _5;
  int _11;
  int _12;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (node_7(D) == 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  _12 = 0;
  goto <bb 5> (<L2>); [0.00%]
;;    succ:       5

;;   basic block 4, loop depth 0
;;    pred:       2
  _1 = node_7(D)->left;
  _2 = nodeHeight (_1);
  _3 = node_7(D)->right;
  _4 = nodeHeight (_3);
  _11 = _2 - _4;
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
  # _5 = PHI <_12(3), _11(4)>
<L2> [0.00%]:
  return _5;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (_5 - 5 )
Partition 7 (node_7(D) - 7 )
Partition 11 (_11 - 11 )
Partition 12 (_12 - 12 )
Partition 13 (_13(D) - 13 )


Partition map 

Partition 0 (_5 - 5 )
Partition 1 (node_7(D) - 7 )
Partition 2 (_11 - 11 )
Partition 3 (_12 - 12 )
Partition 4 (_13(D) - 13 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (_5 - 5 )
Partition 1 (node_7(D) - 7 )
Partition 2 (_11 - 11 )
Partition 3 (_12 - 12 )
Partition 4 (_13(D) - 13 )

Coalesce list: (5)_5 & (11)_11 [map: 0, 2] : Success -> 0
Coalesce list: (5)_5 & (12)_12 [map: 0, 3] : Success -> 0
After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (_5 - 5 11 12 )
Partition 5 (node_7(D) - 7 )
Partition 6 (_13(D) - 13 )

heightDiff (struct avlNode * node)
{
  int D.2872;
  struct AVLnode * _1;
  int _2;
  struct AVLnode * _3;
  int _4;
  int _5;
  int _11;
  int _12;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (node_7(D) == 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  _12 = 0;
  goto <bb 5> (<L2>); [0.00%]
;;    succ:       5

;;   basic block 4, loop depth 0
;;    pred:       2
  _1 = node_7(D)->left;
  _2 = nodeHeight (_1);
  _3 = node_7(D)->right;
  _4 = nodeHeight (_3);
  _11 = _2 - _4;
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
  # _5 = PHI <_12(3), _11(4)>
<L2> [0.00%]:
  return _5;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; if (node_7(D) == 0B)

(insn 6 5 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])
            (const_int 0 [0]))) "test1.c":42 -1
     (nil))

(jump_insn 7 6 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":42 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; _12 = 0;

(insn 9 8 0 (set (reg:SI 91 [ _5 ])
        (const_int 0 [0])) "test1.c":43 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; 

(code_label 12 11 13 11 (nil) [0 uses])

(note 13 12 0 NOTE_INSN_BASIC_BLOCK)

;; _1 = node_7(D)->left;

(insn 14 13 15 (set (reg/f:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":45 -1
     (nil))

(insn 15 14 0 (set (reg/f:DI 87 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 93)
                (const_int 8 [0x8])) [2 node_7(D)->left+0 S8 A64])) "test1.c":45 -1
     (nil))

;; _2 = nodeHeight (_1);

(insn 16 15 17 (set (reg:DI 5 di)
        (reg/f:DI 87 [ _1 ])) "test1.c":45 -1
     (nil))

(call_insn 17 16 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodeHeight") [flags 0x3]  <function_decl 0x7fddd77eab00 nodeHeight>) [0 nodeHeight S1 A8])
            (const_int 0 [0]))) "test1.c":45 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 18 17 0 (set (reg:SI 88 [ _2 ])
        (reg:SI 0 ax)) "test1.c":45 -1
     (nil))

;; _3 = node_7(D)->right;

(insn 19 18 20 (set (reg/f:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":45 -1
     (nil))

(insn 20 19 0 (set (reg/f:DI 89 [ _3 ])
        (mem/f:DI (plus:DI (reg/f:DI 94)
                (const_int 16 [0x10])) [2 node_7(D)->right+0 S8 A64])) "test1.c":45 -1
     (nil))

;; _4 = nodeHeight (_3);

(insn 21 20 22 (set (reg:DI 5 di)
        (reg/f:DI 89 [ _3 ])) "test1.c":45 -1
     (nil))

(call_insn 22 21 23 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodeHeight") [flags 0x3]  <function_decl 0x7fddd77eab00 nodeHeight>) [0 nodeHeight S1 A8])
            (const_int 0 [0]))) "test1.c":45 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 23 22 0 (set (reg:SI 90 [ _4 ])
        (reg:SI 0 ax)) "test1.c":45 -1
     (nil))

;; _11 = _2 - _4;

(insn 24 23 0 (parallel [
            (set (reg:SI 91 [ _5 ])
                (minus:SI (reg:SI 88 [ _2 ])
                    (reg:SI 90 [ _4 ])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":45 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; <L2> [0.00%]:

(code_label 25 24 26 12 (nil) [0 uses])

(note 26 25 0 NOTE_INSN_BASIC_BLOCK)

;; return _5;

(insn 27 26 28 (set (reg:SI 92 [ <retval> ])
        (reg:SI 91 [ _5 ])) -1
     (nil))

(jump_insn 28 27 29 (set (pc)
        (label_ref 0)) -1
     (nil))

(barrier 29 28 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Removing jump 28.
Merging block 7 into block 6...
Merged blocks 6 and 7.
Merged 6 and 7 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])
        (reg:DI 5 di [ node ])) "test1.c":41 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])
            (const_int 0 [0]))) "test1.c":42 -1
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 12)
            (pc))) "test1.c":42 -1
     (nil)
 -> 12)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 8 7 9 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 4 (set (reg:SI 91 [ _5 ])
        (const_int 0 [0])) "test1.c":43 -1
     (nil))
(jump_insn 10 9 11 4 (set (pc)
        (label_ref 25)) "test1.c":43 -1
     (nil)
 -> 25)
;;  succ:       6

(barrier 11 10 12)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 12 11 13 5 11 (nil) [1 uses])
(note 13 12 14 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 5 (set (reg/f:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":45 -1
     (nil))
(insn 15 14 16 5 (set (reg/f:DI 87 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 93)
                (const_int 8 [0x8])) [2 node_7(D)->left+0 S8 A64])) "test1.c":45 -1
     (nil))
(insn 16 15 17 5 (set (reg:DI 5 di)
        (reg/f:DI 87 [ _1 ])) "test1.c":45 -1
     (nil))
(call_insn 17 16 18 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodeHeight") [flags 0x3]  <function_decl 0x7fddd77eab00 nodeHeight>) [0 nodeHeight S1 A8])
            (const_int 0 [0]))) "test1.c":45 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 18 17 19 5 (set (reg:SI 88 [ _2 ])
        (reg:SI 0 ax)) "test1.c":45 -1
     (nil))
(insn 19 18 20 5 (set (reg/f:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":45 -1
     (nil))
(insn 20 19 21 5 (set (reg/f:DI 89 [ _3 ])
        (mem/f:DI (plus:DI (reg/f:DI 94)
                (const_int 16 [0x10])) [2 node_7(D)->right+0 S8 A64])) "test1.c":45 -1
     (nil))
(insn 21 20 22 5 (set (reg:DI 5 di)
        (reg/f:DI 89 [ _3 ])) "test1.c":45 -1
     (nil))
(call_insn 22 21 23 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodeHeight") [flags 0x3]  <function_decl 0x7fddd77eab00 nodeHeight>) [0 nodeHeight S1 A8])
            (const_int 0 [0]))) "test1.c":45 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 23 22 24 5 (set (reg:SI 90 [ _4 ])
        (reg:SI 0 ax)) "test1.c":45 -1
     (nil))
(insn 24 23 25 5 (parallel [
            (set (reg:SI 91 [ _5 ])
                (minus:SI (reg:SI 88 [ _2 ])
                    (reg:SI 90 [ _4 ])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":45 -1
     (nil))
;;  succ:       6 (FALLTHRU)

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
;;              5 (FALLTHRU)
(code_label 25 24 26 6 12 (nil) [1 uses])
(note 26 25 27 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 31 6 (set (reg:SI 92 [ <retval> ])
        (reg:SI 91 [ _5 ])) -1
     (nil))
(insn 31 27 32 6 (set (reg/i:SI 0 ax)
        (reg:SI 92 [ <retval> ])) "test1.c":46 -1
     (nil))
(insn 32 31 0 6 (use (reg/i:SI 0 ax)) "test1.c":46 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function minNode (minNode, funcdef_no=9, decl_uid=2782, cgraph_uid=9, symbol_order=9)

minNode (struct avlNode * node)
{
  struct avlNode * temp;
  struct avlNode * D.2874;
  struct AVLnode * _1;
  struct avlNode * _6;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  temp_4 = node_3(D);
  goto <bb 4>; [0.00%]
;;    succ:       4

;;   basic block 3, loop depth 1
;;    pred:       4
  temp_7 = temp_2->left;
;;    succ:       4

;;   basic block 4, loop depth 1
;;    pred:       2
;;                3
  # temp_2 = PHI <temp_4(2), temp_7(3)>
  _1 = temp_2->left;
  if (_1 != 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]
;;    succ:       3
;;                5

;;   basic block 5, loop depth 0
;;    pred:       4
  _6 = temp_2;
;;    succ:       6

;;   basic block 6, loop depth 0
;;    pred:       5
<L3> [0.00%]:
  return _6;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (temp_2 - 2 )
Partition 3 (node_3(D) - 3 )
Partition 4 (temp_4 - 4 )
Partition 6 (_6 - 6 )
Partition 7 (temp_7 - 7 )
Partition 8 (_8(D) - 8 )


Partition map 

Partition 0 (temp_2 - 2 )
Partition 1 (node_3(D) - 3 )
Partition 2 (temp_4 - 4 )
Partition 3 (temp_7 - 7 )
Partition 4 (_8(D) - 8 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483646, 0) temp_2 <-> temp_4
(2147483646, 0) temp_2 <-> temp_7

Partition map 

Partition 0 (temp_2 - 2 )
Partition 1 (node_3(D) - 3 )
Partition 2 (temp_4 - 4 )
Partition 3 (temp_7 - 7 )
Partition 4 (_8(D) - 8 )

Coalesce list: (2)temp_2 & (4)temp_4 [map: 0, 2] : Success -> 0
Coalesce list: (2)temp_2 & (7)temp_7 [map: 0, 3] : Success -> 0
Coalesce list: (2)temp_2 & (7)temp_2: Already Coalesced.
Coalesce list: (2)temp_2 & (4)temp_2: Already Coalesced.
After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (temp_2 - 2 4 7 )
Partition 2 (node_3(D) - 3 )
Partition 3 (_6 - 6 )
Partition 4 (_8(D) - 8 )

minNode (struct avlNode * node)
{
  struct avlNode * temp;
  struct avlNode * D.2874;
  struct AVLnode * _1;
  struct avlNode * _6;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  temp_4 = node_3(D);
  goto <bb 4>; [0.00%]
;;    succ:       4

;;   basic block 3, loop depth 1
;;    pred:       4
  temp_7 = temp_2->left;
;;    succ:       4

;;   basic block 4, loop depth 1
;;    pred:       2
;;                3
  # temp_2 = PHI <temp_4(2), temp_7(3)>
  _1 = temp_2->left;
  if (_1 != 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]
;;    succ:       3
;;                5

;;   basic block 5, loop depth 0
;;    pred:       4
  _6 = temp_2;
;;    succ:       6

;;   basic block 6, loop depth 0
;;    pred:       5
<L3> [0.00%]:
  return _6;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; temp_4 = node_3(D);

(insn 6 5 7 (set (reg/f:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":51 -1
     (nil))

(insn 7 6 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 temp+0 S8 A64])
        (reg/f:DI 90)) "test1.c":51 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; temp_7 = temp_2->left;

(insn 11 10 12 (set (reg/f:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 temp+0 S8 A64])) "test1.c":53 -1
     (nil))

(insn 12 11 13 (set (reg/f:DI 92)
        (mem/f:DI (plus:DI (reg/f:DI 91)
                (const_int 8 [0x8])) [2 temp_2->left+0 S8 A64])) "test1.c":53 -1
     (nil))

(insn 13 12 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 temp+0 S8 A64])
        (reg/f:DI 92)) "test1.c":53 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; 

(code_label 14 13 15 14 (nil) [0 uses])

(note 15 14 0 NOTE_INSN_BASIC_BLOCK)

;; _1 = temp_2->left;

(insn 16 15 17 (set (reg/f:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 temp+0 S8 A64])) "test1.c":53 -1
     (nil))

(insn 17 16 0 (set (reg/f:DI 87 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 93)
                (const_int 8 [0x8])) [2 temp_2->left+0 S8 A64])) "test1.c":53 -1
     (nil))

;; if (_1 != 0B)

(insn 19 17 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 87 [ _1 ])
            (const_int 0 [0]))) "test1.c":53 -1
     (nil))

(jump_insn 20 19 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) "test1.c":53 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; _6 = temp_2;

(insn 22 21 0 (set (reg/f:DI 88 [ _6 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 temp+0 S8 A64])) "test1.c":55 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; <L3> [0.00%]:

(code_label 23 22 24 16 (nil) [0 uses])

(note 24 23 0 NOTE_INSN_BASIC_BLOCK)

;; return _6;

(insn 25 24 26 (set (reg/f:DI 89 [ <retval> ])
        (reg/f:DI 88 [ _6 ])) "test1.c":55 -1
     (nil))

(jump_insn 26 25 27 (set (pc)
        (label_ref 0)) "test1.c":55 -1
     (nil))

(barrier 27 26 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 7 into block 6...
Merged blocks 6 and 7.
Merged 6 and 7 without moving.
Removing jump 26.
Merging block 8 into block 6...
Merged blocks 6 and 8.
Merged 6 and 8 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])
        (reg:DI 5 di [ node ])) "test1.c":50 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":51 -1
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 temp+0 S8 A64])
        (reg/f:DI 90)) "test1.c":51 -1
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (label_ref 14)) "test1.c":53 -1
     (nil)
 -> 14)
;;  succ:       5

(barrier 9 8 18)
;; basic block 4, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
(code_label 18 9 10 4 15 (nil) [1 uses])
(note 10 18 11 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 4 (set (reg/f:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 temp+0 S8 A64])) "test1.c":53 -1
     (nil))
(insn 12 11 13 4 (set (reg/f:DI 92)
        (mem/f:DI (plus:DI (reg/f:DI 91)
                (const_int 8 [0x8])) [2 temp_2->left+0 S8 A64])) "test1.c":53 -1
     (nil))
(insn 13 12 14 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 temp+0 S8 A64])
        (reg/f:DI 92)) "test1.c":53 -1
     (nil))
;;  succ:       5 (FALLTHRU,DFS_BACK)

;; basic block 5, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              4 (FALLTHRU,DFS_BACK)
(code_label 14 13 15 5 14 (nil) [1 uses])
(note 15 14 16 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 5 (set (reg/f:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 temp+0 S8 A64])) "test1.c":53 -1
     (nil))
(insn 17 16 19 5 (set (reg/f:DI 87 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 93)
                (const_int 8 [0x8])) [2 temp_2->left+0 S8 A64])) "test1.c":53 -1
     (nil))
(insn 19 17 20 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 87 [ _1 ])
            (const_int 0 [0]))) "test1.c":53 -1
     (nil))
(jump_insn 20 19 21 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) "test1.c":53 -1
     (nil)
 -> 18)
;;  succ:       4
;;              6 (FALLTHRU)

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 21 20 22 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 25 6 (set (reg/f:DI 88 [ _6 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 temp+0 S8 A64])) "test1.c":55 -1
     (nil))
(insn 25 22 29 6 (set (reg/f:DI 89 [ <retval> ])
        (reg/f:DI 88 [ _6 ])) "test1.c":55 -1
     (nil))
(insn 29 25 30 6 (set (reg/i:DI 0 ax)
        (reg/f:DI 89 [ <retval> ])) "test1.c":56 -1
     (nil))
(insn 30 29 0 6 (use (reg/i:DI 0 ax)) "test1.c":56 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function printAVL (printAVL, funcdef_no=10, decl_uid=2790, cgraph_uid=10, symbol_order=10)

printAVL (struct avlNode * node, int level)
{
  int i;
  int _1;
  struct AVLnode * _2;
  int _3;
  int _4;
  struct AVLnode * _5;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (node_9(D) != 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 7>; [0.00%]
;;    succ:       3
;;                7

;;   basic block 3, loop depth 0
;;    pred:       2
  _1 = level_11(D) + 1;
  _2 = node_9(D)->right;
  printAVL (_2, _1);
  __builtin_puts (&"\n"[0]);
  i_14 = 0;
  goto <bb 5>; [0.00%]
;;    succ:       5

;;   basic block 4, loop depth 1
;;    pred:       5
  __builtin_putchar (9);
  i_18 = i_6 + 1;
;;    succ:       5

;;   basic block 5, loop depth 1
;;    pred:       3
;;                4
  # i_6 = PHI <i_14(3), i_18(4)>
  if (i_6 < level_11(D))
    goto <bb 4>; [0.00%]
  else
    goto <bb 6>; [0.00%]
;;    succ:       4
;;                6

;;   basic block 6, loop depth 0
;;    pred:       5
  _3 = node_9(D)->key;
  printf ("%d", _3);
  _4 = level_11(D) + 1;
  _5 = node_9(D)->left;
  printAVL (_5, _4);
;;    succ:       7

;;   basic block 7, loop depth 0
;;    pred:       2
;;                6
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (_5 - 5 )
Partition 6 (i_6 - 6 )
Partition 9 (node_9(D) - 9 )
Partition 11 (level_11(D) - 11 )
Partition 14 (i_14 - 14 )
Partition 18 (i_18 - 18 )


Partition map 

Partition 0 (i_6 - 6 )
Partition 1 (node_9(D) - 9 )
Partition 2 (level_11(D) - 11 )
Partition 3 (i_14 - 14 )
Partition 4 (i_18 - 18 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483646, 0) i_6 <-> i_14
(2147483646, 0) i_6 <-> i_18

Partition map 

Partition 0 (i_6 - 6 )
Partition 1 (node_9(D) - 9 )
Partition 2 (level_11(D) - 11 )
Partition 3 (i_14 - 14 )
Partition 4 (i_18 - 18 )

Coalesce list: (6)i_6 & (14)i_14 [map: 0, 3] : Success -> 0
Coalesce list: (6)i_6 & (18)i_18 [map: 0, 4] : Success -> 0
Coalesce list: (6)i_6 & (18)i_6: Already Coalesced.
Coalesce list: (6)i_6 & (14)i_6: Already Coalesced.
After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (_5 - 5 )
Partition 5 (i_6 - 6 14 18 )
Partition 6 (node_9(D) - 9 )
Partition 7 (level_11(D) - 11 )

printAVL (struct avlNode * node, int level)
{
  int i;
  int _1;
  struct AVLnode * _2;
  int _3;
  int _4;
  struct AVLnode * _5;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (node_9(D) != 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 7>; [0.00%]
;;    succ:       3
;;                7

;;   basic block 3, loop depth 0
;;    pred:       2
  _1 = level_11(D) + 1;
  _2 = node_9(D)->right;
  printAVL (_2, _1);
  __builtin_puts (&"\n"[0]);
  i_14 = 0;
  goto <bb 5>; [0.00%]
;;    succ:       5

;;   basic block 4, loop depth 1
;;    pred:       5
  __builtin_putchar (9);
  i_18 = i_6 + 1;
;;    succ:       5

;;   basic block 5, loop depth 1
;;    pred:       3
;;                4
  # i_6 = PHI <i_14(3), i_18(4)>
  if (i_6 < level_11(D))
    goto <bb 4>; [0.00%]
  else
    goto <bb 6>; [0.00%]
;;    succ:       4
;;                6

;;   basic block 6, loop depth 0
;;    pred:       5
  _3 = node_9(D)->key;
  printf ("%d", _3);
  _4 = level_11(D) + 1;
  _5 = node_9(D)->left;
  printAVL (_5, _4);
;;    succ:       7

;;   basic block 7, loop depth 0
;;    pred:       2
;;                6
  return;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; if (node_9(D) != 0B)

(insn 7 6 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])
            (const_int 0 [0]))) "test1.c":61 -1
     (nil))

(jump_insn 8 7 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":61 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; _1 = level_11(D) + 1;

(insn 10 9 11 (set (reg:SI 92)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [1 level+0 S4 A32])) "test1.c":63 -1
     (nil))

(insn 11 10 0 (parallel [
            (set (reg:SI 87 [ _1 ])
                (plus:SI (reg:SI 92)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":63 -1
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])) [1 level+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))

;; _2 = node_9(D)->right;

(insn 12 11 13 (set (reg/f:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":63 -1
     (nil))

(insn 13 12 0 (set (reg/f:DI 88 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 93)
                (const_int 16 [0x10])) [2 node_9(D)->right+0 S8 A64])) "test1.c":63 -1
     (nil))

;; printAVL (_2, _1);

(insn 14 13 15 (set (reg:SI 4 si)
        (reg:SI 87 [ _1 ])) "test1.c":63 -1
     (nil))

(insn 15 14 16 (set (reg:DI 5 di)
        (reg/f:DI 88 [ _2 ])) "test1.c":63 -1
     (nil))

(call_insn 16 15 0 (call (mem:QI (symbol_ref:DI ("printAVL") [flags 0x3]  <function_decl 0x7fddd77ee100 printAVL>) [0 printAVL S1 A8])
        (const_int 0 [0])) "test1.c":63 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))

;; __builtin_puts (&"\n"[0]);

(insn 17 16 18 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fddd745d510 *.LC1>)) "test1.c":64 -1
     (nil))

(call_insn 18 17 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":64 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; i_14 = 0;

(insn 19 18 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 0 [0])) "test1.c":66 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; __builtin_putchar (9);

(insn 23 22 24 (set (reg:SI 5 di)
        (const_int 9 [0x9])) "test1.c":66 -1
     (nil))

(call_insn 24 23 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7fddd76af200 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) "test1.c":66 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))

;; i_18 = i_6 + 1;

(insn 25 24 0 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":66 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; 

(code_label 26 25 27 19 (nil) [0 uses])

(note 27 26 0 NOTE_INSN_BASIC_BLOCK)

;; if (i_6 < level_11(D))

(insn 29 27 30 (set (reg:SI 94)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "test1.c":66 -1
     (nil))

(insn 30 29 31 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 94)
            (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])) [1 level+0 S4 A32]))) "test1.c":66 -1
     (nil))

(jump_insn 31 30 0 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) "test1.c":66 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; _3 = node_9(D)->key;

(insn 33 32 34 (set (reg/f:DI 95)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":68 -1
     (nil))

(insn 34 33 0 (set (reg:SI 89 [ _3 ])
        (mem:SI (reg/f:DI 95) [1 node_9(D)->key+0 S4 A64])) "test1.c":68 -1
     (nil))

;; printf ("%d", _3);

(insn 35 34 36 (set (reg:SI 4 si)
        (reg:SI 89 [ _3 ])) "test1.c":68 -1
     (nil))

(insn 36 35 37 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fddd745d5a0 *.LC2>)) "test1.c":68 -1
     (nil))

(insn 37 36 38 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":68 -1
     (nil))

(call_insn 38 37 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fddd76aef00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":68 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))

;; _4 = level_11(D) + 1;

(insn 39 38 40 (set (reg:SI 96)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [1 level+0 S4 A32])) "test1.c":70 -1
     (nil))

(insn 40 39 0 (parallel [
            (set (reg:SI 90 [ _4 ])
                (plus:SI (reg:SI 96)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":70 -1
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])) [1 level+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))

;; _5 = node_9(D)->left;

(insn 41 40 42 (set (reg/f:DI 97)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":70 -1
     (nil))

(insn 42 41 0 (set (reg/f:DI 91 [ _5 ])
        (mem/f:DI (plus:DI (reg/f:DI 97)
                (const_int 8 [0x8])) [2 node_9(D)->left+0 S8 A64])) "test1.c":70 -1
     (nil))

;; printAVL (_5, _4);

(insn 43 42 44 (set (reg:SI 4 si)
        (reg:SI 90 [ _4 ])) "test1.c":70 -1
     (nil))

(insn 44 43 45 (set (reg:DI 5 di)
        (reg/f:DI 91 [ _5 ])) "test1.c":70 -1
     (nil))

(call_insn 45 44 0 (call (mem:QI (symbol_ref:DI ("printAVL") [flags 0x3]  <function_decl 0x7fddd77ee100 printAVL>) [0 printAVL S1 A8])
        (const_int 0 [0])) "test1.c":70 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))

;; Generating RTL for gimple basic block 7

;; 

(code_label 46 45 47 18 (nil) [0 uses])

(note 47 46 0 NOTE_INSN_BASIC_BLOCK)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Edge 2->8 redirected to 9
Merging block 8 into block 7...
Merged blocks 7 and 8.
Merged 7 and 8 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])
        (reg:DI 5 di [ node ])) "test1.c":59 -1
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [1 level+0 S4 A32])
        (reg:SI 4 si [ level ])) "test1.c":59 -1
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])
            (const_int 0 [0]))) "test1.c":61 -1
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 48)
            (pc))) "test1.c":61 627 {*jcc_1}
     (nil)
 -> 48)
;;  succ:       4 (FALLTHRU)
;;              9

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 9 8 10 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 4 (set (reg:SI 92)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [1 level+0 S4 A32])) "test1.c":63 -1
     (nil))
(insn 11 10 12 4 (parallel [
            (set (reg:SI 87 [ _1 ])
                (plus:SI (reg:SI 92)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":63 -1
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])) [1 level+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 12 11 13 4 (set (reg/f:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":63 -1
     (nil))
(insn 13 12 14 4 (set (reg/f:DI 88 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 93)
                (const_int 16 [0x10])) [2 node_9(D)->right+0 S8 A64])) "test1.c":63 -1
     (nil))
(insn 14 13 15 4 (set (reg:SI 4 si)
        (reg:SI 87 [ _1 ])) "test1.c":63 -1
     (nil))
(insn 15 14 16 4 (set (reg:DI 5 di)
        (reg/f:DI 88 [ _2 ])) "test1.c":63 -1
     (nil))
(call_insn 16 15 17 4 (call (mem:QI (symbol_ref:DI ("printAVL") [flags 0x3]  <function_decl 0x7fddd77ee100 printAVL>) [0 printAVL S1 A8])
        (const_int 0 [0])) "test1.c":63 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 17 16 18 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fddd745d510 *.LC1>)) "test1.c":64 -1
     (nil))
(call_insn 18 17 19 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":64 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 19 18 20 4 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 0 [0])) "test1.c":66 -1
     (nil))
(jump_insn 20 19 21 4 (set (pc)
        (label_ref 26)) "test1.c":66 -1
     (nil)
 -> 26)
;;  succ:       6

(barrier 21 20 28)
;; basic block 5, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       6
(code_label 28 21 22 5 20 (nil) [1 uses])
(note 22 28 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 5 (set (reg:SI 5 di)
        (const_int 9 [0x9])) "test1.c":66 -1
     (nil))
(call_insn 24 23 25 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7fddd76af200 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) "test1.c":66 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 25 24 26 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":66 -1
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)

;; basic block 6, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
;;              5 (FALLTHRU,DFS_BACK)
(code_label 26 25 27 6 19 (nil) [1 uses])
(note 27 26 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 29 27 30 6 (set (reg:SI 94)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "test1.c":66 -1
     (nil))
(insn 30 29 31 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 94)
            (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])) [1 level+0 S4 A32]))) "test1.c":66 -1
     (nil))
(jump_insn 31 30 32 6 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) "test1.c":66 -1
     (nil)
 -> 28)
;;  succ:       5
;;              7 (FALLTHRU)

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       6 (FALLTHRU)
(note 32 31 33 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 7 (set (reg/f:DI 95)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":68 -1
     (nil))
(insn 34 33 35 7 (set (reg:SI 89 [ _3 ])
        (mem:SI (reg/f:DI 95) [1 node_9(D)->key+0 S4 A64])) "test1.c":68 -1
     (nil))
(insn 35 34 36 7 (set (reg:SI 4 si)
        (reg:SI 89 [ _3 ])) "test1.c":68 -1
     (nil))
(insn 36 35 37 7 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fddd745d5a0 *.LC2>)) "test1.c":68 -1
     (nil))
(insn 37 36 38 7 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":68 -1
     (nil))
(call_insn 38 37 39 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fddd76aef00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":68 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 39 38 40 7 (set (reg:SI 96)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [1 level+0 S4 A32])) "test1.c":70 -1
     (nil))
(insn 40 39 41 7 (parallel [
            (set (reg:SI 90 [ _4 ])
                (plus:SI (reg:SI 96)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":70 -1
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])) [1 level+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 41 40 42 7 (set (reg/f:DI 97)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":70 -1
     (nil))
(insn 42 41 43 7 (set (reg/f:DI 91 [ _5 ])
        (mem/f:DI (plus:DI (reg/f:DI 97)
                (const_int 8 [0x8])) [2 node_9(D)->left+0 S8 A64])) "test1.c":70 -1
     (nil))
(insn 43 42 44 7 (set (reg:SI 4 si)
        (reg:SI 90 [ _4 ])) "test1.c":70 -1
     (nil))
(insn 44 43 45 7 (set (reg:DI 5 di)
        (reg/f:DI 91 [ _5 ])) "test1.c":70 -1
     (nil))
(call_insn 45 44 48 7 (call (mem:QI (symbol_ref:DI ("printAVL") [flags 0x3]  <function_decl 0x7fddd77ee100 printAVL>) [0 printAVL S1 A8])
        (const_int 0 [0])) "test1.c":70 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       9 (FALLTHRU)

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 (FALLTHRU)
;;              2
(code_label 48 45 49 9 17 (nil) [1 uses])
(note 49 48 0 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function rightRotate (rightRotate, funcdef_no=11, decl_uid=2797, cgraph_uid=11, symbol_order=11)

rightRotate (struct avlNode * z)
{
  struct avlNode * T3;
  struct avlNode * y;
  struct avlNode * D.2878;
  struct AVLnode * _1;
  int _2;
  struct AVLnode * _3;
  int _4;
  int _5;
  int _6;
  struct AVLnode * _7;
  int _8;
  struct AVLnode * _9;
  int _10;
  int _11;
  int _12;
  struct avlNode * _27;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  y_15 = z_14(D)->left;
  T3_16 = y_15->right;
  y_15->right = z_14(D);
  z_14(D)->left = T3_16;
  _1 = z_14(D)->right;
  _2 = nodeHeight (_1);
  _3 = z_14(D)->left;
  _4 = nodeHeight (_3);
  _5 = max (_4, _2);
  _6 = _5 + 1;
  z_14(D)->height = _6;
  _7 = y_15->right;
  _8 = nodeHeight (_7);
  _9 = y_15->left;
  _10 = nodeHeight (_9);
  _11 = max (_10, _8);
  _12 = _11 + 1;
  y_15->height = _12;
  _27 = y_15;
;;    succ:       3

;;   basic block 3, loop depth 0
;;    pred:       2
<L0> [0.00%]:
  return _27;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (_5 - 5 )
Partition 6 (_6 - 6 )
Partition 7 (_7 - 7 )
Partition 8 (_8 - 8 )
Partition 9 (_9 - 9 )
Partition 10 (_10 - 10 )
Partition 11 (_11 - 11 )
Partition 12 (_12 - 12 )
Partition 14 (z_14(D) - 14 )
Partition 15 (y_15 - 15 )
Partition 16 (T3_16 - 16 )
Partition 27 (_27 - 27 )
Partition 28 (_28(D) - 28 )


Partition map 

Partition 0 (z_14(D) - 14 )
Partition 1 (_28(D) - 28 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (z_14(D) - 14 )
Partition 1 (_28(D) - 28 )

After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (_5 - 5 )
Partition 5 (_6 - 6 )
Partition 6 (_7 - 7 )
Partition 7 (_8 - 8 )
Partition 8 (_9 - 9 )
Partition 9 (_10 - 10 )
Partition 10 (_11 - 11 )
Partition 11 (_12 - 12 )
Partition 12 (z_14(D) - 14 )
Partition 13 (y_15 - 15 )
Partition 14 (T3_16 - 16 )
Partition 15 (_27 - 27 )
Partition 16 (_28(D) - 28 )

rightRotate (struct avlNode * z)
{
  struct avlNode * T3;
  struct avlNode * y;
  struct avlNode * D.2878;
  struct AVLnode * _1;
  int _2;
  struct AVLnode * _3;
  int _4;
  int _5;
  int _6;
  struct AVLnode * _7;
  int _8;
  struct AVLnode * _9;
  int _10;
  int _11;
  int _12;
  struct avlNode * _27;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  y_15 = z_14(D)->left;
  T3_16 = y_15->right;
  y_15->right = z_14(D);
  z_14(D)->left = T3_16;
  _1 = z_14(D)->right;
  _2 = nodeHeight (_1);
  _3 = z_14(D)->left;
  _4 = nodeHeight (_3);
  _5 = max (_4, _2);
  _6 = _5 + 1;
  z_14(D)->height = _6;
  _7 = y_15->right;
  _8 = nodeHeight (_7);
  _9 = y_15->left;
  _10 = nodeHeight (_9);
  _11 = max (_10, _8);
  _12 = _11 + 1;
  y_15->height = _12;
  _27 = y_15;
;;    succ:       3

;;   basic block 3, loop depth 0
;;    pred:       2
<L0> [0.00%]:
  return _27;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; y_15 = z_14(D)->left;

(insn 6 5 7 (set (reg/f:DI 101)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 z+0 S8 A64])) "test1.c":76 -1
     (nil))

(insn 7 6 8 (set (reg/f:DI 102)
        (mem/f:DI (plus:DI (reg/f:DI 101)
                (const_int 8 [0x8])) [2 z_14(D)->left+0 S8 A64])) "test1.c":76 -1
     (nil))

(insn 8 7 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 y+0 S8 A64])
        (reg/f:DI 102)) "test1.c":76 -1
     (nil))

;; T3_16 = y_15->right;

(insn 9 8 10 (set (reg/f:DI 103)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 y+0 S8 A64])) "test1.c":77 -1
     (nil))

(insn 10 9 11 (set (reg/f:DI 104)
        (mem/f:DI (plus:DI (reg/f:DI 103)
                (const_int 16 [0x10])) [2 y_15->right+0 S8 A64])) "test1.c":77 -1
     (nil))

(insn 11 10 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 T3+0 S8 A64])
        (reg/f:DI 104)) "test1.c":77 -1
     (nil))

;; y_15->right = z_14(D);

(insn 12 11 13 (set (reg/f:DI 105)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 y+0 S8 A64])) "test1.c":79 -1
     (nil))

(insn 13 12 14 (set (reg/f:DI 106)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 z+0 S8 A64])) "test1.c":79 -1
     (nil))

(insn 14 13 0 (set (mem/f:DI (plus:DI (reg/f:DI 105)
                (const_int 16 [0x10])) [2 y_15->right+0 S8 A64])
        (reg/f:DI 106)) "test1.c":79 -1
     (nil))

;; z_14(D)->left = T3_16;

(insn 15 14 16 (set (reg/f:DI 107)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 z+0 S8 A64])) "test1.c":80 -1
     (nil))

(insn 16 15 17 (set (reg/f:DI 108)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 T3+0 S8 A64])) "test1.c":80 -1
     (nil))

(insn 17 16 0 (set (mem/f:DI (plus:DI (reg/f:DI 107)
                (const_int 8 [0x8])) [2 z_14(D)->left+0 S8 A64])
        (reg/f:DI 108)) "test1.c":80 -1
     (nil))

;; _1 = z_14(D)->right;

(insn 18 17 19 (set (reg/f:DI 109)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 z+0 S8 A64])) "test1.c":82 -1
     (nil))

(insn 19 18 0 (set (reg/f:DI 87 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 109)
                (const_int 16 [0x10])) [2 z_14(D)->right+0 S8 A64])) "test1.c":82 -1
     (nil))

;; _2 = nodeHeight (_1);

(insn 20 19 21 (set (reg:DI 5 di)
        (reg/f:DI 87 [ _1 ])) "test1.c":82 -1
     (nil))

(call_insn 21 20 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodeHeight") [flags 0x3]  <function_decl 0x7fddd77eab00 nodeHeight>) [0 nodeHeight S1 A8])
            (const_int 0 [0]))) "test1.c":82 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 22 21 0 (set (reg:SI 88 [ _2 ])
        (reg:SI 0 ax)) "test1.c":82 -1
     (nil))

;; _3 = z_14(D)->left;

(insn 23 22 24 (set (reg/f:DI 110)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 z+0 S8 A64])) "test1.c":82 -1
     (nil))

(insn 24 23 0 (set (reg/f:DI 89 [ _3 ])
        (mem/f:DI (plus:DI (reg/f:DI 110)
                (const_int 8 [0x8])) [2 z_14(D)->left+0 S8 A64])) "test1.c":82 -1
     (nil))

;; _4 = nodeHeight (_3);

(insn 25 24 26 (set (reg:DI 5 di)
        (reg/f:DI 89 [ _3 ])) "test1.c":82 -1
     (nil))

(call_insn 26 25 27 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodeHeight") [flags 0x3]  <function_decl 0x7fddd77eab00 nodeHeight>) [0 nodeHeight S1 A8])
            (const_int 0 [0]))) "test1.c":82 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 27 26 0 (set (reg:SI 90 [ _4 ])
        (reg:SI 0 ax)) "test1.c":82 -1
     (nil))

;; _5 = max (_4, _2);

(insn 28 27 29 (set (reg:SI 4 si)
        (reg:SI 88 [ _2 ])) "test1.c":82 -1
     (nil))

(insn 29 28 30 (set (reg:SI 5 di)
        (reg:SI 90 [ _4 ])) "test1.c":82 -1
     (nil))

(call_insn 30 29 31 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("max") [flags 0x3]  <function_decl 0x7fddd77ea700 max>) [0 max S1 A8])
            (const_int 0 [0]))) "test1.c":82 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))

(insn 31 30 0 (set (reg:SI 91 [ _5 ])
        (reg:SI 0 ax)) "test1.c":82 -1
     (nil))

;; _6 = _5 + 1;

(insn 32 31 0 (parallel [
            (set (reg:SI 92 [ _6 ])
                (plus:SI (reg:SI 91 [ _5 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":82 -1
     (nil))

;; z_14(D)->height = _6;

(insn 33 32 34 (set (reg/f:DI 111)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 z+0 S8 A64])) "test1.c":82 -1
     (nil))

(insn 34 33 0 (set (mem:SI (plus:DI (reg/f:DI 111)
                (const_int 24 [0x18])) [1 z_14(D)->height+0 S4 A64])
        (reg:SI 92 [ _6 ])) "test1.c":82 -1
     (nil))

;; _7 = y_15->right;

(insn 35 34 36 (set (reg/f:DI 112)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 y+0 S8 A64])) "test1.c":83 -1
     (nil))

(insn 36 35 0 (set (reg/f:DI 93 [ _7 ])
        (mem/f:DI (plus:DI (reg/f:DI 112)
                (const_int 16 [0x10])) [2 y_15->right+0 S8 A64])) "test1.c":83 -1
     (nil))

;; _8 = nodeHeight (_7);

(insn 37 36 38 (set (reg:DI 5 di)
        (reg/f:DI 93 [ _7 ])) "test1.c":83 -1
     (nil))

(call_insn 38 37 39 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodeHeight") [flags 0x3]  <function_decl 0x7fddd77eab00 nodeHeight>) [0 nodeHeight S1 A8])
            (const_int 0 [0]))) "test1.c":83 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 39 38 0 (set (reg:SI 94 [ _8 ])
        (reg:SI 0 ax)) "test1.c":83 -1
     (nil))

;; _9 = y_15->left;

(insn 40 39 41 (set (reg/f:DI 113)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 y+0 S8 A64])) "test1.c":83 -1
     (nil))

(insn 41 40 0 (set (reg/f:DI 95 [ _9 ])
        (mem/f:DI (plus:DI (reg/f:DI 113)
                (const_int 8 [0x8])) [2 y_15->left+0 S8 A64])) "test1.c":83 -1
     (nil))

;; _10 = nodeHeight (_9);

(insn 42 41 43 (set (reg:DI 5 di)
        (reg/f:DI 95 [ _9 ])) "test1.c":83 -1
     (nil))

(call_insn 43 42 44 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodeHeight") [flags 0x3]  <function_decl 0x7fddd77eab00 nodeHeight>) [0 nodeHeight S1 A8])
            (const_int 0 [0]))) "test1.c":83 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 44 43 0 (set (reg:SI 96 [ _10 ])
        (reg:SI 0 ax)) "test1.c":83 -1
     (nil))

;; _11 = max (_10, _8);

(insn 45 44 46 (set (reg:SI 4 si)
        (reg:SI 94 [ _8 ])) "test1.c":83 -1
     (nil))

(insn 46 45 47 (set (reg:SI 5 di)
        (reg:SI 96 [ _10 ])) "test1.c":83 -1
     (nil))

(call_insn 47 46 48 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("max") [flags 0x3]  <function_decl 0x7fddd77ea700 max>) [0 max S1 A8])
            (const_int 0 [0]))) "test1.c":83 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))

(insn 48 47 0 (set (reg:SI 97 [ _11 ])
        (reg:SI 0 ax)) "test1.c":83 -1
     (nil))

;; _12 = _11 + 1;

(insn 49 48 0 (parallel [
            (set (reg:SI 98 [ _12 ])
                (plus:SI (reg:SI 97 [ _11 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":83 -1
     (nil))

;; y_15->height = _12;

(insn 50 49 51 (set (reg/f:DI 114)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 y+0 S8 A64])) "test1.c":83 -1
     (nil))

(insn 51 50 0 (set (mem:SI (plus:DI (reg/f:DI 114)
                (const_int 24 [0x18])) [1 y_15->height+0 S4 A64])
        (reg:SI 98 [ _12 ])) "test1.c":83 -1
     (nil))

;; _27 = y_15;

(insn 52 51 0 (set (reg/f:DI 99 [ _27 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 y+0 S8 A64])) "test1.c":85 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; <L0> [0.00%]:

(code_label 53 52 54 23 (nil) [0 uses])

(note 54 53 0 NOTE_INSN_BASIC_BLOCK)

;; return _27;

(insn 55 54 56 (set (reg/f:DI 100 [ <retval> ])
        (reg/f:DI 99 [ _27 ])) "test1.c":85 -1
     (nil))

(jump_insn 56 55 57 (set (pc)
        (label_ref 0)) "test1.c":85 -1
     (nil))

(barrier 57 56 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 4 into block 2...
Merged blocks 2 and 4.
Merged 2 and 4 without moving.
Removing jump 56.
Merging block 5 into block 2...
Merged blocks 2 and 5.
Merged 2 and 5 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 z+0 S8 A64])
        (reg:DI 5 di [ z ])) "test1.c":75 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 101)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 z+0 S8 A64])) "test1.c":76 -1
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 102)
        (mem/f:DI (plus:DI (reg/f:DI 101)
                (const_int 8 [0x8])) [2 z_14(D)->left+0 S8 A64])) "test1.c":76 -1
     (nil))
(insn 8 7 9 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 y+0 S8 A64])
        (reg/f:DI 102)) "test1.c":76 -1
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 103)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 y+0 S8 A64])) "test1.c":77 -1
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 104)
        (mem/f:DI (plus:DI (reg/f:DI 103)
                (const_int 16 [0x10])) [2 y_15->right+0 S8 A64])) "test1.c":77 -1
     (nil))
(insn 11 10 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 T3+0 S8 A64])
        (reg/f:DI 104)) "test1.c":77 -1
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 105)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 y+0 S8 A64])) "test1.c":79 -1
     (nil))
(insn 13 12 14 2 (set (reg/f:DI 106)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 z+0 S8 A64])) "test1.c":79 -1
     (nil))
(insn 14 13 15 2 (set (mem/f:DI (plus:DI (reg/f:DI 105)
                (const_int 16 [0x10])) [2 y_15->right+0 S8 A64])
        (reg/f:DI 106)) "test1.c":79 -1
     (nil))
(insn 15 14 16 2 (set (reg/f:DI 107)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 z+0 S8 A64])) "test1.c":80 -1
     (nil))
(insn 16 15 17 2 (set (reg/f:DI 108)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 T3+0 S8 A64])) "test1.c":80 -1
     (nil))
(insn 17 16 18 2 (set (mem/f:DI (plus:DI (reg/f:DI 107)
                (const_int 8 [0x8])) [2 z_14(D)->left+0 S8 A64])
        (reg/f:DI 108)) "test1.c":80 -1
     (nil))
(insn 18 17 19 2 (set (reg/f:DI 109)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 z+0 S8 A64])) "test1.c":82 -1
     (nil))
(insn 19 18 20 2 (set (reg/f:DI 87 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 109)
                (const_int 16 [0x10])) [2 z_14(D)->right+0 S8 A64])) "test1.c":82 -1
     (nil))
(insn 20 19 21 2 (set (reg:DI 5 di)
        (reg/f:DI 87 [ _1 ])) "test1.c":82 -1
     (nil))
(call_insn 21 20 22 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodeHeight") [flags 0x3]  <function_decl 0x7fddd77eab00 nodeHeight>) [0 nodeHeight S1 A8])
            (const_int 0 [0]))) "test1.c":82 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 22 21 23 2 (set (reg:SI 88 [ _2 ])
        (reg:SI 0 ax)) "test1.c":82 -1
     (nil))
(insn 23 22 24 2 (set (reg/f:DI 110)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 z+0 S8 A64])) "test1.c":82 -1
     (nil))
(insn 24 23 25 2 (set (reg/f:DI 89 [ _3 ])
        (mem/f:DI (plus:DI (reg/f:DI 110)
                (const_int 8 [0x8])) [2 z_14(D)->left+0 S8 A64])) "test1.c":82 -1
     (nil))
(insn 25 24 26 2 (set (reg:DI 5 di)
        (reg/f:DI 89 [ _3 ])) "test1.c":82 -1
     (nil))
(call_insn 26 25 27 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodeHeight") [flags 0x3]  <function_decl 0x7fddd77eab00 nodeHeight>) [0 nodeHeight S1 A8])
            (const_int 0 [0]))) "test1.c":82 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 27 26 28 2 (set (reg:SI 90 [ _4 ])
        (reg:SI 0 ax)) "test1.c":82 -1
     (nil))
(insn 28 27 29 2 (set (reg:SI 4 si)
        (reg:SI 88 [ _2 ])) "test1.c":82 -1
     (nil))
(insn 29 28 30 2 (set (reg:SI 5 di)
        (reg:SI 90 [ _4 ])) "test1.c":82 -1
     (nil))
(call_insn 30 29 31 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("max") [flags 0x3]  <function_decl 0x7fddd77ea700 max>) [0 max S1 A8])
            (const_int 0 [0]))) "test1.c":82 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 31 30 32 2 (set (reg:SI 91 [ _5 ])
        (reg:SI 0 ax)) "test1.c":82 -1
     (nil))
(insn 32 31 33 2 (parallel [
            (set (reg:SI 92 [ _6 ])
                (plus:SI (reg:SI 91 [ _5 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":82 -1
     (nil))
(insn 33 32 34 2 (set (reg/f:DI 111)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 z+0 S8 A64])) "test1.c":82 -1
     (nil))
(insn 34 33 35 2 (set (mem:SI (plus:DI (reg/f:DI 111)
                (const_int 24 [0x18])) [1 z_14(D)->height+0 S4 A64])
        (reg:SI 92 [ _6 ])) "test1.c":82 -1
     (nil))
(insn 35 34 36 2 (set (reg/f:DI 112)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 y+0 S8 A64])) "test1.c":83 -1
     (nil))
(insn 36 35 37 2 (set (reg/f:DI 93 [ _7 ])
        (mem/f:DI (plus:DI (reg/f:DI 112)
                (const_int 16 [0x10])) [2 y_15->right+0 S8 A64])) "test1.c":83 -1
     (nil))
(insn 37 36 38 2 (set (reg:DI 5 di)
        (reg/f:DI 93 [ _7 ])) "test1.c":83 -1
     (nil))
(call_insn 38 37 39 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodeHeight") [flags 0x3]  <function_decl 0x7fddd77eab00 nodeHeight>) [0 nodeHeight S1 A8])
            (const_int 0 [0]))) "test1.c":83 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 39 38 40 2 (set (reg:SI 94 [ _8 ])
        (reg:SI 0 ax)) "test1.c":83 -1
     (nil))
(insn 40 39 41 2 (set (reg/f:DI 113)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 y+0 S8 A64])) "test1.c":83 -1
     (nil))
(insn 41 40 42 2 (set (reg/f:DI 95 [ _9 ])
        (mem/f:DI (plus:DI (reg/f:DI 113)
                (const_int 8 [0x8])) [2 y_15->left+0 S8 A64])) "test1.c":83 -1
     (nil))
(insn 42 41 43 2 (set (reg:DI 5 di)
        (reg/f:DI 95 [ _9 ])) "test1.c":83 -1
     (nil))
(call_insn 43 42 44 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodeHeight") [flags 0x3]  <function_decl 0x7fddd77eab00 nodeHeight>) [0 nodeHeight S1 A8])
            (const_int 0 [0]))) "test1.c":83 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 44 43 45 2 (set (reg:SI 96 [ _10 ])
        (reg:SI 0 ax)) "test1.c":83 -1
     (nil))
(insn 45 44 46 2 (set (reg:SI 4 si)
        (reg:SI 94 [ _8 ])) "test1.c":83 -1
     (nil))
(insn 46 45 47 2 (set (reg:SI 5 di)
        (reg:SI 96 [ _10 ])) "test1.c":83 -1
     (nil))
(call_insn 47 46 48 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("max") [flags 0x3]  <function_decl 0x7fddd77ea700 max>) [0 max S1 A8])
            (const_int 0 [0]))) "test1.c":83 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 48 47 49 2 (set (reg:SI 97 [ _11 ])
        (reg:SI 0 ax)) "test1.c":83 -1
     (nil))
(insn 49 48 50 2 (parallel [
            (set (reg:SI 98 [ _12 ])
                (plus:SI (reg:SI 97 [ _11 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":83 -1
     (nil))
(insn 50 49 51 2 (set (reg/f:DI 114)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 y+0 S8 A64])) "test1.c":83 -1
     (nil))
(insn 51 50 52 2 (set (mem:SI (plus:DI (reg/f:DI 114)
                (const_int 24 [0x18])) [1 y_15->height+0 S4 A64])
        (reg:SI 98 [ _12 ])) "test1.c":83 -1
     (nil))
(insn 52 51 55 2 (set (reg/f:DI 99 [ _27 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 y+0 S8 A64])) "test1.c":85 -1
     (nil))
(insn 55 52 59 2 (set (reg/f:DI 100 [ <retval> ])
        (reg/f:DI 99 [ _27 ])) "test1.c":85 -1
     (nil))
(insn 59 55 60 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 100 [ <retval> ])) "test1.c":86 -1
     (nil))
(insn 60 59 0 2 (use (reg/i:DI 0 ax)) "test1.c":86 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function leftRotate (leftRotate, funcdef_no=12, decl_uid=2802, cgraph_uid=12, symbol_order=12)

leftRotate (struct avlNode * z)
{
  struct avlNode * T3;
  struct avlNode * y;
  struct avlNode * D.2880;
  struct AVLnode * _1;
  int _2;
  struct AVLnode * _3;
  int _4;
  int _5;
  int _6;
  struct AVLnode * _7;
  int _8;
  struct AVLnode * _9;
  int _10;
  int _11;
  int _12;
  struct avlNode * _27;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  y_15 = z_14(D)->right;
  T3_16 = y_15->left;
  y_15->left = z_14(D);
  z_14(D)->right = T3_16;
  _1 = z_14(D)->right;
  _2 = nodeHeight (_1);
  _3 = z_14(D)->left;
  _4 = nodeHeight (_3);
  _5 = max (_4, _2);
  _6 = _5 + 1;
  z_14(D)->height = _6;
  _7 = y_15->right;
  _8 = nodeHeight (_7);
  _9 = y_15->left;
  _10 = nodeHeight (_9);
  _11 = max (_10, _8);
  _12 = _11 + 1;
  y_15->height = _12;
  _27 = y_15;
;;    succ:       3

;;   basic block 3, loop depth 0
;;    pred:       2
<L0> [0.00%]:
  return _27;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (_5 - 5 )
Partition 6 (_6 - 6 )
Partition 7 (_7 - 7 )
Partition 8 (_8 - 8 )
Partition 9 (_9 - 9 )
Partition 10 (_10 - 10 )
Partition 11 (_11 - 11 )
Partition 12 (_12 - 12 )
Partition 14 (z_14(D) - 14 )
Partition 15 (y_15 - 15 )
Partition 16 (T3_16 - 16 )
Partition 27 (_27 - 27 )
Partition 28 (_28(D) - 28 )


Partition map 

Partition 0 (z_14(D) - 14 )
Partition 1 (_28(D) - 28 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (z_14(D) - 14 )
Partition 1 (_28(D) - 28 )

After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (_5 - 5 )
Partition 5 (_6 - 6 )
Partition 6 (_7 - 7 )
Partition 7 (_8 - 8 )
Partition 8 (_9 - 9 )
Partition 9 (_10 - 10 )
Partition 10 (_11 - 11 )
Partition 11 (_12 - 12 )
Partition 12 (z_14(D) - 14 )
Partition 13 (y_15 - 15 )
Partition 14 (T3_16 - 16 )
Partition 15 (_27 - 27 )
Partition 16 (_28(D) - 28 )

leftRotate (struct avlNode * z)
{
  struct avlNode * T3;
  struct avlNode * y;
  struct avlNode * D.2880;
  struct AVLnode * _1;
  int _2;
  struct AVLnode * _3;
  int _4;
  int _5;
  int _6;
  struct AVLnode * _7;
  int _8;
  struct AVLnode * _9;
  int _10;
  int _11;
  int _12;
  struct avlNode * _27;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  y_15 = z_14(D)->right;
  T3_16 = y_15->left;
  y_15->left = z_14(D);
  z_14(D)->right = T3_16;
  _1 = z_14(D)->right;
  _2 = nodeHeight (_1);
  _3 = z_14(D)->left;
  _4 = nodeHeight (_3);
  _5 = max (_4, _2);
  _6 = _5 + 1;
  z_14(D)->height = _6;
  _7 = y_15->right;
  _8 = nodeHeight (_7);
  _9 = y_15->left;
  _10 = nodeHeight (_9);
  _11 = max (_10, _8);
  _12 = _11 + 1;
  y_15->height = _12;
  _27 = y_15;
;;    succ:       3

;;   basic block 3, loop depth 0
;;    pred:       2
<L0> [0.00%]:
  return _27;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; y_15 = z_14(D)->right;

(insn 6 5 7 (set (reg/f:DI 101)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 z+0 S8 A64])) "test1.c":90 -1
     (nil))

(insn 7 6 8 (set (reg/f:DI 102)
        (mem/f:DI (plus:DI (reg/f:DI 101)
                (const_int 16 [0x10])) [2 z_14(D)->right+0 S8 A64])) "test1.c":90 -1
     (nil))

(insn 8 7 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 y+0 S8 A64])
        (reg/f:DI 102)) "test1.c":90 -1
     (nil))

;; T3_16 = y_15->left;

(insn 9 8 10 (set (reg/f:DI 103)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 y+0 S8 A64])) "test1.c":91 -1
     (nil))

(insn 10 9 11 (set (reg/f:DI 104)
        (mem/f:DI (plus:DI (reg/f:DI 103)
                (const_int 8 [0x8])) [2 y_15->left+0 S8 A64])) "test1.c":91 -1
     (nil))

(insn 11 10 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 T3+0 S8 A64])
        (reg/f:DI 104)) "test1.c":91 -1
     (nil))

;; y_15->left = z_14(D);

(insn 12 11 13 (set (reg/f:DI 105)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 y+0 S8 A64])) "test1.c":93 -1
     (nil))

(insn 13 12 14 (set (reg/f:DI 106)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 z+0 S8 A64])) "test1.c":93 -1
     (nil))

(insn 14 13 0 (set (mem/f:DI (plus:DI (reg/f:DI 105)
                (const_int 8 [0x8])) [2 y_15->left+0 S8 A64])
        (reg/f:DI 106)) "test1.c":93 -1
     (nil))

;; z_14(D)->right = T3_16;

(insn 15 14 16 (set (reg/f:DI 107)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 z+0 S8 A64])) "test1.c":94 -1
     (nil))

(insn 16 15 17 (set (reg/f:DI 108)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 T3+0 S8 A64])) "test1.c":94 -1
     (nil))

(insn 17 16 0 (set (mem/f:DI (plus:DI (reg/f:DI 107)
                (const_int 16 [0x10])) [2 z_14(D)->right+0 S8 A64])
        (reg/f:DI 108)) "test1.c":94 -1
     (nil))

;; _1 = z_14(D)->right;

(insn 18 17 19 (set (reg/f:DI 109)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 z+0 S8 A64])) "test1.c":96 -1
     (nil))

(insn 19 18 0 (set (reg/f:DI 87 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 109)
                (const_int 16 [0x10])) [2 z_14(D)->right+0 S8 A64])) "test1.c":96 -1
     (nil))

;; _2 = nodeHeight (_1);

(insn 20 19 21 (set (reg:DI 5 di)
        (reg/f:DI 87 [ _1 ])) "test1.c":96 -1
     (nil))

(call_insn 21 20 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodeHeight") [flags 0x3]  <function_decl 0x7fddd77eab00 nodeHeight>) [0 nodeHeight S1 A8])
            (const_int 0 [0]))) "test1.c":96 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 22 21 0 (set (reg:SI 88 [ _2 ])
        (reg:SI 0 ax)) "test1.c":96 -1
     (nil))

;; _3 = z_14(D)->left;

(insn 23 22 24 (set (reg/f:DI 110)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 z+0 S8 A64])) "test1.c":96 -1
     (nil))

(insn 24 23 0 (set (reg/f:DI 89 [ _3 ])
        (mem/f:DI (plus:DI (reg/f:DI 110)
                (const_int 8 [0x8])) [2 z_14(D)->left+0 S8 A64])) "test1.c":96 -1
     (nil))

;; _4 = nodeHeight (_3);

(insn 25 24 26 (set (reg:DI 5 di)
        (reg/f:DI 89 [ _3 ])) "test1.c":96 -1
     (nil))

(call_insn 26 25 27 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodeHeight") [flags 0x3]  <function_decl 0x7fddd77eab00 nodeHeight>) [0 nodeHeight S1 A8])
            (const_int 0 [0]))) "test1.c":96 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 27 26 0 (set (reg:SI 90 [ _4 ])
        (reg:SI 0 ax)) "test1.c":96 -1
     (nil))

;; _5 = max (_4, _2);

(insn 28 27 29 (set (reg:SI 4 si)
        (reg:SI 88 [ _2 ])) "test1.c":96 -1
     (nil))

(insn 29 28 30 (set (reg:SI 5 di)
        (reg:SI 90 [ _4 ])) "test1.c":96 -1
     (nil))

(call_insn 30 29 31 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("max") [flags 0x3]  <function_decl 0x7fddd77ea700 max>) [0 max S1 A8])
            (const_int 0 [0]))) "test1.c":96 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))

(insn 31 30 0 (set (reg:SI 91 [ _5 ])
        (reg:SI 0 ax)) "test1.c":96 -1
     (nil))

;; _6 = _5 + 1;

(insn 32 31 0 (parallel [
            (set (reg:SI 92 [ _6 ])
                (plus:SI (reg:SI 91 [ _5 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":96 -1
     (nil))

;; z_14(D)->height = _6;

(insn 33 32 34 (set (reg/f:DI 111)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 z+0 S8 A64])) "test1.c":96 -1
     (nil))

(insn 34 33 0 (set (mem:SI (plus:DI (reg/f:DI 111)
                (const_int 24 [0x18])) [1 z_14(D)->height+0 S4 A64])
        (reg:SI 92 [ _6 ])) "test1.c":96 -1
     (nil))

;; _7 = y_15->right;

(insn 35 34 36 (set (reg/f:DI 112)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 y+0 S8 A64])) "test1.c":97 -1
     (nil))

(insn 36 35 0 (set (reg/f:DI 93 [ _7 ])
        (mem/f:DI (plus:DI (reg/f:DI 112)
                (const_int 16 [0x10])) [2 y_15->right+0 S8 A64])) "test1.c":97 -1
     (nil))

;; _8 = nodeHeight (_7);

(insn 37 36 38 (set (reg:DI 5 di)
        (reg/f:DI 93 [ _7 ])) "test1.c":97 -1
     (nil))

(call_insn 38 37 39 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodeHeight") [flags 0x3]  <function_decl 0x7fddd77eab00 nodeHeight>) [0 nodeHeight S1 A8])
            (const_int 0 [0]))) "test1.c":97 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 39 38 0 (set (reg:SI 94 [ _8 ])
        (reg:SI 0 ax)) "test1.c":97 -1
     (nil))

;; _9 = y_15->left;

(insn 40 39 41 (set (reg/f:DI 113)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 y+0 S8 A64])) "test1.c":97 -1
     (nil))

(insn 41 40 0 (set (reg/f:DI 95 [ _9 ])
        (mem/f:DI (plus:DI (reg/f:DI 113)
                (const_int 8 [0x8])) [2 y_15->left+0 S8 A64])) "test1.c":97 -1
     (nil))

;; _10 = nodeHeight (_9);

(insn 42 41 43 (set (reg:DI 5 di)
        (reg/f:DI 95 [ _9 ])) "test1.c":97 -1
     (nil))

(call_insn 43 42 44 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodeHeight") [flags 0x3]  <function_decl 0x7fddd77eab00 nodeHeight>) [0 nodeHeight S1 A8])
            (const_int 0 [0]))) "test1.c":97 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 44 43 0 (set (reg:SI 96 [ _10 ])
        (reg:SI 0 ax)) "test1.c":97 -1
     (nil))

;; _11 = max (_10, _8);

(insn 45 44 46 (set (reg:SI 4 si)
        (reg:SI 94 [ _8 ])) "test1.c":97 -1
     (nil))

(insn 46 45 47 (set (reg:SI 5 di)
        (reg:SI 96 [ _10 ])) "test1.c":97 -1
     (nil))

(call_insn 47 46 48 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("max") [flags 0x3]  <function_decl 0x7fddd77ea700 max>) [0 max S1 A8])
            (const_int 0 [0]))) "test1.c":97 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))

(insn 48 47 0 (set (reg:SI 97 [ _11 ])
        (reg:SI 0 ax)) "test1.c":97 -1
     (nil))

;; _12 = _11 + 1;

(insn 49 48 0 (parallel [
            (set (reg:SI 98 [ _12 ])
                (plus:SI (reg:SI 97 [ _11 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":97 -1
     (nil))

;; y_15->height = _12;

(insn 50 49 51 (set (reg/f:DI 114)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 y+0 S8 A64])) "test1.c":97 -1
     (nil))

(insn 51 50 0 (set (mem:SI (plus:DI (reg/f:DI 114)
                (const_int 24 [0x18])) [1 y_15->height+0 S4 A64])
        (reg:SI 98 [ _12 ])) "test1.c":97 -1
     (nil))

;; _27 = y_15;

(insn 52 51 0 (set (reg/f:DI 99 [ _27 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 y+0 S8 A64])) "test1.c":99 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; <L0> [0.00%]:

(code_label 53 52 54 25 (nil) [0 uses])

(note 54 53 0 NOTE_INSN_BASIC_BLOCK)

;; return _27;

(insn 55 54 56 (set (reg/f:DI 100 [ <retval> ])
        (reg/f:DI 99 [ _27 ])) "test1.c":99 -1
     (nil))

(jump_insn 56 55 57 (set (pc)
        (label_ref 0)) "test1.c":99 -1
     (nil))

(barrier 57 56 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 4 into block 2...
Merged blocks 2 and 4.
Merged 2 and 4 without moving.
Removing jump 56.
Merging block 5 into block 2...
Merged blocks 2 and 5.
Merged 2 and 5 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 z+0 S8 A64])
        (reg:DI 5 di [ z ])) "test1.c":89 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 101)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 z+0 S8 A64])) "test1.c":90 -1
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 102)
        (mem/f:DI (plus:DI (reg/f:DI 101)
                (const_int 16 [0x10])) [2 z_14(D)->right+0 S8 A64])) "test1.c":90 -1
     (nil))
(insn 8 7 9 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 y+0 S8 A64])
        (reg/f:DI 102)) "test1.c":90 -1
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 103)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 y+0 S8 A64])) "test1.c":91 -1
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 104)
        (mem/f:DI (plus:DI (reg/f:DI 103)
                (const_int 8 [0x8])) [2 y_15->left+0 S8 A64])) "test1.c":91 -1
     (nil))
(insn 11 10 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 T3+0 S8 A64])
        (reg/f:DI 104)) "test1.c":91 -1
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 105)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 y+0 S8 A64])) "test1.c":93 -1
     (nil))
(insn 13 12 14 2 (set (reg/f:DI 106)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 z+0 S8 A64])) "test1.c":93 -1
     (nil))
(insn 14 13 15 2 (set (mem/f:DI (plus:DI (reg/f:DI 105)
                (const_int 8 [0x8])) [2 y_15->left+0 S8 A64])
        (reg/f:DI 106)) "test1.c":93 -1
     (nil))
(insn 15 14 16 2 (set (reg/f:DI 107)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 z+0 S8 A64])) "test1.c":94 -1
     (nil))
(insn 16 15 17 2 (set (reg/f:DI 108)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 T3+0 S8 A64])) "test1.c":94 -1
     (nil))
(insn 17 16 18 2 (set (mem/f:DI (plus:DI (reg/f:DI 107)
                (const_int 16 [0x10])) [2 z_14(D)->right+0 S8 A64])
        (reg/f:DI 108)) "test1.c":94 -1
     (nil))
(insn 18 17 19 2 (set (reg/f:DI 109)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 z+0 S8 A64])) "test1.c":96 -1
     (nil))
(insn 19 18 20 2 (set (reg/f:DI 87 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 109)
                (const_int 16 [0x10])) [2 z_14(D)->right+0 S8 A64])) "test1.c":96 -1
     (nil))
(insn 20 19 21 2 (set (reg:DI 5 di)
        (reg/f:DI 87 [ _1 ])) "test1.c":96 -1
     (nil))
(call_insn 21 20 22 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodeHeight") [flags 0x3]  <function_decl 0x7fddd77eab00 nodeHeight>) [0 nodeHeight S1 A8])
            (const_int 0 [0]))) "test1.c":96 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 22 21 23 2 (set (reg:SI 88 [ _2 ])
        (reg:SI 0 ax)) "test1.c":96 -1
     (nil))
(insn 23 22 24 2 (set (reg/f:DI 110)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 z+0 S8 A64])) "test1.c":96 -1
     (nil))
(insn 24 23 25 2 (set (reg/f:DI 89 [ _3 ])
        (mem/f:DI (plus:DI (reg/f:DI 110)
                (const_int 8 [0x8])) [2 z_14(D)->left+0 S8 A64])) "test1.c":96 -1
     (nil))
(insn 25 24 26 2 (set (reg:DI 5 di)
        (reg/f:DI 89 [ _3 ])) "test1.c":96 -1
     (nil))
(call_insn 26 25 27 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodeHeight") [flags 0x3]  <function_decl 0x7fddd77eab00 nodeHeight>) [0 nodeHeight S1 A8])
            (const_int 0 [0]))) "test1.c":96 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 27 26 28 2 (set (reg:SI 90 [ _4 ])
        (reg:SI 0 ax)) "test1.c":96 -1
     (nil))
(insn 28 27 29 2 (set (reg:SI 4 si)
        (reg:SI 88 [ _2 ])) "test1.c":96 -1
     (nil))
(insn 29 28 30 2 (set (reg:SI 5 di)
        (reg:SI 90 [ _4 ])) "test1.c":96 -1
     (nil))
(call_insn 30 29 31 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("max") [flags 0x3]  <function_decl 0x7fddd77ea700 max>) [0 max S1 A8])
            (const_int 0 [0]))) "test1.c":96 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 31 30 32 2 (set (reg:SI 91 [ _5 ])
        (reg:SI 0 ax)) "test1.c":96 -1
     (nil))
(insn 32 31 33 2 (parallel [
            (set (reg:SI 92 [ _6 ])
                (plus:SI (reg:SI 91 [ _5 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":96 -1
     (nil))
(insn 33 32 34 2 (set (reg/f:DI 111)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 z+0 S8 A64])) "test1.c":96 -1
     (nil))
(insn 34 33 35 2 (set (mem:SI (plus:DI (reg/f:DI 111)
                (const_int 24 [0x18])) [1 z_14(D)->height+0 S4 A64])
        (reg:SI 92 [ _6 ])) "test1.c":96 -1
     (nil))
(insn 35 34 36 2 (set (reg/f:DI 112)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 y+0 S8 A64])) "test1.c":97 -1
     (nil))
(insn 36 35 37 2 (set (reg/f:DI 93 [ _7 ])
        (mem/f:DI (plus:DI (reg/f:DI 112)
                (const_int 16 [0x10])) [2 y_15->right+0 S8 A64])) "test1.c":97 -1
     (nil))
(insn 37 36 38 2 (set (reg:DI 5 di)
        (reg/f:DI 93 [ _7 ])) "test1.c":97 -1
     (nil))
(call_insn 38 37 39 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodeHeight") [flags 0x3]  <function_decl 0x7fddd77eab00 nodeHeight>) [0 nodeHeight S1 A8])
            (const_int 0 [0]))) "test1.c":97 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 39 38 40 2 (set (reg:SI 94 [ _8 ])
        (reg:SI 0 ax)) "test1.c":97 -1
     (nil))
(insn 40 39 41 2 (set (reg/f:DI 113)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 y+0 S8 A64])) "test1.c":97 -1
     (nil))
(insn 41 40 42 2 (set (reg/f:DI 95 [ _9 ])
        (mem/f:DI (plus:DI (reg/f:DI 113)
                (const_int 8 [0x8])) [2 y_15->left+0 S8 A64])) "test1.c":97 -1
     (nil))
(insn 42 41 43 2 (set (reg:DI 5 di)
        (reg/f:DI 95 [ _9 ])) "test1.c":97 -1
     (nil))
(call_insn 43 42 44 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodeHeight") [flags 0x3]  <function_decl 0x7fddd77eab00 nodeHeight>) [0 nodeHeight S1 A8])
            (const_int 0 [0]))) "test1.c":97 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 44 43 45 2 (set (reg:SI 96 [ _10 ])
        (reg:SI 0 ax)) "test1.c":97 -1
     (nil))
(insn 45 44 46 2 (set (reg:SI 4 si)
        (reg:SI 94 [ _8 ])) "test1.c":97 -1
     (nil))
(insn 46 45 47 2 (set (reg:SI 5 di)
        (reg:SI 96 [ _10 ])) "test1.c":97 -1
     (nil))
(call_insn 47 46 48 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("max") [flags 0x3]  <function_decl 0x7fddd77ea700 max>) [0 max S1 A8])
            (const_int 0 [0]))) "test1.c":97 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 48 47 49 2 (set (reg:SI 97 [ _11 ])
        (reg:SI 0 ax)) "test1.c":97 -1
     (nil))
(insn 49 48 50 2 (parallel [
            (set (reg:SI 98 [ _12 ])
                (plus:SI (reg:SI 97 [ _11 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":97 -1
     (nil))
(insn 50 49 51 2 (set (reg/f:DI 114)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 y+0 S8 A64])) "test1.c":97 -1
     (nil))
(insn 51 50 52 2 (set (mem:SI (plus:DI (reg/f:DI 114)
                (const_int 24 [0x18])) [1 y_15->height+0 S4 A64])
        (reg:SI 98 [ _12 ])) "test1.c":97 -1
     (nil))
(insn 52 51 55 2 (set (reg/f:DI 99 [ _27 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 y+0 S8 A64])) "test1.c":99 -1
     (nil))
(insn 55 52 59 2 (set (reg/f:DI 100 [ <retval> ])
        (reg/f:DI 99 [ _27 ])) "test1.c":99 -1
     (nil))
(insn 59 55 60 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 100 [ <retval> ])) "test1.c":100 -1
     (nil))
(insn 60 59 0 2 (use (reg/i:DI 0 ax)) "test1.c":100 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function LeftRightRotate (LeftRightRotate, funcdef_no=13, decl_uid=2807, cgraph_uid=13, symbol_order=13)

LeftRightRotate (struct avlNode * z)
{
  struct avlNode * D.2882;
  struct AVLnode * _1;
  struct avlNode * _2;
  struct avlNode * _8;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _1 = z_4(D)->left;
  _2 = leftRotate (_1);
  z_4(D)->left = _2;
  _8 = rightRotate (z_4(D));
;;    succ:       3

;;   basic block 3, loop depth 0
;;    pred:       2
<L0> [0.00%]:
  return _8;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 4 (z_4(D) - 4 )
Partition 8 (_8 - 8 )
Partition 9 (_9(D) - 9 )


Partition map 

Partition 0 (z_4(D) - 4 )
Partition 1 (_9(D) - 9 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (z_4(D) - 4 )
Partition 1 (_9(D) - 9 )

After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (z_4(D) - 4 )
Partition 3 (_8 - 8 )
Partition 4 (_9(D) - 9 )

LeftRightRotate (struct avlNode * z)
{
  struct avlNode * D.2882;
  struct AVLnode * _1;
  struct avlNode * _2;
  struct avlNode * _8;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _1 = z_4(D)->left;
  _2 = leftRotate (_1);
  z_4(D)->left = _2;
  _8 = rightRotate (z_4(D));
;;    succ:       3

;;   basic block 3, loop depth 0
;;    pred:       2
<L0> [0.00%]:
  return _8;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; _1 = z_4(D)->left;

(insn 6 5 7 (set (reg/f:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 z+0 S8 A64])) "test1.c":104 -1
     (nil))

(insn 7 6 0 (set (reg/f:DI 87 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 91)
                (const_int 8 [0x8])) [2 z_4(D)->left+0 S8 A64])) "test1.c":104 -1
     (nil))

;; _2 = leftRotate (_1);

(insn 8 7 9 (set (reg:DI 5 di)
        (reg/f:DI 87 [ _1 ])) "test1.c":104 -1
     (nil))

(call_insn 9 8 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("leftRotate") [flags 0x3]  <function_decl 0x7fddd77ee500 leftRotate>) [0 leftRotate S1 A8])
            (const_int 0 [0]))) "test1.c":104 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 10 9 0 (set (reg/f:DI 88 [ _2 ])
        (reg:DI 0 ax)) "test1.c":104 -1
     (nil))

;; z_4(D)->left = _2;

(insn 11 10 12 (set (reg/f:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 z+0 S8 A64])) "test1.c":104 -1
     (nil))

(insn 12 11 0 (set (mem/f:DI (plus:DI (reg/f:DI 92)
                (const_int 8 [0x8])) [2 z_4(D)->left+0 S8 A64])
        (reg/f:DI 88 [ _2 ])) "test1.c":104 -1
     (nil))

;; _8 = rightRotate (z_4(D));

(insn 13 12 14 (set (reg:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 z+0 S8 A64])) "test1.c":106 -1
     (nil))

(insn 14 13 15 (set (reg:DI 5 di)
        (reg:DI 93)) "test1.c":106 -1
     (nil))

(call_insn 15 14 16 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("rightRotate") [flags 0x3]  <function_decl 0x7fddd77ee300 rightRotate>) [0 rightRotate S1 A8])
            (const_int 0 [0]))) "test1.c":106 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 16 15 0 (set (reg/f:DI 89 [ _8 ])
        (reg:DI 0 ax)) "test1.c":106 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; <L0> [0.00%]:

(code_label 17 16 18 27 (nil) [0 uses])

(note 18 17 0 NOTE_INSN_BASIC_BLOCK)

;; return _8;

(insn 19 18 20 (set (reg/f:DI 90 [ <retval> ])
        (reg/f:DI 89 [ _8 ])) "test1.c":106 -1
     (nil))

(jump_insn 20 19 21 (set (pc)
        (label_ref 0)) "test1.c":106 -1
     (nil))

(barrier 21 20 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 4 into block 2...
Merged blocks 2 and 4.
Merged 2 and 4 without moving.
Removing jump 20.
Merging block 5 into block 2...
Merged blocks 2 and 5.
Merged 2 and 5 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 z+0 S8 A64])
        (reg:DI 5 di [ z ])) "test1.c":103 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 z+0 S8 A64])) "test1.c":104 -1
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 87 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 91)
                (const_int 8 [0x8])) [2 z_4(D)->left+0 S8 A64])) "test1.c":104 -1
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg/f:DI 87 [ _1 ])) "test1.c":104 -1
     (nil))
(call_insn 9 8 10 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("leftRotate") [flags 0x3]  <function_decl 0x7fddd77ee500 leftRotate>) [0 leftRotate S1 A8])
            (const_int 0 [0]))) "test1.c":104 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 10 9 11 2 (set (reg/f:DI 88 [ _2 ])
        (reg:DI 0 ax)) "test1.c":104 -1
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 z+0 S8 A64])) "test1.c":104 -1
     (nil))
(insn 12 11 13 2 (set (mem/f:DI (plus:DI (reg/f:DI 92)
                (const_int 8 [0x8])) [2 z_4(D)->left+0 S8 A64])
        (reg/f:DI 88 [ _2 ])) "test1.c":104 -1
     (nil))
(insn 13 12 14 2 (set (reg:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 z+0 S8 A64])) "test1.c":106 -1
     (nil))
(insn 14 13 15 2 (set (reg:DI 5 di)
        (reg:DI 93)) "test1.c":106 -1
     (nil))
(call_insn 15 14 16 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("rightRotate") [flags 0x3]  <function_decl 0x7fddd77ee300 rightRotate>) [0 rightRotate S1 A8])
            (const_int 0 [0]))) "test1.c":106 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 16 15 19 2 (set (reg/f:DI 89 [ _8 ])
        (reg:DI 0 ax)) "test1.c":106 -1
     (nil))
(insn 19 16 23 2 (set (reg/f:DI 90 [ <retval> ])
        (reg/f:DI 89 [ _8 ])) "test1.c":106 -1
     (nil))
(insn 23 19 24 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 90 [ <retval> ])) "test1.c":107 -1
     (nil))
(insn 24 23 0 2 (use (reg/i:DI 0 ax)) "test1.c":107 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function RightLeftRotate (RightLeftRotate, funcdef_no=14, decl_uid=2810, cgraph_uid=14, symbol_order=14)

RightLeftRotate (struct avlNode * z)
{
  struct avlNode * D.2884;
  struct AVLnode * _1;
  struct avlNode * _2;
  struct avlNode * _8;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _1 = z_4(D)->right;
  _2 = rightRotate (_1);
  z_4(D)->right = _2;
  _8 = leftRotate (z_4(D));
;;    succ:       3

;;   basic block 3, loop depth 0
;;    pred:       2
<L0> [0.00%]:
  return _8;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 4 (z_4(D) - 4 )
Partition 8 (_8 - 8 )
Partition 9 (_9(D) - 9 )


Partition map 

Partition 0 (z_4(D) - 4 )
Partition 1 (_9(D) - 9 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (z_4(D) - 4 )
Partition 1 (_9(D) - 9 )

After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (z_4(D) - 4 )
Partition 3 (_8 - 8 )
Partition 4 (_9(D) - 9 )

RightLeftRotate (struct avlNode * z)
{
  struct avlNode * D.2884;
  struct AVLnode * _1;
  struct avlNode * _2;
  struct avlNode * _8;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _1 = z_4(D)->right;
  _2 = rightRotate (_1);
  z_4(D)->right = _2;
  _8 = leftRotate (z_4(D));
;;    succ:       3

;;   basic block 3, loop depth 0
;;    pred:       2
<L0> [0.00%]:
  return _8;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; _1 = z_4(D)->right;

(insn 6 5 7 (set (reg/f:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 z+0 S8 A64])) "test1.c":111 -1
     (nil))

(insn 7 6 0 (set (reg/f:DI 87 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 91)
                (const_int 16 [0x10])) [2 z_4(D)->right+0 S8 A64])) "test1.c":111 -1
     (nil))

;; _2 = rightRotate (_1);

(insn 8 7 9 (set (reg:DI 5 di)
        (reg/f:DI 87 [ _1 ])) "test1.c":111 -1
     (nil))

(call_insn 9 8 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("rightRotate") [flags 0x3]  <function_decl 0x7fddd77ee300 rightRotate>) [0 rightRotate S1 A8])
            (const_int 0 [0]))) "test1.c":111 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 10 9 0 (set (reg/f:DI 88 [ _2 ])
        (reg:DI 0 ax)) "test1.c":111 -1
     (nil))

;; z_4(D)->right = _2;

(insn 11 10 12 (set (reg/f:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 z+0 S8 A64])) "test1.c":111 -1
     (nil))

(insn 12 11 0 (set (mem/f:DI (plus:DI (reg/f:DI 92)
                (const_int 16 [0x10])) [2 z_4(D)->right+0 S8 A64])
        (reg/f:DI 88 [ _2 ])) "test1.c":111 -1
     (nil))

;; _8 = leftRotate (z_4(D));

(insn 13 12 14 (set (reg:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 z+0 S8 A64])) "test1.c":113 -1
     (nil))

(insn 14 13 15 (set (reg:DI 5 di)
        (reg:DI 93)) "test1.c":113 -1
     (nil))

(call_insn 15 14 16 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("leftRotate") [flags 0x3]  <function_decl 0x7fddd77ee500 leftRotate>) [0 leftRotate S1 A8])
            (const_int 0 [0]))) "test1.c":113 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 16 15 0 (set (reg/f:DI 89 [ _8 ])
        (reg:DI 0 ax)) "test1.c":113 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; <L0> [0.00%]:

(code_label 17 16 18 29 (nil) [0 uses])

(note 18 17 0 NOTE_INSN_BASIC_BLOCK)

;; return _8;

(insn 19 18 20 (set (reg/f:DI 90 [ <retval> ])
        (reg/f:DI 89 [ _8 ])) "test1.c":113 -1
     (nil))

(jump_insn 20 19 21 (set (pc)
        (label_ref 0)) "test1.c":113 -1
     (nil))

(barrier 21 20 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 4 into block 2...
Merged blocks 2 and 4.
Merged 2 and 4 without moving.
Removing jump 20.
Merging block 5 into block 2...
Merged blocks 2 and 5.
Merged 2 and 5 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 z+0 S8 A64])
        (reg:DI 5 di [ z ])) "test1.c":110 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 z+0 S8 A64])) "test1.c":111 -1
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 87 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 91)
                (const_int 16 [0x10])) [2 z_4(D)->right+0 S8 A64])) "test1.c":111 -1
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg/f:DI 87 [ _1 ])) "test1.c":111 -1
     (nil))
(call_insn 9 8 10 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("rightRotate") [flags 0x3]  <function_decl 0x7fddd77ee300 rightRotate>) [0 rightRotate S1 A8])
            (const_int 0 [0]))) "test1.c":111 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 10 9 11 2 (set (reg/f:DI 88 [ _2 ])
        (reg:DI 0 ax)) "test1.c":111 -1
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 z+0 S8 A64])) "test1.c":111 -1
     (nil))
(insn 12 11 13 2 (set (mem/f:DI (plus:DI (reg/f:DI 92)
                (const_int 16 [0x10])) [2 z_4(D)->right+0 S8 A64])
        (reg/f:DI 88 [ _2 ])) "test1.c":111 -1
     (nil))
(insn 13 12 14 2 (set (reg:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 z+0 S8 A64])) "test1.c":113 -1
     (nil))
(insn 14 13 15 2 (set (reg:DI 5 di)
        (reg:DI 93)) "test1.c":113 -1
     (nil))
(call_insn 15 14 16 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("leftRotate") [flags 0x3]  <function_decl 0x7fddd77ee500 leftRotate>) [0 leftRotate S1 A8])
            (const_int 0 [0]))) "test1.c":113 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 16 15 19 2 (set (reg/f:DI 89 [ _8 ])
        (reg:DI 0 ax)) "test1.c":113 -1
     (nil))
(insn 19 16 23 2 (set (reg/f:DI 90 [ <retval> ])
        (reg/f:DI 89 [ _8 ])) "test1.c":113 -1
     (nil))
(insn 23 19 24 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 90 [ <retval> ])) "test1.c":114 -1
     (nil))
(insn 24 23 0 2 (use (reg/i:DI 0 ax)) "test1.c":114 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function insert (insert, funcdef_no=15, decl_uid=2814, cgraph_uid=15, symbol_order=15)

insert (struct avlNode * node, int key)
{
  int balance;
  struct avlNode * D.2888;
  int _1;
  struct AVLnode * _2;
  struct avlNode * _3;
  int _4;
  struct AVLnode * _5;
  struct avlNode * _6;
  struct AVLnode * _7;
  int _8;
  struct AVLnode * _9;
  int _10;
  int _11;
  int _12;
  struct AVLnode * _13;
  int _14;
  struct AVLnode * _15;
  int _16;
  struct AVLnode * _17;
  int _18;
  struct AVLnode * _19;
  int _20;
  struct avlNode * _23;
  struct avlNode * _42;
  struct avlNode * _44;
  struct avlNode * _49;
  struct avlNode * _51;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (node_28(D) == 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  _51 = newNode (key_30(D));
  goto <bb 21> (<L23>); [0.00%]
;;    succ:       21

;;   basic block 4, loop depth 0
;;    pred:       2
  _1 = node_28(D)->key;
  if (key_30(D) < _1)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]
;;    succ:       5
;;                6

;;   basic block 5, loop depth 0
;;    pred:       4
  _2 = node_28(D)->left;
  _3 = insert (_2, key_30(D));
  node_28(D)->left = _3;
  goto <bb 8>; [0.00%]
;;    succ:       8

;;   basic block 6, loop depth 0
;;    pred:       4
  _4 = node_28(D)->key;
  if (key_30(D) > _4)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]
;;    succ:       7
;;                8

;;   basic block 7, loop depth 0
;;    pred:       6
  _5 = node_28(D)->right;
  _6 = insert (_5, key_30(D));
  node_28(D)->right = _6;
;;    succ:       8

;;   basic block 8, loop depth 0
;;    pred:       5
;;                6
;;                7
  _7 = node_28(D)->right;
  _8 = nodeHeight (_7);
  _9 = node_28(D)->left;
  _10 = nodeHeight (_9);
  _11 = max (_10, _8);
  _12 = _11 + 1;
  node_28(D)->height = _12;
  balance_40 = heightDiff (node_28(D));
  if (balance_40 > 1)
    goto <bb 9>; [0.00%]
  else
    goto <bb 11>; [0.00%]
;;    succ:       9
;;                11

;;   basic block 9, loop depth 0
;;    pred:       8
  _13 = node_28(D)->left;
  _14 = _13->key;
  if (key_30(D) < _14)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]
;;    succ:       10
;;                11

;;   basic block 10, loop depth 0
;;    pred:       9
  _42 = rightRotate (node_28(D));
  goto <bb 21> (<L23>); [0.00%]
;;    succ:       21

;;   basic block 11, loop depth 0
;;    pred:       8
;;                9
  if (balance_40 < -1)
    goto <bb 12>; [0.00%]
  else
    goto <bb 14>; [0.00%]
;;    succ:       12
;;                14

;;   basic block 12, loop depth 0
;;    pred:       11
  _15 = node_28(D)->right;
  _16 = _15->key;
  if (key_30(D) > _16)
    goto <bb 13>; [0.00%]
  else
    goto <bb 14>; [0.00%]
;;    succ:       13
;;                14

;;   basic block 13, loop depth 0
;;    pred:       12
  _44 = leftRotate (node_28(D));
  goto <bb 21> (<L23>); [0.00%]
;;    succ:       21

;;   basic block 14, loop depth 0
;;    pred:       11
;;                12
  if (balance_40 > 1)
    goto <bb 15>; [0.00%]
  else
    goto <bb 17>; [0.00%]
;;    succ:       15
;;                17

;;   basic block 15, loop depth 0
;;    pred:       14
  _17 = node_28(D)->left;
  _18 = _17->key;
  if (key_30(D) > _18)
    goto <bb 16>; [0.00%]
  else
    goto <bb 17>; [0.00%]
;;    succ:       16
;;                17

;;   basic block 16, loop depth 0
;;    pred:       15
  node_46 = LeftRightRotate (node_28(D));
;;    succ:       17

;;   basic block 17, loop depth 0
;;    pred:       14
;;                15
;;                16
  # node_21 = PHI <node_28(D)(14), node_28(D)(15), node_46(16)>
  if (balance_40 < -1)
    goto <bb 18>; [0.00%]
  else
    goto <bb 20>; [0.00%]
;;    succ:       18
;;                20

;;   basic block 18, loop depth 0
;;    pred:       17
  _19 = node_21->right;
  _20 = _19->key;
  if (key_30(D) < _20)
    goto <bb 19>; [0.00%]
  else
    goto <bb 20>; [0.00%]
;;    succ:       19
;;                20

;;   basic block 19, loop depth 0
;;    pred:       18
  node_48 = RightLeftRotate (node_21);
;;    succ:       20

;;   basic block 20, loop depth 0
;;    pred:       17
;;                18
;;                19
  # node_22 = PHI <node_21(17), node_21(18), node_48(19)>
  _49 = node_22;
;;    succ:       21

;;   basic block 21, loop depth 0
;;    pred:       3
;;                10
;;                13
;;                20
  # _23 = PHI <_51(3), _42(10), _44(13), _49(20)>
<L23> [0.00%]:
  return _23;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (_5 - 5 )
Partition 6 (_6 - 6 )
Partition 7 (_7 - 7 )
Partition 8 (_8 - 8 )
Partition 9 (_9 - 9 )
Partition 10 (_10 - 10 )
Partition 11 (_11 - 11 )
Partition 12 (_12 - 12 )
Partition 13 (_13 - 13 )
Partition 14 (_14 - 14 )
Partition 15 (_15 - 15 )
Partition 16 (_16 - 16 )
Partition 17 (_17 - 17 )
Partition 18 (_18 - 18 )
Partition 19 (_19 - 19 )
Partition 20 (_20 - 20 )
Partition 21 (node_21 - 21 )
Partition 22 (node_22 - 22 )
Partition 23 (_23 - 23 )
Partition 28 (node_28(D) - 28 )
Partition 30 (key_30(D) - 30 )
Partition 40 (balance_40 - 40 )
Partition 42 (_42 - 42 )
Partition 44 (_44 - 44 )
Partition 46 (node_46 - 46 )
Partition 48 (node_48 - 48 )
Partition 49 (_49 - 49 )
Partition 51 (_51 - 51 )
Partition 52 (_52(D) - 52 )


Partition map 

Partition 0 (node_21 - 21 )
Partition 1 (node_22 - 22 )
Partition 2 (_23 - 23 )
Partition 3 (node_28(D) - 28 )
Partition 4 (key_30(D) - 30 )
Partition 5 (_42 - 42 )
Partition 6 (_44 - 44 )
Partition 7 (node_46 - 46 )
Partition 8 (node_48 - 48 )
Partition 9 (_49 - 49 )
Partition 10 (_51 - 51 )
Partition 11 (_52(D) - 52 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483647, 0) node_21 <-> node_28(D)
(2147483647, 0) node_21 <-> node_22
(2147483647, 0) node_21 <-> node_46
(2147483647, 0) node_21 <-> node_48

Partition map 

Partition 0 (node_21 - 21 )
Partition 1 (node_22 - 22 )
Partition 2 (_23 - 23 )
Partition 3 (node_28(D) - 28 )
Partition 4 (key_30(D) - 30 )
Partition 5 (_42 - 42 )
Partition 6 (_44 - 44 )
Partition 7 (node_46 - 46 )
Partition 8 (node_48 - 48 )
Partition 9 (_49 - 49 )
Partition 10 (_51 - 51 )
Partition 11 (_52(D) - 52 )

Coalesce list: (21)node_21 & (28)node_28(D) [map: 0, 3] : Success -> 0
Coalesce list: (21)node_21 & (22)node_22 [map: 0, 1] : Success -> 0
Coalesce list: (21)node_21 & (46)node_46 [map: 0, 7] : Success -> 0
Coalesce list: (21)node_21 & (48)node_48 [map: 0, 8] : Success -> 0
Coalesce list: (23)_23 & (49)_49 [map: 2, 9] : Success -> 2
Coalesce list: (23)_23 & (44)_44 [map: 2, 6] : Success -> 2
Coalesce list: (23)_23 & (42)_42 [map: 2, 5] : Success -> 2
Coalesce list: (23)_23 & (51)_51 [map: 2, 10] : Success -> 2
Coalesce list: (22)node_21 & (48)node_21: Already Coalesced.
Coalesce list: (21)node_21 & (46)node_21: Already Coalesced.
After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (_5 - 5 )
Partition 5 (_6 - 6 )
Partition 6 (_7 - 7 )
Partition 7 (_8 - 8 )
Partition 8 (_9 - 9 )
Partition 9 (_10 - 10 )
Partition 10 (_11 - 11 )
Partition 11 (_12 - 12 )
Partition 12 (_13 - 13 )
Partition 13 (_14 - 14 )
Partition 14 (_15 - 15 )
Partition 15 (_16 - 16 )
Partition 16 (_17 - 17 )
Partition 17 (_18 - 18 )
Partition 18 (_19 - 19 )
Partition 19 (_20 - 20 )
Partition 20 (node_21 - 21 22 28 46 48 )
Partition 21 (_23 - 23 42 44 49 51 )
Partition 22 (key_30(D) - 30 )
Partition 23 (balance_40 - 40 )
Partition 24 (_52(D) - 52 )

insert (struct avlNode * node, int key)
{
  int balance;
  struct avlNode * D.2888;
  int _1;
  struct AVLnode * _2;
  struct avlNode * _3;
  int _4;
  struct AVLnode * _5;
  struct avlNode * _6;
  struct AVLnode * _7;
  int _8;
  struct AVLnode * _9;
  int _10;
  int _11;
  int _12;
  struct AVLnode * _13;
  int _14;
  struct AVLnode * _15;
  int _16;
  struct AVLnode * _17;
  int _18;
  struct AVLnode * _19;
  int _20;
  struct avlNode * _23;
  struct avlNode * _42;
  struct avlNode * _44;
  struct avlNode * _49;
  struct avlNode * _51;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (node_28(D) == 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  _51 = newNode (key_30(D));
  goto <bb 21> (<L23>); [0.00%]
;;    succ:       21

;;   basic block 4, loop depth 0
;;    pred:       2
  _1 = node_28(D)->key;
  if (key_30(D) < _1)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]
;;    succ:       5
;;                6

;;   basic block 5, loop depth 0
;;    pred:       4
  _2 = node_28(D)->left;
  _3 = insert (_2, key_30(D));
  node_28(D)->left = _3;
  goto <bb 8>; [0.00%]
;;    succ:       8

;;   basic block 6, loop depth 0
;;    pred:       4
  _4 = node_28(D)->key;
  if (key_30(D) > _4)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]
;;    succ:       7
;;                8

;;   basic block 7, loop depth 0
;;    pred:       6
  _5 = node_28(D)->right;
  _6 = insert (_5, key_30(D));
  node_28(D)->right = _6;
;;    succ:       8

;;   basic block 8, loop depth 0
;;    pred:       5
;;                6
;;                7
  _7 = node_28(D)->right;
  _8 = nodeHeight (_7);
  _9 = node_28(D)->left;
  _10 = nodeHeight (_9);
  _11 = max (_10, _8);
  _12 = _11 + 1;
  node_28(D)->height = _12;
  balance_40 = heightDiff (node_28(D));
  if (balance_40 > 1)
    goto <bb 9>; [0.00%]
  else
    goto <bb 11>; [0.00%]
;;    succ:       9
;;                11

;;   basic block 9, loop depth 0
;;    pred:       8
  _13 = node_28(D)->left;
  _14 = _13->key;
  if (key_30(D) < _14)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]
;;    succ:       10
;;                11

;;   basic block 10, loop depth 0
;;    pred:       9
  _42 = rightRotate (node_28(D));
  goto <bb 21> (<L23>); [0.00%]
;;    succ:       21

;;   basic block 11, loop depth 0
;;    pred:       8
;;                9
  if (balance_40 < -1)
    goto <bb 12>; [0.00%]
  else
    goto <bb 14>; [0.00%]
;;    succ:       12
;;                14

;;   basic block 12, loop depth 0
;;    pred:       11
  _15 = node_28(D)->right;
  _16 = _15->key;
  if (key_30(D) > _16)
    goto <bb 13>; [0.00%]
  else
    goto <bb 14>; [0.00%]
;;    succ:       13
;;                14

;;   basic block 13, loop depth 0
;;    pred:       12
  _44 = leftRotate (node_28(D));
  goto <bb 21> (<L23>); [0.00%]
;;    succ:       21

;;   basic block 14, loop depth 0
;;    pred:       11
;;                12
  if (balance_40 > 1)
    goto <bb 15>; [0.00%]
  else
    goto <bb 17>; [0.00%]
;;    succ:       15
;;                17

;;   basic block 15, loop depth 0
;;    pred:       14
  _17 = node_28(D)->left;
  _18 = _17->key;
  if (key_30(D) > _18)
    goto <bb 16>; [0.00%]
  else
    goto <bb 17>; [0.00%]
;;    succ:       16
;;                17

;;   basic block 16, loop depth 0
;;    pred:       15
  node_46 = LeftRightRotate (node_28(D));
;;    succ:       17

;;   basic block 17, loop depth 0
;;    pred:       14
;;                15
;;                16
  # node_21 = PHI <node_28(D)(14), node_28(D)(15), node_46(16)>
  if (balance_40 < -1)
    goto <bb 18>; [0.00%]
  else
    goto <bb 20>; [0.00%]
;;    succ:       18
;;                20

;;   basic block 18, loop depth 0
;;    pred:       17
  _19 = node_21->right;
  _20 = _19->key;
  if (key_30(D) < _20)
    goto <bb 19>; [0.00%]
  else
    goto <bb 20>; [0.00%]
;;    succ:       19
;;                20

;;   basic block 19, loop depth 0
;;    pred:       18
  node_48 = RightLeftRotate (node_21);
;;    succ:       20

;;   basic block 20, loop depth 0
;;    pred:       17
;;                18
;;                19
  # node_22 = PHI <node_21(17), node_21(18), node_48(19)>
  _49 = node_22;
;;    succ:       21

;;   basic block 21, loop depth 0
;;    pred:       3
;;                10
;;                13
;;                20
  # _23 = PHI <_51(3), _42(10), _44(13), _49(20)>
<L23> [0.00%]:
  return _23;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; if (node_28(D) == 0B)

(insn 7 6 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])
            (const_int 0 [0]))) "test1.c":118 -1
     (nil))

(jump_insn 8 7 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":118 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; _51 = newNode (key_30(D));

(insn 10 9 11 (set (reg:SI 109)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [1 key+0 S4 A32])) "test1.c":119 -1
     (nil))

(insn 11 10 12 (set (reg:SI 5 di)
        (reg:SI 109)) "test1.c":119 -1
     (nil))

(call_insn 12 11 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("newNode") [flags 0x3]  <function_decl 0x7fddd77ea900 newNode>) [0 newNode S1 A8])
            (const_int 0 [0]))) "test1.c":119 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))

(insn 13 12 0 (set (reg/f:DI 107 [ _23 ])
        (reg:DI 0 ax)) "test1.c":119 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; 

(code_label 16 15 17 31 (nil) [0 uses])

(note 17 16 0 NOTE_INSN_BASIC_BLOCK)

;; _1 = node_28(D)->key;

(insn 18 17 19 (set (reg/f:DI 110)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":123 -1
     (nil))

(insn 19 18 0 (set (reg:SI 87 [ _1 ])
        (mem:SI (reg/f:DI 110) [1 node_28(D)->key+0 S4 A64])) "test1.c":123 -1
     (nil))

;; if (key_30(D) < _1)

(insn 20 19 21 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])) [1 key+0 S4 A32])
            (reg:SI 87 [ _1 ]))) "test1.c":123 -1
     (nil))

(jump_insn 21 20 0 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":123 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; _2 = node_28(D)->left;

(insn 23 22 24 (set (reg/f:DI 111)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":125 -1
     (nil))

(insn 24 23 0 (set (reg/f:DI 88 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 111)
                (const_int 8 [0x8])) [2 node_28(D)->left+0 S8 A64])) "test1.c":125 -1
     (nil))

;; _3 = insert (_2, key_30(D));

(insn 25 24 26 (set (reg:SI 112)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [1 key+0 S4 A32])) "test1.c":125 -1
     (nil))

(insn 26 25 27 (set (reg:SI 4 si)
        (reg:SI 112)) "test1.c":125 -1
     (nil))

(insn 27 26 28 (set (reg:DI 5 di)
        (reg/f:DI 88 [ _2 ])) "test1.c":125 -1
     (nil))

(call_insn 28 27 29 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("insert") [flags 0x3]  <function_decl 0x7fddd77eeb00 insert>) [0 insert S1 A8])
            (const_int 0 [0]))) "test1.c":125 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))

(insn 29 28 0 (set (reg/f:DI 89 [ _3 ])
        (reg:DI 0 ax)) "test1.c":125 -1
     (nil))

;; node_28(D)->left = _3;

(insn 30 29 31 (set (reg/f:DI 113)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":124 -1
     (nil))

(insn 31 30 0 (set (mem/f:DI (plus:DI (reg/f:DI 113)
                (const_int 8 [0x8])) [2 node_28(D)->left+0 S8 A64])
        (reg/f:DI 89 [ _3 ])) "test1.c":124 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; 

(code_label 34 33 35 33 (nil) [0 uses])

(note 35 34 0 NOTE_INSN_BASIC_BLOCK)

;; _4 = node_28(D)->key;

(insn 36 35 37 (set (reg/f:DI 114)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":126 -1
     (nil))

(insn 37 36 0 (set (reg:SI 90 [ _4 ])
        (mem:SI (reg/f:DI 114) [1 node_28(D)->key+0 S4 A64])) "test1.c":126 -1
     (nil))

;; if (key_30(D) > _4)

(insn 38 37 39 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])) [1 key+0 S4 A32])
            (reg:SI 90 [ _4 ]))) "test1.c":126 -1
     (nil))

(jump_insn 39 38 0 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":126 -1
     (nil))

;; Generating RTL for gimple basic block 7

;; _5 = node_28(D)->right;

(insn 41 40 42 (set (reg/f:DI 115)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":128 -1
     (nil))

(insn 42 41 0 (set (reg/f:DI 91 [ _5 ])
        (mem/f:DI (plus:DI (reg/f:DI 115)
                (const_int 16 [0x10])) [2 node_28(D)->right+0 S8 A64])) "test1.c":128 -1
     (nil))

;; _6 = insert (_5, key_30(D));

(insn 43 42 44 (set (reg:SI 116)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [1 key+0 S4 A32])) "test1.c":128 -1
     (nil))

(insn 44 43 45 (set (reg:SI 4 si)
        (reg:SI 116)) "test1.c":128 -1
     (nil))

(insn 45 44 46 (set (reg:DI 5 di)
        (reg/f:DI 91 [ _5 ])) "test1.c":128 -1
     (nil))

(call_insn 46 45 47 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("insert") [flags 0x3]  <function_decl 0x7fddd77eeb00 insert>) [0 insert S1 A8])
            (const_int 0 [0]))) "test1.c":128 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))

(insn 47 46 0 (set (reg/f:DI 92 [ _6 ])
        (reg:DI 0 ax)) "test1.c":128 -1
     (nil))

;; node_28(D)->right = _6;

(insn 48 47 49 (set (reg/f:DI 117)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":127 -1
     (nil))

(insn 49 48 0 (set (mem/f:DI (plus:DI (reg/f:DI 117)
                (const_int 16 [0x10])) [2 node_28(D)->right+0 S8 A64])
        (reg/f:DI 92 [ _6 ])) "test1.c":127 -1
     (nil))

;; Generating RTL for gimple basic block 8

;; 

(code_label 50 49 51 34 (nil) [0 uses])

(note 51 50 0 NOTE_INSN_BASIC_BLOCK)

;; _7 = node_28(D)->right;

(insn 52 51 53 (set (reg/f:DI 118)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":131 -1
     (nil))

(insn 53 52 0 (set (reg/f:DI 93 [ _7 ])
        (mem/f:DI (plus:DI (reg/f:DI 118)
                (const_int 16 [0x10])) [2 node_28(D)->right+0 S8 A64])) "test1.c":131 -1
     (nil))

;; _8 = nodeHeight (_7);

(insn 54 53 55 (set (reg:DI 5 di)
        (reg/f:DI 93 [ _7 ])) "test1.c":131 -1
     (nil))

(call_insn 55 54 56 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodeHeight") [flags 0x3]  <function_decl 0x7fddd77eab00 nodeHeight>) [0 nodeHeight S1 A8])
            (const_int 0 [0]))) "test1.c":131 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 56 55 0 (set (reg:SI 94 [ _8 ])
        (reg:SI 0 ax)) "test1.c":131 -1
     (nil))

;; _9 = node_28(D)->left;

(insn 57 56 58 (set (reg/f:DI 119)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":131 -1
     (nil))

(insn 58 57 0 (set (reg/f:DI 95 [ _9 ])
        (mem/f:DI (plus:DI (reg/f:DI 119)
                (const_int 8 [0x8])) [2 node_28(D)->left+0 S8 A64])) "test1.c":131 -1
     (nil))

;; _10 = nodeHeight (_9);

(insn 59 58 60 (set (reg:DI 5 di)
        (reg/f:DI 95 [ _9 ])) "test1.c":131 -1
     (nil))

(call_insn 60 59 61 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodeHeight") [flags 0x3]  <function_decl 0x7fddd77eab00 nodeHeight>) [0 nodeHeight S1 A8])
            (const_int 0 [0]))) "test1.c":131 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 61 60 0 (set (reg:SI 96 [ _10 ])
        (reg:SI 0 ax)) "test1.c":131 -1
     (nil))

;; _11 = max (_10, _8);

(insn 62 61 63 (set (reg:SI 4 si)
        (reg:SI 94 [ _8 ])) "test1.c":131 -1
     (nil))

(insn 63 62 64 (set (reg:SI 5 di)
        (reg:SI 96 [ _10 ])) "test1.c":131 -1
     (nil))

(call_insn 64 63 65 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("max") [flags 0x3]  <function_decl 0x7fddd77ea700 max>) [0 max S1 A8])
            (const_int 0 [0]))) "test1.c":131 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))

(insn 65 64 0 (set (reg:SI 97 [ _11 ])
        (reg:SI 0 ax)) "test1.c":131 -1
     (nil))

;; _12 = _11 + 1;

(insn 66 65 0 (parallel [
            (set (reg:SI 98 [ _12 ])
                (plus:SI (reg:SI 97 [ _11 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":131 -1
     (nil))

;; node_28(D)->height = _12;

(insn 67 66 68 (set (reg/f:DI 120)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":131 -1
     (nil))

(insn 68 67 0 (set (mem:SI (plus:DI (reg/f:DI 120)
                (const_int 24 [0x18])) [1 node_28(D)->height+0 S4 A64])
        (reg:SI 98 [ _12 ])) "test1.c":131 -1
     (nil))

;; balance_40 = heightDiff (node_28(D));

(insn 69 68 70 (set (reg:DI 121)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":134 -1
     (nil))

(insn 70 69 71 (set (reg:DI 5 di)
        (reg:DI 121)) "test1.c":134 -1
     (nil))

(call_insn 71 70 72 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("heightDiff") [flags 0x3]  <function_decl 0x7fddd77ead00 heightDiff>) [0 heightDiff S1 A8])
            (const_int 0 [0]))) "test1.c":134 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 72 71 73 (set (reg:SI 122)
        (reg:SI 0 ax)) "test1.c":134 -1
     (nil))

(insn 73 72 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 balance+0 S4 A32])
        (reg:SI 122)) "test1.c":134 -1
     (nil))

;; if (balance_40 > 1)

(insn 74 73 75 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 balance+0 S4 A32])
            (const_int 1 [0x1]))) "test1.c":137 -1
     (nil))

(jump_insn 75 74 0 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":137 -1
     (nil))

;; Generating RTL for gimple basic block 9

;; _13 = node_28(D)->left;

(insn 77 76 78 (set (reg/f:DI 123)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":137 -1
     (nil))

(insn 78 77 0 (set (reg/f:DI 99 [ _13 ])
        (mem/f:DI (plus:DI (reg/f:DI 123)
                (const_int 8 [0x8])) [2 node_28(D)->left+0 S8 A64])) "test1.c":137 -1
     (nil))

;; _14 = _13->key;

(insn 79 78 0 (set (reg:SI 100 [ _14 ])
        (mem:SI (reg/f:DI 99 [ _13 ]) [1 _13->key+0 S4 A64])) "test1.c":137 -1
     (nil))

;; if (key_30(D) < _14)

(insn 80 79 81 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])) [1 key+0 S4 A32])
            (reg:SI 100 [ _14 ]))) "test1.c":137 -1
     (nil))

(jump_insn 81 80 0 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":137 -1
     (nil))

;; Generating RTL for gimple basic block 10

;; _42 = rightRotate (node_28(D));

(insn 83 82 84 (set (reg:DI 124)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":138 -1
     (nil))

(insn 84 83 85 (set (reg:DI 5 di)
        (reg:DI 124)) "test1.c":138 -1
     (nil))

(call_insn 85 84 86 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("rightRotate") [flags 0x3]  <function_decl 0x7fddd77ee300 rightRotate>) [0 rightRotate S1 A8])
            (const_int 0 [0]))) "test1.c":138 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 86 85 0 (set (reg/f:DI 107 [ _23 ])
        (reg:DI 0 ax)) "test1.c":138 -1
     (nil))

;; Generating RTL for gimple basic block 11

;; 

(code_label 89 88 90 35 (nil) [0 uses])

(note 90 89 0 NOTE_INSN_BASIC_BLOCK)

;; if (balance_40 < -1)

(insn 91 90 92 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 balance+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))) "test1.c":141 -1
     (nil))

(jump_insn 92 91 0 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":141 -1
     (nil))

;; Generating RTL for gimple basic block 12

;; _15 = node_28(D)->right;

(insn 94 93 95 (set (reg/f:DI 125)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":141 -1
     (nil))

(insn 95 94 0 (set (reg/f:DI 101 [ _15 ])
        (mem/f:DI (plus:DI (reg/f:DI 125)
                (const_int 16 [0x10])) [2 node_28(D)->right+0 S8 A64])) "test1.c":141 -1
     (nil))

;; _16 = _15->key;

(insn 96 95 0 (set (reg:SI 102 [ _16 ])
        (mem:SI (reg/f:DI 101 [ _15 ]) [1 _15->key+0 S4 A64])) "test1.c":141 -1
     (nil))

;; if (key_30(D) > _16)

(insn 97 96 98 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])) [1 key+0 S4 A32])
            (reg:SI 102 [ _16 ]))) "test1.c":141 -1
     (nil))

(jump_insn 98 97 0 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":141 -1
     (nil))

;; Generating RTL for gimple basic block 13

;; _44 = leftRotate (node_28(D));

(insn 100 99 101 (set (reg:DI 126)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":142 -1
     (nil))

(insn 101 100 102 (set (reg:DI 5 di)
        (reg:DI 126)) "test1.c":142 -1
     (nil))

(call_insn 102 101 103 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("leftRotate") [flags 0x3]  <function_decl 0x7fddd77ee500 leftRotate>) [0 leftRotate S1 A8])
            (const_int 0 [0]))) "test1.c":142 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 103 102 0 (set (reg/f:DI 107 [ _23 ])
        (reg:DI 0 ax)) "test1.c":142 -1
     (nil))

;; Generating RTL for gimple basic block 14

;; 

(code_label 106 105 107 36 (nil) [0 uses])

(note 107 106 0 NOTE_INSN_BASIC_BLOCK)

;; if (balance_40 > 1)

(insn 108 107 109 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 balance+0 S4 A32])
            (const_int 1 [0x1]))) "test1.c":145 -1
     (nil))

(jump_insn 109 108 0 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":145 -1
     (nil))

;; Generating RTL for gimple basic block 15

;; _17 = node_28(D)->left;

(insn 111 110 112 (set (reg/f:DI 127)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":145 -1
     (nil))

(insn 112 111 0 (set (reg/f:DI 103 [ _17 ])
        (mem/f:DI (plus:DI (reg/f:DI 127)
                (const_int 8 [0x8])) [2 node_28(D)->left+0 S8 A64])) "test1.c":145 -1
     (nil))

;; _18 = _17->key;

(insn 113 112 0 (set (reg:SI 104 [ _18 ])
        (mem:SI (reg/f:DI 103 [ _17 ]) [1 _17->key+0 S4 A64])) "test1.c":145 -1
     (nil))

;; if (key_30(D) > _18)

(insn 114 113 115 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])) [1 key+0 S4 A32])
            (reg:SI 104 [ _18 ]))) "test1.c":145 -1
     (nil))

(jump_insn 115 114 0 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":145 -1
     (nil))

;; Generating RTL for gimple basic block 16

;; node_46 = LeftRightRotate (node_28(D));

(insn 117 116 118 (set (reg:DI 128)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":147 -1
     (nil))

(insn 118 117 119 (set (reg:DI 5 di)
        (reg:DI 128)) "test1.c":147 -1
     (nil))

(call_insn 119 118 120 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("LeftRightRotate") [flags 0x3]  <function_decl 0x7fddd77ee700 LeftRightRotate>) [0 LeftRightRotate S1 A8])
            (const_int 0 [0]))) "test1.c":147 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 120 119 121 (set (reg:DI 129)
        (reg:DI 0 ax)) "test1.c":147 -1
     (nil))

(insn 121 120 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])
        (reg:DI 129)) "test1.c":147 -1
     (nil))

;; Generating RTL for gimple basic block 17

;; 

(code_label 122 121 123 37 (nil) [0 uses])

(note 123 122 0 NOTE_INSN_BASIC_BLOCK)

;; if (balance_40 < -1)

(insn 124 123 125 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 balance+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))) "test1.c":151 -1
     (nil))

(jump_insn 125 124 0 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":151 -1
     (nil))

;; Generating RTL for gimple basic block 18

;; _19 = node_21->right;

(insn 127 126 128 (set (reg/f:DI 130)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":151 -1
     (nil))

(insn 128 127 0 (set (reg/f:DI 105 [ _19 ])
        (mem/f:DI (plus:DI (reg/f:DI 130)
                (const_int 16 [0x10])) [2 node_21->right+0 S8 A64])) "test1.c":151 -1
     (nil))

;; _20 = _19->key;

(insn 129 128 0 (set (reg:SI 106 [ _20 ])
        (mem:SI (reg/f:DI 105 [ _19 ]) [1 _19->key+0 S4 A64])) "test1.c":151 -1
     (nil))

;; if (key_30(D) < _20)

(insn 130 129 131 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])) [1 key+0 S4 A32])
            (reg:SI 106 [ _20 ]))) "test1.c":151 -1
     (nil))

(jump_insn 131 130 0 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":151 -1
     (nil))

;; Generating RTL for gimple basic block 19

;; node_48 = RightLeftRotate (node_21);

(insn 133 132 134 (set (reg:DI 131)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":153 -1
     (nil))

(insn 134 133 135 (set (reg:DI 5 di)
        (reg:DI 131)) "test1.c":153 -1
     (nil))

(call_insn 135 134 136 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("RightLeftRotate") [flags 0x3]  <function_decl 0x7fddd77ee900 RightLeftRotate>) [0 RightLeftRotate S1 A8])
            (const_int 0 [0]))) "test1.c":153 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 136 135 137 (set (reg:DI 132)
        (reg:DI 0 ax)) "test1.c":153 -1
     (nil))

(insn 137 136 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])
        (reg:DI 132)) "test1.c":153 -1
     (nil))

;; Generating RTL for gimple basic block 20

;; 

(code_label 138 137 139 38 (nil) [0 uses])

(note 139 138 0 NOTE_INSN_BASIC_BLOCK)

;; _49 = node_22;

(insn 140 139 0 (set (reg/f:DI 107 [ _23 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":156 -1
     (nil))

;; Generating RTL for gimple basic block 21

;; <L23> [0.00%]:

(code_label 141 140 142 32 (nil) [0 uses])

(note 142 141 0 NOTE_INSN_BASIC_BLOCK)

;; return _23;

(insn 143 142 144 (set (reg/f:DI 108 [ <retval> ])
        (reg/f:DI 107 [ _23 ])) -1
     (nil))

(jump_insn 144 143 145 (set (pc)
        (label_ref 0)) -1
     (nil))

(barrier 145 144 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Removing jump 144.
Merging block 23 into block 22...
Merged blocks 22 and 23.
Merged 22 and 23 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])
        (reg:DI 5 di [ node ])) "test1.c":117 -1
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [1 key+0 S4 A32])
        (reg:SI 4 si [ key ])) "test1.c":117 -1
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])
            (const_int 0 [0]))) "test1.c":118 -1
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 16)
            (pc))) "test1.c":118 -1
     (nil)
 -> 16)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 9 8 10 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 4 (set (reg:SI 109)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [1 key+0 S4 A32])) "test1.c":119 -1
     (nil))
(insn 11 10 12 4 (set (reg:SI 5 di)
        (reg:SI 109)) "test1.c":119 -1
     (nil))
(call_insn 12 11 13 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("newNode") [flags 0x3]  <function_decl 0x7fddd77ea900 newNode>) [0 newNode S1 A8])
            (const_int 0 [0]))) "test1.c":119 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 13 12 14 4 (set (reg/f:DI 107 [ _23 ])
        (reg:DI 0 ax)) "test1.c":119 -1
     (nil))
(jump_insn 14 13 15 4 (set (pc)
        (label_ref 141)) "test1.c":119 -1
     (nil)
 -> 141)
;;  succ:       22

(barrier 15 14 16)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 16 15 17 5 31 (nil) [1 uses])
(note 17 16 18 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 5 (set (reg/f:DI 110)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":123 -1
     (nil))
(insn 19 18 20 5 (set (reg:SI 87 [ _1 ])
        (mem:SI (reg/f:DI 110) [1 node_28(D)->key+0 S4 A64])) "test1.c":123 -1
     (nil))
(insn 20 19 21 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])) [1 key+0 S4 A32])
            (reg:SI 87 [ _1 ]))) "test1.c":123 -1
     (nil))
(jump_insn 21 20 22 5 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) "test1.c":123 -1
     (nil)
 -> 34)
;;  succ:       6 (FALLTHRU)
;;              7

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 22 21 23 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 6 (set (reg/f:DI 111)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":125 -1
     (nil))
(insn 24 23 25 6 (set (reg/f:DI 88 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 111)
                (const_int 8 [0x8])) [2 node_28(D)->left+0 S8 A64])) "test1.c":125 -1
     (nil))
(insn 25 24 26 6 (set (reg:SI 112)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [1 key+0 S4 A32])) "test1.c":125 -1
     (nil))
(insn 26 25 27 6 (set (reg:SI 4 si)
        (reg:SI 112)) "test1.c":125 -1
     (nil))
(insn 27 26 28 6 (set (reg:DI 5 di)
        (reg/f:DI 88 [ _2 ])) "test1.c":125 -1
     (nil))
(call_insn 28 27 29 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("insert") [flags 0x3]  <function_decl 0x7fddd77eeb00 insert>) [0 insert S1 A8])
            (const_int 0 [0]))) "test1.c":125 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 29 28 30 6 (set (reg/f:DI 89 [ _3 ])
        (reg:DI 0 ax)) "test1.c":125 -1
     (nil))
(insn 30 29 31 6 (set (reg/f:DI 113)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":124 -1
     (nil))
(insn 31 30 32 6 (set (mem/f:DI (plus:DI (reg/f:DI 113)
                (const_int 8 [0x8])) [2 node_28(D)->left+0 S8 A64])
        (reg/f:DI 89 [ _3 ])) "test1.c":124 -1
     (nil))
(jump_insn 32 31 33 6 (set (pc)
        (label_ref 50)) -1
     (nil)
 -> 50)
;;  succ:       9

(barrier 33 32 34)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
(code_label 34 33 35 7 33 (nil) [1 uses])
(note 35 34 36 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 7 (set (reg/f:DI 114)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":126 -1
     (nil))
(insn 37 36 38 7 (set (reg:SI 90 [ _4 ])
        (mem:SI (reg/f:DI 114) [1 node_28(D)->key+0 S4 A64])) "test1.c":126 -1
     (nil))
(insn 38 37 39 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])) [1 key+0 S4 A32])
            (reg:SI 90 [ _4 ]))) "test1.c":126 -1
     (nil))
(jump_insn 39 38 40 7 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) "test1.c":126 -1
     (nil)
 -> 50)
;;  succ:       8 (FALLTHRU)
;;              9

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 (FALLTHRU)
(note 40 39 41 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 42 8 (set (reg/f:DI 115)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":128 -1
     (nil))
(insn 42 41 43 8 (set (reg/f:DI 91 [ _5 ])
        (mem/f:DI (plus:DI (reg/f:DI 115)
                (const_int 16 [0x10])) [2 node_28(D)->right+0 S8 A64])) "test1.c":128 -1
     (nil))
(insn 43 42 44 8 (set (reg:SI 116)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [1 key+0 S4 A32])) "test1.c":128 -1
     (nil))
(insn 44 43 45 8 (set (reg:SI 4 si)
        (reg:SI 116)) "test1.c":128 -1
     (nil))
(insn 45 44 46 8 (set (reg:DI 5 di)
        (reg/f:DI 91 [ _5 ])) "test1.c":128 -1
     (nil))
(call_insn 46 45 47 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("insert") [flags 0x3]  <function_decl 0x7fddd77eeb00 insert>) [0 insert S1 A8])
            (const_int 0 [0]))) "test1.c":128 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 47 46 48 8 (set (reg/f:DI 92 [ _6 ])
        (reg:DI 0 ax)) "test1.c":128 -1
     (nil))
(insn 48 47 49 8 (set (reg/f:DI 117)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":127 -1
     (nil))
(insn 49 48 50 8 (set (mem/f:DI (plus:DI (reg/f:DI 117)
                (const_int 16 [0x10])) [2 node_28(D)->right+0 S8 A64])
        (reg/f:DI 92 [ _6 ])) "test1.c":127 -1
     (nil))
;;  succ:       9 (FALLTHRU)

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       6
;;              7
;;              8 (FALLTHRU)
(code_label 50 49 51 9 34 (nil) [2 uses])
(note 51 50 52 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 9 (set (reg/f:DI 118)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":131 -1
     (nil))
(insn 53 52 54 9 (set (reg/f:DI 93 [ _7 ])
        (mem/f:DI (plus:DI (reg/f:DI 118)
                (const_int 16 [0x10])) [2 node_28(D)->right+0 S8 A64])) "test1.c":131 -1
     (nil))
(insn 54 53 55 9 (set (reg:DI 5 di)
        (reg/f:DI 93 [ _7 ])) "test1.c":131 -1
     (nil))
(call_insn 55 54 56 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodeHeight") [flags 0x3]  <function_decl 0x7fddd77eab00 nodeHeight>) [0 nodeHeight S1 A8])
            (const_int 0 [0]))) "test1.c":131 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 56 55 57 9 (set (reg:SI 94 [ _8 ])
        (reg:SI 0 ax)) "test1.c":131 -1
     (nil))
(insn 57 56 58 9 (set (reg/f:DI 119)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":131 -1
     (nil))
(insn 58 57 59 9 (set (reg/f:DI 95 [ _9 ])
        (mem/f:DI (plus:DI (reg/f:DI 119)
                (const_int 8 [0x8])) [2 node_28(D)->left+0 S8 A64])) "test1.c":131 -1
     (nil))
(insn 59 58 60 9 (set (reg:DI 5 di)
        (reg/f:DI 95 [ _9 ])) "test1.c":131 -1
     (nil))
(call_insn 60 59 61 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodeHeight") [flags 0x3]  <function_decl 0x7fddd77eab00 nodeHeight>) [0 nodeHeight S1 A8])
            (const_int 0 [0]))) "test1.c":131 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 61 60 62 9 (set (reg:SI 96 [ _10 ])
        (reg:SI 0 ax)) "test1.c":131 -1
     (nil))
(insn 62 61 63 9 (set (reg:SI 4 si)
        (reg:SI 94 [ _8 ])) "test1.c":131 -1
     (nil))
(insn 63 62 64 9 (set (reg:SI 5 di)
        (reg:SI 96 [ _10 ])) "test1.c":131 -1
     (nil))
(call_insn 64 63 65 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("max") [flags 0x3]  <function_decl 0x7fddd77ea700 max>) [0 max S1 A8])
            (const_int 0 [0]))) "test1.c":131 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 65 64 66 9 (set (reg:SI 97 [ _11 ])
        (reg:SI 0 ax)) "test1.c":131 -1
     (nil))
(insn 66 65 67 9 (parallel [
            (set (reg:SI 98 [ _12 ])
                (plus:SI (reg:SI 97 [ _11 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":131 -1
     (nil))
(insn 67 66 68 9 (set (reg/f:DI 120)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":131 -1
     (nil))
(insn 68 67 69 9 (set (mem:SI (plus:DI (reg/f:DI 120)
                (const_int 24 [0x18])) [1 node_28(D)->height+0 S4 A64])
        (reg:SI 98 [ _12 ])) "test1.c":131 -1
     (nil))
(insn 69 68 70 9 (set (reg:DI 121)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":134 -1
     (nil))
(insn 70 69 71 9 (set (reg:DI 5 di)
        (reg:DI 121)) "test1.c":134 -1
     (nil))
(call_insn 71 70 72 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("heightDiff") [flags 0x3]  <function_decl 0x7fddd77ead00 heightDiff>) [0 heightDiff S1 A8])
            (const_int 0 [0]))) "test1.c":134 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 72 71 73 9 (set (reg:SI 122)
        (reg:SI 0 ax)) "test1.c":134 -1
     (nil))
(insn 73 72 74 9 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 balance+0 S4 A32])
        (reg:SI 122)) "test1.c":134 -1
     (nil))
(insn 74 73 75 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 balance+0 S4 A32])
            (const_int 1 [0x1]))) "test1.c":137 -1
     (nil))
(jump_insn 75 74 76 9 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 89)
            (pc))) "test1.c":137 -1
     (nil)
 -> 89)
;;  succ:       10 (FALLTHRU)
;;              12

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL)
;;  pred:       9 (FALLTHRU)
(note 76 75 77 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 10 (set (reg/f:DI 123)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":137 -1
     (nil))
(insn 78 77 79 10 (set (reg/f:DI 99 [ _13 ])
        (mem/f:DI (plus:DI (reg/f:DI 123)
                (const_int 8 [0x8])) [2 node_28(D)->left+0 S8 A64])) "test1.c":137 -1
     (nil))
(insn 79 78 80 10 (set (reg:SI 100 [ _14 ])
        (mem:SI (reg/f:DI 99 [ _13 ]) [1 _13->key+0 S4 A64])) "test1.c":137 -1
     (nil))
(insn 80 79 81 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])) [1 key+0 S4 A32])
            (reg:SI 100 [ _14 ]))) "test1.c":137 -1
     (nil))
(jump_insn 81 80 82 10 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 89)
            (pc))) "test1.c":137 -1
     (nil)
 -> 89)
;;  succ:       11 (FALLTHRU)
;;              12

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL)
;;  pred:       10 (FALLTHRU)
(note 82 81 83 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 11 (set (reg:DI 124)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":138 -1
     (nil))
(insn 84 83 85 11 (set (reg:DI 5 di)
        (reg:DI 124)) "test1.c":138 -1
     (nil))
(call_insn 85 84 86 11 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("rightRotate") [flags 0x3]  <function_decl 0x7fddd77ee300 rightRotate>) [0 rightRotate S1 A8])
            (const_int 0 [0]))) "test1.c":138 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 86 85 87 11 (set (reg/f:DI 107 [ _23 ])
        (reg:DI 0 ax)) "test1.c":138 -1
     (nil))
(jump_insn 87 86 88 11 (set (pc)
        (label_ref 141)) "test1.c":138 -1
     (nil)
 -> 141)
;;  succ:       22

(barrier 88 87 89)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL)
;;  pred:       9
;;              10
(code_label 89 88 90 12 35 (nil) [2 uses])
(note 90 89 91 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 92 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 balance+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))) "test1.c":141 -1
     (nil))
(jump_insn 92 91 93 12 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 106)
            (pc))) "test1.c":141 -1
     (nil)
 -> 106)
;;  succ:       13 (FALLTHRU)
;;              15

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL)
;;  pred:       12 (FALLTHRU)
(note 93 92 94 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 94 93 95 13 (set (reg/f:DI 125)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":141 -1
     (nil))
(insn 95 94 96 13 (set (reg/f:DI 101 [ _15 ])
        (mem/f:DI (plus:DI (reg/f:DI 125)
                (const_int 16 [0x10])) [2 node_28(D)->right+0 S8 A64])) "test1.c":141 -1
     (nil))
(insn 96 95 97 13 (set (reg:SI 102 [ _16 ])
        (mem:SI (reg/f:DI 101 [ _15 ]) [1 _15->key+0 S4 A64])) "test1.c":141 -1
     (nil))
(insn 97 96 98 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])) [1 key+0 S4 A32])
            (reg:SI 102 [ _16 ]))) "test1.c":141 -1
     (nil))
(jump_insn 98 97 99 13 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 106)
            (pc))) "test1.c":141 -1
     (nil)
 -> 106)
;;  succ:       14 (FALLTHRU)
;;              15

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL)
;;  pred:       13 (FALLTHRU)
(note 99 98 100 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 14 (set (reg:DI 126)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":142 -1
     (nil))
(insn 101 100 102 14 (set (reg:DI 5 di)
        (reg:DI 126)) "test1.c":142 -1
     (nil))
(call_insn 102 101 103 14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("leftRotate") [flags 0x3]  <function_decl 0x7fddd77ee500 leftRotate>) [0 leftRotate S1 A8])
            (const_int 0 [0]))) "test1.c":142 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 103 102 104 14 (set (reg/f:DI 107 [ _23 ])
        (reg:DI 0 ax)) "test1.c":142 -1
     (nil))
(jump_insn 104 103 105 14 (set (pc)
        (label_ref 141)) "test1.c":142 -1
     (nil)
 -> 141)
;;  succ:       22

(barrier 105 104 106)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL)
;;  pred:       12
;;              13
(code_label 106 105 107 15 36 (nil) [2 uses])
(note 107 106 108 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 108 107 109 15 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 balance+0 S4 A32])
            (const_int 1 [0x1]))) "test1.c":145 -1
     (nil))
(jump_insn 109 108 110 15 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 122)
            (pc))) "test1.c":145 -1
     (nil)
 -> 122)
;;  succ:       16 (FALLTHRU)
;;              18

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL)
;;  pred:       15 (FALLTHRU)
(note 110 109 111 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 111 110 112 16 (set (reg/f:DI 127)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":145 -1
     (nil))
(insn 112 111 113 16 (set (reg/f:DI 103 [ _17 ])
        (mem/f:DI (plus:DI (reg/f:DI 127)
                (const_int 8 [0x8])) [2 node_28(D)->left+0 S8 A64])) "test1.c":145 -1
     (nil))
(insn 113 112 114 16 (set (reg:SI 104 [ _18 ])
        (mem:SI (reg/f:DI 103 [ _17 ]) [1 _17->key+0 S4 A64])) "test1.c":145 -1
     (nil))
(insn 114 113 115 16 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])) [1 key+0 S4 A32])
            (reg:SI 104 [ _18 ]))) "test1.c":145 -1
     (nil))
(jump_insn 115 114 116 16 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 122)
            (pc))) "test1.c":145 -1
     (nil)
 -> 122)
;;  succ:       17 (FALLTHRU)
;;              18

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL)
;;  pred:       16 (FALLTHRU)
(note 116 115 117 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 118 17 (set (reg:DI 128)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":147 -1
     (nil))
(insn 118 117 119 17 (set (reg:DI 5 di)
        (reg:DI 128)) "test1.c":147 -1
     (nil))
(call_insn 119 118 120 17 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("LeftRightRotate") [flags 0x3]  <function_decl 0x7fddd77ee700 LeftRightRotate>) [0 LeftRightRotate S1 A8])
            (const_int 0 [0]))) "test1.c":147 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 120 119 121 17 (set (reg:DI 129)
        (reg:DI 0 ax)) "test1.c":147 -1
     (nil))
(insn 121 120 122 17 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])
        (reg:DI 129)) "test1.c":147 -1
     (nil))
;;  succ:       18 (FALLTHRU)

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL)
;;  pred:       15
;;              16
;;              17 (FALLTHRU)
(code_label 122 121 123 18 37 (nil) [2 uses])
(note 123 122 124 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 124 123 125 18 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 balance+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))) "test1.c":151 -1
     (nil))
(jump_insn 125 124 126 18 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 138)
            (pc))) "test1.c":151 -1
     (nil)
 -> 138)
;;  succ:       19 (FALLTHRU)
;;              21

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL)
;;  pred:       18 (FALLTHRU)
(note 126 125 127 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 127 126 128 19 (set (reg/f:DI 130)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":151 -1
     (nil))
(insn 128 127 129 19 (set (reg/f:DI 105 [ _19 ])
        (mem/f:DI (plus:DI (reg/f:DI 130)
                (const_int 16 [0x10])) [2 node_21->right+0 S8 A64])) "test1.c":151 -1
     (nil))
(insn 129 128 130 19 (set (reg:SI 106 [ _20 ])
        (mem:SI (reg/f:DI 105 [ _19 ]) [1 _19->key+0 S4 A64])) "test1.c":151 -1
     (nil))
(insn 130 129 131 19 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])) [1 key+0 S4 A32])
            (reg:SI 106 [ _20 ]))) "test1.c":151 -1
     (nil))
(jump_insn 131 130 132 19 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 138)
            (pc))) "test1.c":151 -1
     (nil)
 -> 138)
;;  succ:       20 (FALLTHRU)
;;              21

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL)
;;  pred:       19 (FALLTHRU)
(note 132 131 133 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 133 132 134 20 (set (reg:DI 131)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":153 -1
     (nil))
(insn 134 133 135 20 (set (reg:DI 5 di)
        (reg:DI 131)) "test1.c":153 -1
     (nil))
(call_insn 135 134 136 20 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("RightLeftRotate") [flags 0x3]  <function_decl 0x7fddd77ee900 RightLeftRotate>) [0 RightLeftRotate S1 A8])
            (const_int 0 [0]))) "test1.c":153 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 136 135 137 20 (set (reg:DI 132)
        (reg:DI 0 ax)) "test1.c":153 -1
     (nil))
(insn 137 136 138 20 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])
        (reg:DI 132)) "test1.c":153 -1
     (nil))
;;  succ:       21 (FALLTHRU)

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL)
;;  pred:       18
;;              19
;;              20 (FALLTHRU)
(code_label 138 137 139 21 38 (nil) [2 uses])
(note 139 138 140 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 140 139 141 21 (set (reg/f:DI 107 [ _23 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 node+0 S8 A64])) "test1.c":156 -1
     (nil))
;;  succ:       22 (FALLTHRU)

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
;;              11
;;              14
;;              21 (FALLTHRU)
(code_label 141 140 142 22 32 (nil) [3 uses])
(note 142 141 143 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 143 142 147 22 (set (reg/f:DI 108 [ <retval> ])
        (reg/f:DI 107 [ _23 ])) -1
     (nil))
(insn 147 143 148 22 (set (reg/i:DI 0 ax)
        (reg/f:DI 108 [ <retval> ])) "test1.c":157 -1
     (nil))
(insn 148 147 0 22 (use (reg/i:DI 0 ax)) "test1.c":157 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function delete (delete, funcdef_no=16, decl_uid=2819, cgraph_uid=16, symbol_order=16)

delete (struct avlNode * node, int queryNum)
{
  struct avlNode * temp;
  struct avlNode * temp;
  int balance;
  struct AVLnode * iftmp.0;
  struct avlNode * D.2913;
  int _1;
  struct AVLnode * _2;
  struct avlNode * _3;
  int _4;
  struct AVLnode * _5;
  struct avlNode * _6;
  struct AVLnode * _7;
  struct AVLnode * _8;
  struct AVLnode * _9;
  struct AVLnode * _10;
  int _11;
  int _12;
  struct AVLnode * _13;
  struct avlNode * _14;
  struct AVLnode * _15;
  int _16;
  struct AVLnode * _17;
  int _18;
  int _19;
  int _20;
  struct AVLnode * _21;
  int _22;
  struct AVLnode * _23;
  int _24;
  struct AVLnode * _25;
  int _26;
  struct AVLnode * _27;
  int _28;
  struct avlNode * _34;
  struct AVLnode * iftmp.0_35;
  struct AVLnode * iftmp.0_51;
  struct AVLnode * iftmp.0_52;
  struct avlNode * _70;
  struct avlNode * _76;
  struct avlNode * _80;
  struct avlNode * _81;
  struct avlNode * _82;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (node_43(D) == 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  _82 = node_43(D);
  goto <bb 33> (<L36>); [0.00%]
;;    succ:       33

;;   basic block 4, loop depth 0
;;    pred:       2
  _1 = node_43(D)->key;
  if (queryNum_45(D) < _1)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]
;;    succ:       5
;;                6

;;   basic block 5, loop depth 0
;;    pred:       4
  _2 = node_43(D)->left;
  _3 = delete (_2, queryNum_45(D));
  node_43(D)->left = _3;
  goto <bb 18>; [0.00%]
;;    succ:       18

;;   basic block 6, loop depth 0
;;    pred:       4
  _4 = node_43(D)->key;
  if (queryNum_45(D) > _4)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]
;;    succ:       7
;;                8

;;   basic block 7, loop depth 0
;;    pred:       6
  _5 = node_43(D)->right;
  _6 = delete (_5, queryNum_45(D));
  node_43(D)->right = _6;
  goto <bb 18>; [0.00%]
;;    succ:       18

;;   basic block 8, loop depth 0
;;    pred:       6
  _7 = node_43(D)->left;
  if (_7 == 0B)
    goto <bb 10>; [0.00%]
  else
    goto <bb 9>; [0.00%]
;;    succ:       10
;;                9

;;   basic block 9, loop depth 0
;;    pred:       8
  _8 = node_43(D)->right;
  if (_8 == 0B)
    goto <bb 10>; [0.00%]
  else
    goto <bb 17>; [0.00%]
;;    succ:       10
;;                17

;;   basic block 10, loop depth 0
;;    pred:       8
;;                9
  _9 = node_43(D)->left;
  if (_9 != 0B)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]
;;    succ:       11
;;                12

;;   basic block 11, loop depth 0
;;    pred:       10
  iftmp.0_52 = node_43(D)->left;
  goto <bb 13>; [0.00%]
;;    succ:       13

;;   basic block 12, loop depth 0
;;    pred:       10
  iftmp.0_51 = node_43(D)->right;
;;    succ:       13

;;   basic block 13, loop depth 0
;;    pred:       11
;;                12
  # iftmp.0_35 = PHI <iftmp.0_52(11), iftmp.0_51(12)>
  temp_53 = iftmp.0_35;
  if (temp_53 == 0B)
    goto <bb 14>; [0.00%]
  else
    goto <bb 15>; [0.00%]
;;    succ:       14
;;                15

;;   basic block 14, loop depth 0
;;    pred:       13
  temp_55 = node_43(D);
  node_56 = 0B;
  goto <bb 16>; [0.00%]
;;    succ:       16

;;   basic block 15, loop depth 0
;;    pred:       13
  *node_43(D) = *temp_53;
;;    succ:       16

;;   basic block 16, loop depth 0
;;    pred:       14
;;                15
  # node_29 = PHI <node_56(14), node_43(D)(15)>
  # temp_33 = PHI <temp_55(14), temp_53(15)>
  free (temp_33);
  goto <bb 18>; [0.00%]
;;    succ:       18

;;   basic block 17, loop depth 0
;;    pred:       9
  _10 = node_43(D)->right;
  temp_47 = minNode (_10);
  _11 = temp_47->key;
  node_43(D)->key = _11;
  _12 = temp_47->key;
  _13 = node_43(D)->right;
  _14 = delete (_13, _12);
  node_43(D)->right = _14;
;;    succ:       18

;;   basic block 18, loop depth 0
;;    pred:       5
;;                7
;;                16
;;                17
  # node_30 = PHI <node_43(D)(5), node_43(D)(7), node_29(16), node_43(D)(17)>
  if (node_30 == 0B)
    goto <bb 19>; [0.00%]
  else
    goto <bb 20>; [0.00%]
;;    succ:       19
;;                20

;;   basic block 19, loop depth 0
;;    pred:       18
  _81 = node_30;
  goto <bb 33> (<L36>); [0.00%]
;;    succ:       33

;;   basic block 20, loop depth 0
;;    pred:       18
  _15 = node_30->right;
  _16 = nodeHeight (_15);
  _17 = node_30->left;
  _18 = nodeHeight (_17);
  _19 = max (_18, _16);
  _20 = _19 + 1;
  node_30->height = _20;
  balance_67 = heightDiff (node_30);
  if (balance_67 > 1)
    goto <bb 21>; [0.00%]
  else
    goto <bb 23>; [0.00%]
;;    succ:       21
;;                23

;;   basic block 21, loop depth 0
;;    pred:       20
  _21 = node_30->left;
  _22 = heightDiff (_21);
  if (_22 >= 0)
    goto <bb 22>; [0.00%]
  else
    goto <bb 23>; [0.00%]
;;    succ:       22
;;                23

;;   basic block 22, loop depth 0
;;    pred:       21
  _70 = rightRotate (node_30);
  goto <bb 33> (<L36>); [0.00%]
;;    succ:       33

;;   basic block 23, loop depth 0
;;    pred:       20
;;                21
  if (balance_67 > 1)
    goto <bb 24>; [0.00%]
  else
    goto <bb 26>; [0.00%]
;;    succ:       24
;;                26

;;   basic block 24, loop depth 0
;;    pred:       23
  _23 = node_30->left;
  _24 = heightDiff (_23);
  if (_24 < 0)
    goto <bb 25>; [0.00%]
  else
    goto <bb 26>; [0.00%]
;;    succ:       25
;;                26

;;   basic block 25, loop depth 0
;;    pred:       24
  node_73 = LeftRightRotate (node_30);
;;    succ:       26

;;   basic block 26, loop depth 0
;;    pred:       23
;;                24
;;                25
  # node_31 = PHI <node_30(23), node_30(24), node_73(25)>
  if (balance_67 < -1)
    goto <bb 27>; [0.00%]
  else
    goto <bb 29>; [0.00%]
;;    succ:       27
;;                29

;;   basic block 27, loop depth 0
;;    pred:       26
  _25 = node_31->right;
  _26 = heightDiff (_25);
  if (_26 >= 0)
    goto <bb 28>; [0.00%]
  else
    goto <bb 29>; [0.00%]
;;    succ:       28
;;                29

;;   basic block 28, loop depth 0
;;    pred:       27
  _76 = leftRotate (node_31);
  goto <bb 33> (<L36>); [0.00%]
;;    succ:       33

;;   basic block 29, loop depth 0
;;    pred:       26
;;                27
  if (balance_67 < -1)
    goto <bb 30>; [0.00%]
  else
    goto <bb 32>; [0.00%]
;;    succ:       30
;;                32

;;   basic block 30, loop depth 0
;;    pred:       29
  _27 = node_31->right;
  _28 = heightDiff (_27);
  if (_28 < 0)
    goto <bb 31>; [0.00%]
  else
    goto <bb 32>; [0.00%]
;;    succ:       31
;;                32

;;   basic block 31, loop depth 0
;;    pred:       30
  node_79 = RightLeftRotate (node_31);
;;    succ:       32

;;   basic block 32, loop depth 0
;;    pred:       29
;;                30
;;                31
  # node_32 = PHI <node_31(29), node_31(30), node_79(31)>
  _80 = node_32;
;;    succ:       33

;;   basic block 33, loop depth 0
;;    pred:       3
;;                19
;;                22
;;                28
;;                32
  # _34 = PHI <_82(3), _81(19), _70(22), _76(28), _80(32)>
<L36> [0.00%]:
  return _34;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (_5 - 5 )
Partition 6 (_6 - 6 )
Partition 7 (_7 - 7 )
Partition 8 (_8 - 8 )
Partition 9 (_9 - 9 )
Partition 10 (_10 - 10 )
Partition 11 (_11 - 11 )
Partition 12 (_12 - 12 )
Partition 13 (_13 - 13 )
Partition 14 (_14 - 14 )
Partition 15 (_15 - 15 )
Partition 16 (_16 - 16 )
Partition 17 (_17 - 17 )
Partition 18 (_18 - 18 )
Partition 19 (_19 - 19 )
Partition 20 (_20 - 20 )
Partition 21 (_21 - 21 )
Partition 22 (_22 - 22 )
Partition 23 (_23 - 23 )
Partition 24 (_24 - 24 )
Partition 25 (_25 - 25 )
Partition 26 (_26 - 26 )
Partition 27 (_27 - 27 )
Partition 28 (_28 - 28 )
Partition 29 (node_29 - 29 )
Partition 30 (node_30 - 30 )
Partition 31 (node_31 - 31 )
Partition 32 (node_32 - 32 )
Partition 33 (temp_33 - 33 )
Partition 34 (_34 - 34 )
Partition 35 (iftmp.0_35 - 35 )
Partition 43 (node_43(D) - 43 )
Partition 45 (queryNum_45(D) - 45 )
Partition 47 (temp_47 - 47 )
Partition 51 (iftmp.0_51 - 51 )
Partition 52 (iftmp.0_52 - 52 )
Partition 53 (temp_53 - 53 )
Partition 55 (temp_55 - 55 )
Partition 56 (node_56 - 56 )
Partition 67 (balance_67 - 67 )
Partition 70 (_70 - 70 )
Partition 73 (node_73 - 73 )
Partition 76 (_76 - 76 )
Partition 79 (node_79 - 79 )
Partition 80 (_80 - 80 )
Partition 81 (_81 - 81 )
Partition 82 (_82 - 82 )
Partition 83 (_83(D) - 83 )


Partition map 

Partition 0 (node_29 - 29 )
Partition 1 (node_30 - 30 )
Partition 2 (node_31 - 31 )
Partition 3 (node_32 - 32 )
Partition 4 (temp_33 - 33 )
Partition 5 (_34 - 34 )
Partition 6 (iftmp.0_35 - 35 )
Partition 7 (node_43(D) - 43 )
Partition 8 (queryNum_45(D) - 45 )
Partition 9 (iftmp.0_51 - 51 )
Partition 10 (iftmp.0_52 - 52 )
Partition 11 (temp_53 - 53 )
Partition 12 (temp_55 - 55 )
Partition 13 (node_56 - 56 )
Partition 14 (_70 - 70 )
Partition 15 (node_73 - 73 )
Partition 16 (_76 - 76 )
Partition 17 (node_79 - 79 )
Partition 18 (_80 - 80 )
Partition 19 (_81 - 81 )
Partition 20 (_82 - 82 )
Partition 21 (_83(D) - 83 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483647, 0) node_29 <-> node_43(D)
(2147483647, 0) node_29 <-> node_30
(2147483647, 0) node_29 <-> node_31
(2147483647, 0) node_29 <-> node_32
(2147483647, 0) node_29 <-> node_56
(2147483647, 0) node_29 <-> node_73
(2147483647, 0) node_29 <-> node_79
(2147483646, 0) temp_33 <-> temp_53
(2147483646, 0) temp_33 <-> temp_55
(4, 0) node_30 <-> node_31
(4, 0) node_31 <-> node_32
(3, 0) node_30 <-> node_43(D)

Partition map 

Partition 0 (node_29 - 29 )
Partition 1 (node_30 - 30 )
Partition 2 (node_31 - 31 )
Partition 3 (node_32 - 32 )
Partition 4 (temp_33 - 33 )
Partition 5 (_34 - 34 )
Partition 6 (iftmp.0_35 - 35 )
Partition 7 (node_43(D) - 43 )
Partition 8 (queryNum_45(D) - 45 )
Partition 9 (iftmp.0_51 - 51 )
Partition 10 (iftmp.0_52 - 52 )
Partition 11 (temp_53 - 53 )
Partition 12 (temp_55 - 55 )
Partition 13 (node_56 - 56 )
Partition 14 (_70 - 70 )
Partition 15 (node_73 - 73 )
Partition 16 (_76 - 76 )
Partition 17 (node_79 - 79 )
Partition 18 (_80 - 80 )
Partition 19 (_81 - 81 )
Partition 20 (_82 - 82 )
Partition 21 (_83(D) - 83 )

Coalesce list: (29)node_29 & (43)node_43(D) [map: 0, 7] : Success -> 0
Coalesce list: (29)node_29 & (30)node_30 [map: 0, 1] : Success -> 0
Coalesce list: (29)node_29 & (31)node_31 [map: 0, 2] : Success -> 0
Coalesce list: (29)node_29 & (32)node_32 [map: 0, 3] : Success -> 0
Coalesce list: (29)node_29 & (56)node_56 [map: 0, 13] : Success -> 0
Coalesce list: (29)node_29 & (73)node_73 [map: 0, 15] : Success -> 0
Coalesce list: (29)node_29 & (79)node_79 [map: 0, 17] : Success -> 0
Coalesce list: (33)temp_33 & (53)temp_53 [map: 4, 11] : Success -> 4
Coalesce list: (33)temp_33 & (55)temp_55 [map: 4, 12] : Success -> 4
Coalesce list: (30)node_29 & (31)node_29: Already Coalesced.
Coalesce list: (31)node_29 & (32)node_29: Already Coalesced.
Coalesce list: (30)node_29 & (43)node_29: Already Coalesced.
Coalesce list: (34)_34 & (80)_80 [map: 5, 18] : Success -> 5
Coalesce list: (34)_34 & (76)_76 [map: 5, 16] : Success -> 5
Coalesce list: (34)_34 & (70)_70 [map: 5, 14] : Success -> 5
Coalesce list: (34)_34 & (81)_81 [map: 5, 19] : Success -> 5
Coalesce list: (34)_34 & (82)_82 [map: 5, 20] : Success -> 5
Coalesce list: (32)node_29 & (79)node_29: Already Coalesced.
Coalesce list: (31)node_29 & (73)node_29: Already Coalesced.
Coalesce list: (30)node_29 & (29)node_29: Already Coalesced.
Coalesce list: (33)temp_33 & (55)temp_33: Already Coalesced.
Coalesce list: (29)node_29 & (56)node_29: Already Coalesced.
Coalesce list: (35)iftmp.0_35 & (51)iftmp.0_51 [map: 6, 9] : Success -> 6
Coalesce list: (35)iftmp.0_35 & (52)iftmp.0_52 [map: 6, 10] : Success -> 6
After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (_5 - 5 )
Partition 5 (_6 - 6 )
Partition 6 (_7 - 7 )
Partition 7 (_8 - 8 )
Partition 8 (_9 - 9 )
Partition 9 (_10 - 10 )
Partition 10 (_11 - 11 )
Partition 11 (_12 - 12 )
Partition 12 (_13 - 13 )
Partition 13 (_14 - 14 )
Partition 14 (_15 - 15 )
Partition 15 (_16 - 16 )
Partition 16 (_17 - 17 )
Partition 17 (_18 - 18 )
Partition 18 (_19 - 19 )
Partition 19 (_20 - 20 )
Partition 20 (_21 - 21 )
Partition 21 (_22 - 22 )
Partition 22 (_23 - 23 )
Partition 23 (_24 - 24 )
Partition 24 (_25 - 25 )
Partition 25 (_26 - 26 )
Partition 26 (_27 - 27 )
Partition 27 (_28 - 28 )
Partition 28 (node_29 - 29 30 31 32 43 56 73 79 )
Partition 29 (temp_33 - 33 53 55 )
Partition 30 (_34 - 34 70 76 80 81 82 )
Partition 31 (iftmp.0_35 - 35 51 52 )
Partition 32 (queryNum_45(D) - 45 )
Partition 33 (temp_47 - 47 )
Partition 34 (balance_67 - 67 )
Partition 35 (_83(D) - 83 )

delete (struct avlNode * node, int queryNum)
{
  struct avlNode * temp;
  struct avlNode * temp;
  int balance;
  struct AVLnode * iftmp.0;
  struct avlNode * D.2913;
  int _1;
  struct AVLnode * _2;
  struct avlNode * _3;
  int _4;
  struct AVLnode * _5;
  struct avlNode * _6;
  struct AVLnode * _7;
  struct AVLnode * _8;
  struct AVLnode * _9;
  struct AVLnode * _10;
  int _11;
  int _12;
  struct AVLnode * _13;
  struct avlNode * _14;
  struct AVLnode * _15;
  int _16;
  struct AVLnode * _17;
  int _18;
  int _19;
  int _20;
  struct AVLnode * _21;
  int _22;
  struct AVLnode * _23;
  int _24;
  struct AVLnode * _25;
  int _26;
  struct AVLnode * _27;
  int _28;
  struct avlNode * _34;
  struct AVLnode * iftmp.0_35;
  struct AVLnode * iftmp.0_51;
  struct AVLnode * iftmp.0_52;
  struct avlNode * _70;
  struct avlNode * _76;
  struct avlNode * _80;
  struct avlNode * _81;
  struct avlNode * _82;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (node_43(D) == 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  _82 = node_43(D);
  goto <bb 33> (<L36>); [0.00%]
;;    succ:       33

;;   basic block 4, loop depth 0
;;    pred:       2
  _1 = node_43(D)->key;
  if (queryNum_45(D) < _1)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]
;;    succ:       5
;;                6

;;   basic block 5, loop depth 0
;;    pred:       4
  _2 = node_43(D)->left;
  _3 = delete (_2, queryNum_45(D));
  node_43(D)->left = _3;
  goto <bb 18>; [0.00%]
;;    succ:       18

;;   basic block 6, loop depth 0
;;    pred:       4
  _4 = node_43(D)->key;
  if (queryNum_45(D) > _4)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]
;;    succ:       7
;;                8

;;   basic block 7, loop depth 0
;;    pred:       6
  _5 = node_43(D)->right;
  _6 = delete (_5, queryNum_45(D));
  node_43(D)->right = _6;
  goto <bb 18>; [0.00%]
;;    succ:       18

;;   basic block 8, loop depth 0
;;    pred:       6
  _7 = node_43(D)->left;
  if (_7 == 0B)
    goto <bb 10>; [0.00%]
  else
    goto <bb 9>; [0.00%]
;;    succ:       10
;;                9

;;   basic block 9, loop depth 0
;;    pred:       8
  _8 = node_43(D)->right;
  if (_8 == 0B)
    goto <bb 10>; [0.00%]
  else
    goto <bb 17>; [0.00%]
;;    succ:       10
;;                17

;;   basic block 10, loop depth 0
;;    pred:       8
;;                9
  _9 = node_43(D)->left;
  if (_9 != 0B)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]
;;    succ:       11
;;                12

;;   basic block 11, loop depth 0
;;    pred:       10
  iftmp.0_52 = node_43(D)->left;
  goto <bb 13>; [0.00%]
;;    succ:       13

;;   basic block 12, loop depth 0
;;    pred:       10
  iftmp.0_51 = node_43(D)->right;
;;    succ:       13

;;   basic block 13, loop depth 0
;;    pred:       11
;;                12
  # iftmp.0_35 = PHI <iftmp.0_52(11), iftmp.0_51(12)>
  temp_53 = iftmp.0_35;
  if (temp_53 == 0B)
    goto <bb 14>; [0.00%]
  else
    goto <bb 15>; [0.00%]
;;    succ:       14
;;                15

;;   basic block 14, loop depth 0
;;    pred:       13
  temp_55 = node_43(D);
  node_56 = 0B;
  goto <bb 16>; [0.00%]
;;    succ:       16

;;   basic block 15, loop depth 0
;;    pred:       13
  *node_43(D) = *temp_53;
;;    succ:       16

;;   basic block 16, loop depth 0
;;    pred:       14
;;                15
  # node_29 = PHI <node_56(14), node_43(D)(15)>
  # temp_33 = PHI <temp_55(14), temp_53(15)>
  free (temp_33);
  goto <bb 18>; [0.00%]
;;    succ:       18

;;   basic block 17, loop depth 0
;;    pred:       9
  _10 = node_43(D)->right;
  temp_47 = minNode (_10);
  _11 = temp_47->key;
  node_43(D)->key = _11;
  _12 = temp_47->key;
  _13 = node_43(D)->right;
  _14 = delete (_13, _12);
  node_43(D)->right = _14;
;;    succ:       18

;;   basic block 18, loop depth 0
;;    pred:       5
;;                7
;;                16
;;                17
  # node_30 = PHI <node_43(D)(5), node_43(D)(7), node_29(16), node_43(D)(17)>
  if (node_30 == 0B)
    goto <bb 19>; [0.00%]
  else
    goto <bb 20>; [0.00%]
;;    succ:       19
;;                20

;;   basic block 19, loop depth 0
;;    pred:       18
  _81 = node_30;
  goto <bb 33> (<L36>); [0.00%]
;;    succ:       33

;;   basic block 20, loop depth 0
;;    pred:       18
  _15 = node_30->right;
  _16 = nodeHeight (_15);
  _17 = node_30->left;
  _18 = nodeHeight (_17);
  _19 = max (_18, _16);
  _20 = _19 + 1;
  node_30->height = _20;
  balance_67 = heightDiff (node_30);
  if (balance_67 > 1)
    goto <bb 21>; [0.00%]
  else
    goto <bb 23>; [0.00%]
;;    succ:       21
;;                23

;;   basic block 21, loop depth 0
;;    pred:       20
  _21 = node_30->left;
  _22 = heightDiff (_21);
  if (_22 >= 0)
    goto <bb 22>; [0.00%]
  else
    goto <bb 23>; [0.00%]
;;    succ:       22
;;                23

;;   basic block 22, loop depth 0
;;    pred:       21
  _70 = rightRotate (node_30);
  goto <bb 33> (<L36>); [0.00%]
;;    succ:       33

;;   basic block 23, loop depth 0
;;    pred:       20
;;                21
  if (balance_67 > 1)
    goto <bb 24>; [0.00%]
  else
    goto <bb 26>; [0.00%]
;;    succ:       24
;;                26

;;   basic block 24, loop depth 0
;;    pred:       23
  _23 = node_30->left;
  _24 = heightDiff (_23);
  if (_24 < 0)
    goto <bb 25>; [0.00%]
  else
    goto <bb 26>; [0.00%]
;;    succ:       25
;;                26

;;   basic block 25, loop depth 0
;;    pred:       24
  node_73 = LeftRightRotate (node_30);
;;    succ:       26

;;   basic block 26, loop depth 0
;;    pred:       23
;;                24
;;                25
  # node_31 = PHI <node_30(23), node_30(24), node_73(25)>
  if (balance_67 < -1)
    goto <bb 27>; [0.00%]
  else
    goto <bb 29>; [0.00%]
;;    succ:       27
;;                29

;;   basic block 27, loop depth 0
;;    pred:       26
  _25 = node_31->right;
  _26 = heightDiff (_25);
  if (_26 >= 0)
    goto <bb 28>; [0.00%]
  else
    goto <bb 29>; [0.00%]
;;    succ:       28
;;                29

;;   basic block 28, loop depth 0
;;    pred:       27
  _76 = leftRotate (node_31);
  goto <bb 33> (<L36>); [0.00%]
;;    succ:       33

;;   basic block 29, loop depth 0
;;    pred:       26
;;                27
  if (balance_67 < -1)
    goto <bb 30>; [0.00%]
  else
    goto <bb 32>; [0.00%]
;;    succ:       30
;;                32

;;   basic block 30, loop depth 0
;;    pred:       29
  _27 = node_31->right;
  _28 = heightDiff (_27);
  if (_28 < 0)
    goto <bb 31>; [0.00%]
  else
    goto <bb 32>; [0.00%]
;;    succ:       31
;;                32

;;   basic block 31, loop depth 0
;;    pred:       30
  node_79 = RightLeftRotate (node_31);
;;    succ:       32

;;   basic block 32, loop depth 0
;;    pred:       29
;;                30
;;                31
  # node_32 = PHI <node_31(29), node_31(30), node_79(31)>
  _80 = node_32;
;;    succ:       33

;;   basic block 33, loop depth 0
;;    pred:       3
;;                19
;;                22
;;                28
;;                32
  # _34 = PHI <_82(3), _81(19), _70(22), _76(28), _80(32)>
<L36> [0.00%]:
  return _34;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; if (node_43(D) == 0B)

(insn 7 6 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])
            (const_int 0 [0]))) "test1.c":161 -1
     (nil))

(jump_insn 8 7 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":161 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; _82 = node_43(D);

(insn 10 9 0 (set (reg/f:DI 115 [ _34 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":162 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; 

(code_label 13 12 14 40 (nil) [0 uses])

(note 14 13 0 NOTE_INSN_BASIC_BLOCK)

;; _1 = node_43(D)->key;

(insn 15 14 16 (set (reg/f:DI 118)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":164 -1
     (nil))

(insn 16 15 0 (set (reg:SI 87 [ _1 ])
        (mem:SI (reg/f:DI 118) [1 node_43(D)->key+0 S4 A64])) "test1.c":164 -1
     (nil))

;; if (queryNum_45(D) < _1)

(insn 17 16 18 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -44 [0xffffffffffffffd4])) [1 queryNum+0 S4 A32])
            (reg:SI 87 [ _1 ]))) "test1.c":164 -1
     (nil))

(jump_insn 18 17 0 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":164 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; _2 = node_43(D)->left;

(insn 20 19 21 (set (reg/f:DI 119)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":166 -1
     (nil))

(insn 21 20 0 (set (reg/f:DI 88 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 119)
                (const_int 8 [0x8])) [2 node_43(D)->left+0 S8 A64])) "test1.c":166 -1
     (nil))

;; _3 = delete (_2, queryNum_45(D));

(insn 22 21 23 (set (reg:SI 120)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -44 [0xffffffffffffffd4])) [1 queryNum+0 S4 A32])) "test1.c":166 -1
     (nil))

(insn 23 22 24 (set (reg:SI 4 si)
        (reg:SI 120)) "test1.c":166 -1
     (nil))

(insn 24 23 25 (set (reg:DI 5 di)
        (reg/f:DI 88 [ _2 ])) "test1.c":166 -1
     (nil))

(call_insn 25 24 26 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("delete") [flags 0x3]  <function_decl 0x7fddd77eed00 delete>) [0 delete S1 A8])
            (const_int 0 [0]))) "test1.c":166 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))

(insn 26 25 0 (set (reg/f:DI 89 [ _3 ])
        (reg:DI 0 ax)) "test1.c":166 -1
     (nil))

;; node_43(D)->left = _3;

(insn 27 26 28 (set (reg/f:DI 121)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":165 -1
     (nil))

(insn 28 27 0 (set (mem/f:DI (plus:DI (reg/f:DI 121)
                (const_int 8 [0x8])) [2 node_43(D)->left+0 S8 A64])
        (reg/f:DI 89 [ _3 ])) "test1.c":165 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; 

(code_label 31 30 32 42 (nil) [0 uses])

(note 32 31 0 NOTE_INSN_BASIC_BLOCK)

;; _4 = node_43(D)->key;

(insn 33 32 34 (set (reg/f:DI 122)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":167 -1
     (nil))

(insn 34 33 0 (set (reg:SI 90 [ _4 ])
        (mem:SI (reg/f:DI 122) [1 node_43(D)->key+0 S4 A64])) "test1.c":167 -1
     (nil))

;; if (queryNum_45(D) > _4)

(insn 35 34 36 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -44 [0xffffffffffffffd4])) [1 queryNum+0 S4 A32])
            (reg:SI 90 [ _4 ]))) "test1.c":167 -1
     (nil))

(jump_insn 36 35 0 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":167 -1
     (nil))

;; Generating RTL for gimple basic block 7

;; _5 = node_43(D)->right;

(insn 38 37 39 (set (reg/f:DI 123)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":169 -1
     (nil))

(insn 39 38 0 (set (reg/f:DI 91 [ _5 ])
        (mem/f:DI (plus:DI (reg/f:DI 123)
                (const_int 16 [0x10])) [2 node_43(D)->right+0 S8 A64])) "test1.c":169 -1
     (nil))

;; _6 = delete (_5, queryNum_45(D));

(insn 40 39 41 (set (reg:SI 124)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -44 [0xffffffffffffffd4])) [1 queryNum+0 S4 A32])) "test1.c":169 -1
     (nil))

(insn 41 40 42 (set (reg:SI 4 si)
        (reg:SI 124)) "test1.c":169 -1
     (nil))

(insn 42 41 43 (set (reg:DI 5 di)
        (reg/f:DI 91 [ _5 ])) "test1.c":169 -1
     (nil))

(call_insn 43 42 44 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("delete") [flags 0x3]  <function_decl 0x7fddd77eed00 delete>) [0 delete S1 A8])
            (const_int 0 [0]))) "test1.c":169 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))

(insn 44 43 0 (set (reg/f:DI 92 [ _6 ])
        (reg:DI 0 ax)) "test1.c":169 -1
     (nil))

;; node_43(D)->right = _6;

(insn 45 44 46 (set (reg/f:DI 125)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":168 -1
     (nil))

(insn 46 45 0 (set (mem/f:DI (plus:DI (reg/f:DI 125)
                (const_int 16 [0x10])) [2 node_43(D)->right+0 S8 A64])
        (reg/f:DI 92 [ _6 ])) "test1.c":168 -1
     (nil))

;; Generating RTL for gimple basic block 8

;; 

(code_label 49 48 50 44 (nil) [0 uses])

(note 50 49 0 NOTE_INSN_BASIC_BLOCK)

;; _7 = node_43(D)->left;

(insn 51 50 52 (set (reg/f:DI 126)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":173 -1
     (nil))

(insn 52 51 0 (set (reg/f:DI 93 [ _7 ])
        (mem/f:DI (plus:DI (reg/f:DI 126)
                (const_int 8 [0x8])) [2 node_43(D)->left+0 S8 A64])) "test1.c":173 -1
     (nil))

;; if (_7 == 0B)

(insn 53 52 54 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 93 [ _7 ])
            (const_int 0 [0]))) "test1.c":173 -1
     (nil))

(jump_insn 54 53 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":173 -1
     (nil))

;; Generating RTL for gimple basic block 9

;; _8 = node_43(D)->right;

(insn 56 55 57 (set (reg/f:DI 127)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":173 -1
     (nil))

(insn 57 56 0 (set (reg/f:DI 94 [ _8 ])
        (mem/f:DI (plus:DI (reg/f:DI 127)
                (const_int 16 [0x10])) [2 node_43(D)->right+0 S8 A64])) "test1.c":173 -1
     (nil))

;; if (_8 == 0B)

(insn 58 57 59 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 94 [ _8 ])
            (const_int 0 [0]))) "test1.c":173 -1
     (nil))

(jump_insn 59 58 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":173 -1
     (nil))

;; Generating RTL for gimple basic block 10

;; 

(code_label 60 59 61 45 (nil) [0 uses])

(note 61 60 0 NOTE_INSN_BASIC_BLOCK)

;; _9 = node_43(D)->left;

(insn 62 61 63 (set (reg/f:DI 128)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":175 -1
     (nil))

(insn 63 62 0 (set (reg/f:DI 95 [ _9 ])
        (mem/f:DI (plus:DI (reg/f:DI 128)
                (const_int 8 [0x8])) [2 node_43(D)->left+0 S8 A64])) "test1.c":175 -1
     (nil))

;; if (_9 != 0B)

(insn 64 63 65 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 95 [ _9 ])
            (const_int 0 [0]))) "test1.c":175 -1
     (nil))

(jump_insn 65 64 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":175 -1
     (nil))

;; Generating RTL for gimple basic block 11

;; iftmp.0_52 = node_43(D)->left;

(insn 67 66 68 (set (reg/f:DI 129)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":175 -1
     (nil))

(insn 68 67 0 (set (reg/f:DI 116 [ iftmp.0_35 ])
        (mem/f:DI (plus:DI (reg/f:DI 129)
                (const_int 8 [0x8])) [2 node_43(D)->left+0 S8 A64])) "test1.c":175 -1
     (nil))

;; Generating RTL for gimple basic block 12

;; 

(code_label 71 70 72 47 (nil) [0 uses])

(note 72 71 0 NOTE_INSN_BASIC_BLOCK)

;; iftmp.0_51 = node_43(D)->right;

(insn 73 72 74 (set (reg/f:DI 130)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":175 -1
     (nil))

(insn 74 73 0 (set (reg/f:DI 116 [ iftmp.0_35 ])
        (mem/f:DI (plus:DI (reg/f:DI 130)
                (const_int 16 [0x10])) [2 node_43(D)->right+0 S8 A64])) "test1.c":175 -1
     (nil))

;; Generating RTL for gimple basic block 13

;; 

(code_label 75 74 76 48 (nil) [0 uses])

(note 76 75 0 NOTE_INSN_BASIC_BLOCK)

;; temp_53 = iftmp.0_35;

(insn 77 76 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 temp+0 S8 A64])
        (reg/f:DI 116 [ iftmp.0_35 ])) "test1.c":175 -1
     (nil))

;; if (temp_53 == 0B)

(insn 78 77 79 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [2 temp+0 S8 A64])
            (const_int 0 [0]))) "test1.c":178 -1
     (nil))

(jump_insn 79 78 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":178 -1
     (nil))

;; Generating RTL for gimple basic block 14

;; temp_55 = node_43(D);

(insn 81 80 82 (set (reg/f:DI 131)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":180 -1
     (nil))

(insn 82 81 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 temp+0 S8 A64])
        (reg/f:DI 131)) "test1.c":180 -1
     (nil))

;; node_56 = 0B;

(insn 83 82 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])
        (const_int 0 [0])) "test1.c":181 -1
     (nil))

;; Generating RTL for gimple basic block 15

;; 

(code_label 86 85 87 49 (nil) [0 uses])

(note 87 86 0 NOTE_INSN_BASIC_BLOCK)

;; *node_43(D) = *temp_53;

(insn 88 87 89 (set (reg/f:DI 132)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":184 -1
     (nil))

(insn 89 88 90 (set (reg/f:DI 133)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 temp+0 S8 A64])) "test1.c":184 -1
     (nil))

(insn 90 89 91 (set (reg:TI 134)
        (mem:TI (reg/f:DI 133) [3 *temp_53+0 S16 A64])) "test1.c":184 -1
     (nil))

(insn 91 90 92 (set (mem:TI (reg/f:DI 132) [3 *node_43(D)+0 S16 A64])
        (reg:TI 134)) "test1.c":184 -1
     (nil))

(insn 92 91 93 (set (reg:TI 135)
        (mem:TI (plus:DI (reg/f:DI 133)
                (const_int 16 [0x10])) [3 *temp_53+16 S16 A64])) "test1.c":184 -1
     (nil))

(insn 93 92 0 (set (mem:TI (plus:DI (reg/f:DI 132)
                (const_int 16 [0x10])) [3 *node_43(D)+16 S16 A64])
        (reg:TI 135)) "test1.c":184 -1
     (nil))

;; Generating RTL for gimple basic block 16

;; 

(code_label 94 93 95 50 (nil) [0 uses])

(note 95 94 0 NOTE_INSN_BASIC_BLOCK)

;; free (temp_33);

(insn 96 95 97 (set (reg:DI 136)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 temp+0 S8 A64])) "test1.c":186 -1
     (nil))

(insn 97 96 98 (set (reg:DI 5 di)
        (reg:DI 136)) "test1.c":186 -1
     (nil))

(call_insn 98 97 0 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fddd76c9800 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "test1.c":186 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; Generating RTL for gimple basic block 17

;; 

(code_label 101 100 102 46 (nil) [0 uses])

(note 102 101 0 NOTE_INSN_BASIC_BLOCK)

;; _10 = node_43(D)->right;

(insn 103 102 104 (set (reg/f:DI 137)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":193 -1
     (nil))

(insn 104 103 0 (set (reg/f:DI 96 [ _10 ])
        (mem/f:DI (plus:DI (reg/f:DI 137)
                (const_int 16 [0x10])) [2 node_43(D)->right+0 S8 A64])) "test1.c":193 -1
     (nil))

;; temp_47 = minNode (_10);

(insn 105 104 106 (set (reg:DI 5 di)
        (reg/f:DI 96 [ _10 ])) "test1.c":193 -1
     (nil))

(call_insn 106 105 107 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("minNode") [flags 0x3]  <function_decl 0x7fddd77eaf00 minNode>) [0 minNode S1 A8])
            (const_int 0 [0]))) "test1.c":193 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 107 106 108 (set (reg:DI 138)
        (reg:DI 0 ax)) "test1.c":193 -1
     (nil))

(insn 108 107 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 temp+0 S8 A64])
        (reg:DI 138)) "test1.c":193 -1
     (nil))

;; _11 = temp_47->key;

(insn 109 108 110 (set (reg/f:DI 139)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 temp+0 S8 A64])) "test1.c":194 -1
     (nil))

(insn 110 109 0 (set (reg:SI 97 [ _11 ])
        (mem:SI (reg/f:DI 139) [1 temp_47->key+0 S4 A64])) "test1.c":194 -1
     (nil))

;; node_43(D)->key = _11;

(insn 111 110 112 (set (reg/f:DI 140)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":194 -1
     (nil))

(insn 112 111 0 (set (mem:SI (reg/f:DI 140) [1 node_43(D)->key+0 S4 A64])
        (reg:SI 97 [ _11 ])) "test1.c":194 -1
     (nil))

;; _12 = temp_47->key;

(insn 113 112 114 (set (reg/f:DI 141)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 temp+0 S8 A64])) "test1.c":196 -1
     (nil))

(insn 114 113 0 (set (reg:SI 98 [ _12 ])
        (mem:SI (reg/f:DI 141) [1 temp_47->key+0 S4 A64])) "test1.c":196 -1
     (nil))

;; _13 = node_43(D)->right;

(insn 115 114 116 (set (reg/f:DI 142)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":196 -1
     (nil))

(insn 116 115 0 (set (reg/f:DI 99 [ _13 ])
        (mem/f:DI (plus:DI (reg/f:DI 142)
                (const_int 16 [0x10])) [2 node_43(D)->right+0 S8 A64])) "test1.c":196 -1
     (nil))

;; _14 = delete (_13, _12);

(insn 117 116 118 (set (reg:SI 4 si)
        (reg:SI 98 [ _12 ])) "test1.c":196 -1
     (nil))

(insn 118 117 119 (set (reg:DI 5 di)
        (reg/f:DI 99 [ _13 ])) "test1.c":196 -1
     (nil))

(call_insn 119 118 120 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("delete") [flags 0x3]  <function_decl 0x7fddd77eed00 delete>) [0 delete S1 A8])
            (const_int 0 [0]))) "test1.c":196 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))

(insn 120 119 0 (set (reg/f:DI 100 [ _14 ])
        (reg:DI 0 ax)) "test1.c":196 -1
     (nil))

;; node_43(D)->right = _14;

(insn 121 120 122 (set (reg/f:DI 143)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":195 -1
     (nil))

(insn 122 121 0 (set (mem/f:DI (plus:DI (reg/f:DI 143)
                (const_int 16 [0x10])) [2 node_43(D)->right+0 S8 A64])
        (reg/f:DI 100 [ _14 ])) "test1.c":195 -1
     (nil))

;; Generating RTL for gimple basic block 18

;; 

(code_label 123 122 124 43 (nil) [0 uses])

(note 124 123 0 NOTE_INSN_BASIC_BLOCK)

;; if (node_30 == 0B)

(insn 125 124 126 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])
            (const_int 0 [0]))) "test1.c":202 -1
     (nil))

(jump_insn 126 125 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":202 -1
     (nil))

;; Generating RTL for gimple basic block 19

;; _81 = node_30;

(insn 128 127 0 (set (reg/f:DI 115 [ _34 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":203 -1
     (nil))

;; Generating RTL for gimple basic block 20

;; 

(code_label 131 130 132 51 (nil) [0 uses])

(note 132 131 0 NOTE_INSN_BASIC_BLOCK)

;; _15 = node_30->right;

(insn 133 132 134 (set (reg/f:DI 144)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":206 -1
     (nil))

(insn 134 133 0 (set (reg/f:DI 101 [ _15 ])
        (mem/f:DI (plus:DI (reg/f:DI 144)
                (const_int 16 [0x10])) [2 node_30->right+0 S8 A64])) "test1.c":206 -1
     (nil))

;; _16 = nodeHeight (_15);

(insn 135 134 136 (set (reg:DI 5 di)
        (reg/f:DI 101 [ _15 ])) "test1.c":206 -1
     (nil))

(call_insn 136 135 137 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodeHeight") [flags 0x3]  <function_decl 0x7fddd77eab00 nodeHeight>) [0 nodeHeight S1 A8])
            (const_int 0 [0]))) "test1.c":206 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 137 136 0 (set (reg:SI 102 [ _16 ])
        (reg:SI 0 ax)) "test1.c":206 -1
     (nil))

;; _17 = node_30->left;

(insn 138 137 139 (set (reg/f:DI 145)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":206 -1
     (nil))

(insn 139 138 0 (set (reg/f:DI 103 [ _17 ])
        (mem/f:DI (plus:DI (reg/f:DI 145)
                (const_int 8 [0x8])) [2 node_30->left+0 S8 A64])) "test1.c":206 -1
     (nil))

;; _18 = nodeHeight (_17);

(insn 140 139 141 (set (reg:DI 5 di)
        (reg/f:DI 103 [ _17 ])) "test1.c":206 -1
     (nil))

(call_insn 141 140 142 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodeHeight") [flags 0x3]  <function_decl 0x7fddd77eab00 nodeHeight>) [0 nodeHeight S1 A8])
            (const_int 0 [0]))) "test1.c":206 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 142 141 0 (set (reg:SI 104 [ _18 ])
        (reg:SI 0 ax)) "test1.c":206 -1
     (nil))

;; _19 = max (_18, _16);

(insn 143 142 144 (set (reg:SI 4 si)
        (reg:SI 102 [ _16 ])) "test1.c":206 -1
     (nil))

(insn 144 143 145 (set (reg:SI 5 di)
        (reg:SI 104 [ _18 ])) "test1.c":206 -1
     (nil))

(call_insn 145 144 146 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("max") [flags 0x3]  <function_decl 0x7fddd77ea700 max>) [0 max S1 A8])
            (const_int 0 [0]))) "test1.c":206 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))

(insn 146 145 0 (set (reg:SI 105 [ _19 ])
        (reg:SI 0 ax)) "test1.c":206 -1
     (nil))

;; _20 = _19 + 1;

(insn 147 146 0 (parallel [
            (set (reg:SI 106 [ _20 ])
                (plus:SI (reg:SI 105 [ _19 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":206 -1
     (nil))

;; node_30->height = _20;

(insn 148 147 149 (set (reg/f:DI 146)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":206 -1
     (nil))

(insn 149 148 0 (set (mem:SI (plus:DI (reg/f:DI 146)
                (const_int 24 [0x18])) [1 node_30->height+0 S4 A64])
        (reg:SI 106 [ _20 ])) "test1.c":206 -1
     (nil))

;; balance_67 = heightDiff (node_30);

(insn 150 149 151 (set (reg:DI 147)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":208 -1
     (nil))

(insn 151 150 152 (set (reg:DI 5 di)
        (reg:DI 147)) "test1.c":208 -1
     (nil))

(call_insn 152 151 153 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("heightDiff") [flags 0x3]  <function_decl 0x7fddd77ead00 heightDiff>) [0 heightDiff S1 A8])
            (const_int 0 [0]))) "test1.c":208 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 153 152 154 (set (reg:SI 148)
        (reg:SI 0 ax)) "test1.c":208 -1
     (nil))

(insn 154 153 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [1 balance+0 S4 A32])
        (reg:SI 148)) "test1.c":208 -1
     (nil))

;; if (balance_67 > 1)

(insn 155 154 156 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -20 [0xffffffffffffffec])) [1 balance+0 S4 A32])
            (const_int 1 [0x1]))) "test1.c":211 -1
     (nil))

(jump_insn 156 155 0 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":211 -1
     (nil))

;; Generating RTL for gimple basic block 21

;; _21 = node_30->left;

(insn 158 157 159 (set (reg/f:DI 149)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":211 -1
     (nil))

(insn 159 158 0 (set (reg/f:DI 107 [ _21 ])
        (mem/f:DI (plus:DI (reg/f:DI 149)
                (const_int 8 [0x8])) [2 node_30->left+0 S8 A64])) "test1.c":211 -1
     (nil))

;; _22 = heightDiff (_21);

(insn 160 159 161 (set (reg:DI 5 di)
        (reg/f:DI 107 [ _21 ])) "test1.c":211 -1
     (nil))

(call_insn 161 160 162 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("heightDiff") [flags 0x3]  <function_decl 0x7fddd77ead00 heightDiff>) [0 heightDiff S1 A8])
            (const_int 0 [0]))) "test1.c":211 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 162 161 0 (set (reg:SI 108 [ _22 ])
        (reg:SI 0 ax)) "test1.c":211 -1
     (nil))

;; if (_22 >= 0)

(insn 163 162 164 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 108 [ _22 ])
            (const_int 0 [0]))) "test1.c":211 -1
     (nil))

(jump_insn 164 163 0 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":211 -1
     (nil))

;; Generating RTL for gimple basic block 22

;; _70 = rightRotate (node_30);

(insn 166 165 167 (set (reg:DI 150)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":212 -1
     (nil))

(insn 167 166 168 (set (reg:DI 5 di)
        (reg:DI 150)) "test1.c":212 -1
     (nil))

(call_insn 168 167 169 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("rightRotate") [flags 0x3]  <function_decl 0x7fddd77ee300 rightRotate>) [0 rightRotate S1 A8])
            (const_int 0 [0]))) "test1.c":212 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 169 168 0 (set (reg/f:DI 115 [ _34 ])
        (reg:DI 0 ax)) "test1.c":212 -1
     (nil))

;; Generating RTL for gimple basic block 23

;; 

(code_label 172 171 173 52 (nil) [0 uses])

(note 173 172 0 NOTE_INSN_BASIC_BLOCK)

;; if (balance_67 > 1)

(insn 174 173 175 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -20 [0xffffffffffffffec])) [1 balance+0 S4 A32])
            (const_int 1 [0x1]))) "test1.c":215 -1
     (nil))

(jump_insn 175 174 0 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":215 -1
     (nil))

;; Generating RTL for gimple basic block 24

;; _23 = node_30->left;

(insn 177 176 178 (set (reg/f:DI 151)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":215 -1
     (nil))

(insn 178 177 0 (set (reg/f:DI 109 [ _23 ])
        (mem/f:DI (plus:DI (reg/f:DI 151)
                (const_int 8 [0x8])) [2 node_30->left+0 S8 A64])) "test1.c":215 -1
     (nil))

;; _24 = heightDiff (_23);

(insn 179 178 180 (set (reg:DI 5 di)
        (reg/f:DI 109 [ _23 ])) "test1.c":215 -1
     (nil))

(call_insn 180 179 181 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("heightDiff") [flags 0x3]  <function_decl 0x7fddd77ead00 heightDiff>) [0 heightDiff S1 A8])
            (const_int 0 [0]))) "test1.c":215 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 181 180 0 (set (reg:SI 110 [ _24 ])
        (reg:SI 0 ax)) "test1.c":215 -1
     (nil))

;; if (_24 < 0)

(insn 182 181 183 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 110 [ _24 ])
            (const_int 0 [0]))) "test1.c":215 -1
     (nil))

(jump_insn 183 182 0 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":215 -1
     (nil))

;; Generating RTL for gimple basic block 25

;; node_73 = LeftRightRotate (node_30);

(insn 185 184 186 (set (reg:DI 152)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":217 -1
     (nil))

(insn 186 185 187 (set (reg:DI 5 di)
        (reg:DI 152)) "test1.c":217 -1
     (nil))

(call_insn 187 186 188 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("LeftRightRotate") [flags 0x3]  <function_decl 0x7fddd77ee700 LeftRightRotate>) [0 LeftRightRotate S1 A8])
            (const_int 0 [0]))) "test1.c":217 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 188 187 189 (set (reg:DI 153)
        (reg:DI 0 ax)) "test1.c":217 -1
     (nil))

(insn 189 188 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])
        (reg:DI 153)) "test1.c":217 -1
     (nil))

;; Generating RTL for gimple basic block 26

;; 

(code_label 190 189 191 53 (nil) [0 uses])

(note 191 190 0 NOTE_INSN_BASIC_BLOCK)

;; if (balance_67 < -1)

(insn 192 191 193 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -20 [0xffffffffffffffec])) [1 balance+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))) "test1.c":221 -1
     (nil))

(jump_insn 193 192 0 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":221 -1
     (nil))

;; Generating RTL for gimple basic block 27

;; _25 = node_31->right;

(insn 195 194 196 (set (reg/f:DI 154)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":221 -1
     (nil))

(insn 196 195 0 (set (reg/f:DI 111 [ _25 ])
        (mem/f:DI (plus:DI (reg/f:DI 154)
                (const_int 16 [0x10])) [2 node_31->right+0 S8 A64])) "test1.c":221 -1
     (nil))

;; _26 = heightDiff (_25);

(insn 197 196 198 (set (reg:DI 5 di)
        (reg/f:DI 111 [ _25 ])) "test1.c":221 -1
     (nil))

(call_insn 198 197 199 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("heightDiff") [flags 0x3]  <function_decl 0x7fddd77ead00 heightDiff>) [0 heightDiff S1 A8])
            (const_int 0 [0]))) "test1.c":221 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 199 198 0 (set (reg:SI 112 [ _26 ])
        (reg:SI 0 ax)) "test1.c":221 -1
     (nil))

;; if (_26 >= 0)

(insn 200 199 201 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 112 [ _26 ])
            (const_int 0 [0]))) "test1.c":221 -1
     (nil))

(jump_insn 201 200 0 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":221 -1
     (nil))

;; Generating RTL for gimple basic block 28

;; _76 = leftRotate (node_31);

(insn 203 202 204 (set (reg:DI 155)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":222 -1
     (nil))

(insn 204 203 205 (set (reg:DI 5 di)
        (reg:DI 155)) "test1.c":222 -1
     (nil))

(call_insn 205 204 206 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("leftRotate") [flags 0x3]  <function_decl 0x7fddd77ee500 leftRotate>) [0 leftRotate S1 A8])
            (const_int 0 [0]))) "test1.c":222 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 206 205 0 (set (reg/f:DI 115 [ _34 ])
        (reg:DI 0 ax)) "test1.c":222 -1
     (nil))

;; Generating RTL for gimple basic block 29

;; 

(code_label 209 208 210 54 (nil) [0 uses])

(note 210 209 0 NOTE_INSN_BASIC_BLOCK)

;; if (balance_67 < -1)

(insn 211 210 212 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -20 [0xffffffffffffffec])) [1 balance+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))) "test1.c":225 -1
     (nil))

(jump_insn 212 211 0 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":225 -1
     (nil))

;; Generating RTL for gimple basic block 30

;; _27 = node_31->right;

(insn 214 213 215 (set (reg/f:DI 156)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":225 -1
     (nil))

(insn 215 214 0 (set (reg/f:DI 113 [ _27 ])
        (mem/f:DI (plus:DI (reg/f:DI 156)
                (const_int 16 [0x10])) [2 node_31->right+0 S8 A64])) "test1.c":225 -1
     (nil))

;; _28 = heightDiff (_27);

(insn 216 215 217 (set (reg:DI 5 di)
        (reg/f:DI 113 [ _27 ])) "test1.c":225 -1
     (nil))

(call_insn 217 216 218 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("heightDiff") [flags 0x3]  <function_decl 0x7fddd77ead00 heightDiff>) [0 heightDiff S1 A8])
            (const_int 0 [0]))) "test1.c":225 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 218 217 0 (set (reg:SI 114 [ _28 ])
        (reg:SI 0 ax)) "test1.c":225 -1
     (nil))

;; if (_28 < 0)

(insn 219 218 220 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 114 [ _28 ])
            (const_int 0 [0]))) "test1.c":225 -1
     (nil))

(jump_insn 220 219 0 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":225 -1
     (nil))

;; Generating RTL for gimple basic block 31

;; node_79 = RightLeftRotate (node_31);

(insn 222 221 223 (set (reg:DI 157)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":227 -1
     (nil))

(insn 223 222 224 (set (reg:DI 5 di)
        (reg:DI 157)) "test1.c":227 -1
     (nil))

(call_insn 224 223 225 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("RightLeftRotate") [flags 0x3]  <function_decl 0x7fddd77ee900 RightLeftRotate>) [0 RightLeftRotate S1 A8])
            (const_int 0 [0]))) "test1.c":227 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 225 224 226 (set (reg:DI 158)
        (reg:DI 0 ax)) "test1.c":227 -1
     (nil))

(insn 226 225 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])
        (reg:DI 158)) "test1.c":227 -1
     (nil))

;; Generating RTL for gimple basic block 32

;; 

(code_label 227 226 228 55 (nil) [0 uses])

(note 228 227 0 NOTE_INSN_BASIC_BLOCK)

;; _80 = node_32;

(insn 229 228 0 (set (reg/f:DI 115 [ _34 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":230 -1
     (nil))

;; Generating RTL for gimple basic block 33

;; <L36> [0.00%]:

(code_label 230 229 231 41 (nil) [0 uses])

(note 231 230 0 NOTE_INSN_BASIC_BLOCK)

;; return _34;

(insn 232 231 233 (set (reg/f:DI 117 [ <retval> ])
        (reg/f:DI 115 [ _34 ])) -1
     (nil))

(jump_insn 233 232 234 (set (pc)
        (label_ref 0)) -1
     (nil))

(barrier 234 233 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Removing jump 233.
Merging block 35 into block 34...
Merged blocks 34 and 35.
Merged 34 and 35 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])
        (reg:DI 5 di [ node ])) "test1.c":160 -1
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -44 [0xffffffffffffffd4])) [1 queryNum+0 S4 A32])
        (reg:SI 4 si [ queryNum ])) "test1.c":160 -1
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])
            (const_int 0 [0]))) "test1.c":161 -1
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 13)
            (pc))) "test1.c":161 -1
     (nil)
 -> 13)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 9 8 10 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 4 (set (reg/f:DI 115 [ _34 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":162 -1
     (nil))
(jump_insn 11 10 12 4 (set (pc)
        (label_ref 230)) "test1.c":162 -1
     (nil)
 -> 230)
;;  succ:       34

(barrier 12 11 13)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 13 12 14 5 40 (nil) [1 uses])
(note 14 13 15 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 5 (set (reg/f:DI 118)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":164 -1
     (nil))
(insn 16 15 17 5 (set (reg:SI 87 [ _1 ])
        (mem:SI (reg/f:DI 118) [1 node_43(D)->key+0 S4 A64])) "test1.c":164 -1
     (nil))
(insn 17 16 18 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -44 [0xffffffffffffffd4])) [1 queryNum+0 S4 A32])
            (reg:SI 87 [ _1 ]))) "test1.c":164 -1
     (nil))
(jump_insn 18 17 19 5 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) "test1.c":164 -1
     (nil)
 -> 31)
;;  succ:       6 (FALLTHRU)
;;              7

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 19 18 20 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 6 (set (reg/f:DI 119)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":166 -1
     (nil))
(insn 21 20 22 6 (set (reg/f:DI 88 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 119)
                (const_int 8 [0x8])) [2 node_43(D)->left+0 S8 A64])) "test1.c":166 -1
     (nil))
(insn 22 21 23 6 (set (reg:SI 120)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -44 [0xffffffffffffffd4])) [1 queryNum+0 S4 A32])) "test1.c":166 -1
     (nil))
(insn 23 22 24 6 (set (reg:SI 4 si)
        (reg:SI 120)) "test1.c":166 -1
     (nil))
(insn 24 23 25 6 (set (reg:DI 5 di)
        (reg/f:DI 88 [ _2 ])) "test1.c":166 -1
     (nil))
(call_insn 25 24 26 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("delete") [flags 0x3]  <function_decl 0x7fddd77eed00 delete>) [0 delete S1 A8])
            (const_int 0 [0]))) "test1.c":166 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 26 25 27 6 (set (reg/f:DI 89 [ _3 ])
        (reg:DI 0 ax)) "test1.c":166 -1
     (nil))
(insn 27 26 28 6 (set (reg/f:DI 121)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":165 -1
     (nil))
(insn 28 27 29 6 (set (mem/f:DI (plus:DI (reg/f:DI 121)
                (const_int 8 [0x8])) [2 node_43(D)->left+0 S8 A64])
        (reg/f:DI 89 [ _3 ])) "test1.c":165 -1
     (nil))
(jump_insn 29 28 30 6 (set (pc)
        (label_ref 123)) -1
     (nil)
 -> 123)
;;  succ:       19

(barrier 30 29 31)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
(code_label 31 30 32 7 42 (nil) [1 uses])
(note 32 31 33 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 7 (set (reg/f:DI 122)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":167 -1
     (nil))
(insn 34 33 35 7 (set (reg:SI 90 [ _4 ])
        (mem:SI (reg/f:DI 122) [1 node_43(D)->key+0 S4 A64])) "test1.c":167 -1
     (nil))
(insn 35 34 36 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -44 [0xffffffffffffffd4])) [1 queryNum+0 S4 A32])
            (reg:SI 90 [ _4 ]))) "test1.c":167 -1
     (nil))
(jump_insn 36 35 37 7 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 49)
            (pc))) "test1.c":167 -1
     (nil)
 -> 49)
;;  succ:       8 (FALLTHRU)
;;              9

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 (FALLTHRU)
(note 37 36 38 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 8 (set (reg/f:DI 123)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":169 -1
     (nil))
(insn 39 38 40 8 (set (reg/f:DI 91 [ _5 ])
        (mem/f:DI (plus:DI (reg/f:DI 123)
                (const_int 16 [0x10])) [2 node_43(D)->right+0 S8 A64])) "test1.c":169 -1
     (nil))
(insn 40 39 41 8 (set (reg:SI 124)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -44 [0xffffffffffffffd4])) [1 queryNum+0 S4 A32])) "test1.c":169 -1
     (nil))
(insn 41 40 42 8 (set (reg:SI 4 si)
        (reg:SI 124)) "test1.c":169 -1
     (nil))
(insn 42 41 43 8 (set (reg:DI 5 di)
        (reg/f:DI 91 [ _5 ])) "test1.c":169 -1
     (nil))
(call_insn 43 42 44 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("delete") [flags 0x3]  <function_decl 0x7fddd77eed00 delete>) [0 delete S1 A8])
            (const_int 0 [0]))) "test1.c":169 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 44 43 45 8 (set (reg/f:DI 92 [ _6 ])
        (reg:DI 0 ax)) "test1.c":169 -1
     (nil))
(insn 45 44 46 8 (set (reg/f:DI 125)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":168 -1
     (nil))
(insn 46 45 47 8 (set (mem/f:DI (plus:DI (reg/f:DI 125)
                (const_int 16 [0x10])) [2 node_43(D)->right+0 S8 A64])
        (reg/f:DI 92 [ _6 ])) "test1.c":168 -1
     (nil))
(jump_insn 47 46 48 8 (set (pc)
        (label_ref 123)) -1
     (nil)
 -> 123)
;;  succ:       19

(barrier 48 47 49)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       7
(code_label 49 48 50 9 44 (nil) [1 uses])
(note 50 49 51 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 9 (set (reg/f:DI 126)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":173 -1
     (nil))
(insn 52 51 53 9 (set (reg/f:DI 93 [ _7 ])
        (mem/f:DI (plus:DI (reg/f:DI 126)
                (const_int 8 [0x8])) [2 node_43(D)->left+0 S8 A64])) "test1.c":173 -1
     (nil))
(insn 53 52 54 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 93 [ _7 ])
            (const_int 0 [0]))) "test1.c":173 -1
     (nil))
(jump_insn 54 53 55 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 60)
            (pc))) "test1.c":173 -1
     (nil)
 -> 60)
;;  succ:       11
;;              10 (FALLTHRU)

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL)
;;  pred:       9 (FALLTHRU)
(note 55 54 56 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 10 (set (reg/f:DI 127)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":173 -1
     (nil))
(insn 57 56 58 10 (set (reg/f:DI 94 [ _8 ])
        (mem/f:DI (plus:DI (reg/f:DI 127)
                (const_int 16 [0x10])) [2 node_43(D)->right+0 S8 A64])) "test1.c":173 -1
     (nil))
(insn 58 57 59 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 94 [ _8 ])
            (const_int 0 [0]))) "test1.c":173 -1
     (nil))
(jump_insn 59 58 60 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 101)
            (pc))) "test1.c":173 -1
     (nil)
 -> 101)
;;  succ:       11 (FALLTHRU)
;;              18

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL)
;;  pred:       9
;;              10 (FALLTHRU)
(code_label 60 59 61 11 45 (nil) [1 uses])
(note 61 60 62 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 11 (set (reg/f:DI 128)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":175 -1
     (nil))
(insn 63 62 64 11 (set (reg/f:DI 95 [ _9 ])
        (mem/f:DI (plus:DI (reg/f:DI 128)
                (const_int 8 [0x8])) [2 node_43(D)->left+0 S8 A64])) "test1.c":175 -1
     (nil))
(insn 64 63 65 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 95 [ _9 ])
            (const_int 0 [0]))) "test1.c":175 -1
     (nil))
(jump_insn 65 64 66 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) "test1.c":175 -1
     (nil)
 -> 71)
;;  succ:       12 (FALLTHRU)
;;              13

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL)
;;  pred:       11 (FALLTHRU)
(note 66 65 67 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 12 (set (reg/f:DI 129)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":175 -1
     (nil))
(insn 68 67 69 12 (set (reg/f:DI 116 [ iftmp.0_35 ])
        (mem/f:DI (plus:DI (reg/f:DI 129)
                (const_int 8 [0x8])) [2 node_43(D)->left+0 S8 A64])) "test1.c":175 -1
     (nil))
(jump_insn 69 68 70 12 (set (pc)
        (label_ref 75)) -1
     (nil)
 -> 75)
;;  succ:       14

(barrier 70 69 71)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL)
;;  pred:       11
(code_label 71 70 72 13 47 (nil) [1 uses])
(note 72 71 73 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 73 72 74 13 (set (reg/f:DI 130)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":175 -1
     (nil))
(insn 74 73 75 13 (set (reg/f:DI 116 [ iftmp.0_35 ])
        (mem/f:DI (plus:DI (reg/f:DI 130)
                (const_int 16 [0x10])) [2 node_43(D)->right+0 S8 A64])) "test1.c":175 -1
     (nil))
;;  succ:       14 (FALLTHRU)

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL)
;;  pred:       12
;;              13 (FALLTHRU)
(code_label 75 74 76 14 48 (nil) [1 uses])
(note 76 75 77 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 14 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 temp+0 S8 A64])
        (reg/f:DI 116 [ iftmp.0_35 ])) "test1.c":175 -1
     (nil))
(insn 78 77 79 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [2 temp+0 S8 A64])
            (const_int 0 [0]))) "test1.c":178 -1
     (nil))
(jump_insn 79 78 80 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 86)
            (pc))) "test1.c":178 -1
     (nil)
 -> 86)
;;  succ:       15 (FALLTHRU)
;;              16

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL)
;;  pred:       14 (FALLTHRU)
(note 80 79 81 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 82 15 (set (reg/f:DI 131)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":180 -1
     (nil))
(insn 82 81 83 15 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 temp+0 S8 A64])
        (reg/f:DI 131)) "test1.c":180 -1
     (nil))
(insn 83 82 84 15 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])
        (const_int 0 [0])) "test1.c":181 -1
     (nil))
(jump_insn 84 83 85 15 (set (pc)
        (label_ref 94)) -1
     (nil)
 -> 94)
;;  succ:       17

(barrier 85 84 86)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL)
;;  pred:       14
(code_label 86 85 87 16 49 (nil) [1 uses])
(note 87 86 88 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 89 16 (set (reg/f:DI 132)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":184 -1
     (nil))
(insn 89 88 90 16 (set (reg/f:DI 133)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 temp+0 S8 A64])) "test1.c":184 -1
     (nil))
(insn 90 89 91 16 (set (reg:TI 134)
        (mem:TI (reg/f:DI 133) [3 *temp_53+0 S16 A64])) "test1.c":184 -1
     (nil))
(insn 91 90 92 16 (set (mem:TI (reg/f:DI 132) [3 *node_43(D)+0 S16 A64])
        (reg:TI 134)) "test1.c":184 -1
     (nil))
(insn 92 91 93 16 (set (reg:TI 135)
        (mem:TI (plus:DI (reg/f:DI 133)
                (const_int 16 [0x10])) [3 *temp_53+16 S16 A64])) "test1.c":184 -1
     (nil))
(insn 93 92 94 16 (set (mem:TI (plus:DI (reg/f:DI 132)
                (const_int 16 [0x10])) [3 *node_43(D)+16 S16 A64])
        (reg:TI 135)) "test1.c":184 -1
     (nil))
;;  succ:       17 (FALLTHRU)

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL)
;;  pred:       15
;;              16 (FALLTHRU)
(code_label 94 93 95 17 50 (nil) [1 uses])
(note 95 94 96 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 97 17 (set (reg:DI 136)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 temp+0 S8 A64])) "test1.c":186 -1
     (nil))
(insn 97 96 98 17 (set (reg:DI 5 di)
        (reg:DI 136)) "test1.c":186 -1
     (nil))
(call_insn 98 97 99 17 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fddd76c9800 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "test1.c":186 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 99 98 100 17 (set (pc)
        (label_ref 123)) "test1.c":174 -1
     (nil)
 -> 123)
;;  succ:       19

(barrier 100 99 101)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL)
;;  pred:       10
(code_label 101 100 102 18 46 (nil) [1 uses])
(note 102 101 103 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 103 102 104 18 (set (reg/f:DI 137)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":193 -1
     (nil))
(insn 104 103 105 18 (set (reg/f:DI 96 [ _10 ])
        (mem/f:DI (plus:DI (reg/f:DI 137)
                (const_int 16 [0x10])) [2 node_43(D)->right+0 S8 A64])) "test1.c":193 -1
     (nil))
(insn 105 104 106 18 (set (reg:DI 5 di)
        (reg/f:DI 96 [ _10 ])) "test1.c":193 -1
     (nil))
(call_insn 106 105 107 18 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("minNode") [flags 0x3]  <function_decl 0x7fddd77eaf00 minNode>) [0 minNode S1 A8])
            (const_int 0 [0]))) "test1.c":193 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 107 106 108 18 (set (reg:DI 138)
        (reg:DI 0 ax)) "test1.c":193 -1
     (nil))
(insn 108 107 109 18 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 temp+0 S8 A64])
        (reg:DI 138)) "test1.c":193 -1
     (nil))
(insn 109 108 110 18 (set (reg/f:DI 139)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 temp+0 S8 A64])) "test1.c":194 -1
     (nil))
(insn 110 109 111 18 (set (reg:SI 97 [ _11 ])
        (mem:SI (reg/f:DI 139) [1 temp_47->key+0 S4 A64])) "test1.c":194 -1
     (nil))
(insn 111 110 112 18 (set (reg/f:DI 140)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":194 -1
     (nil))
(insn 112 111 113 18 (set (mem:SI (reg/f:DI 140) [1 node_43(D)->key+0 S4 A64])
        (reg:SI 97 [ _11 ])) "test1.c":194 -1
     (nil))
(insn 113 112 114 18 (set (reg/f:DI 141)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 temp+0 S8 A64])) "test1.c":196 -1
     (nil))
(insn 114 113 115 18 (set (reg:SI 98 [ _12 ])
        (mem:SI (reg/f:DI 141) [1 temp_47->key+0 S4 A64])) "test1.c":196 -1
     (nil))
(insn 115 114 116 18 (set (reg/f:DI 142)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":196 -1
     (nil))
(insn 116 115 117 18 (set (reg/f:DI 99 [ _13 ])
        (mem/f:DI (plus:DI (reg/f:DI 142)
                (const_int 16 [0x10])) [2 node_43(D)->right+0 S8 A64])) "test1.c":196 -1
     (nil))
(insn 117 116 118 18 (set (reg:SI 4 si)
        (reg:SI 98 [ _12 ])) "test1.c":196 -1
     (nil))
(insn 118 117 119 18 (set (reg:DI 5 di)
        (reg/f:DI 99 [ _13 ])) "test1.c":196 -1
     (nil))
(call_insn 119 118 120 18 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("delete") [flags 0x3]  <function_decl 0x7fddd77eed00 delete>) [0 delete S1 A8])
            (const_int 0 [0]))) "test1.c":196 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 120 119 121 18 (set (reg/f:DI 100 [ _14 ])
        (reg:DI 0 ax)) "test1.c":196 -1
     (nil))
(insn 121 120 122 18 (set (reg/f:DI 143)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":195 -1
     (nil))
(insn 122 121 123 18 (set (mem/f:DI (plus:DI (reg/f:DI 143)
                (const_int 16 [0x10])) [2 node_43(D)->right+0 S8 A64])
        (reg/f:DI 100 [ _14 ])) "test1.c":195 -1
     (nil))
;;  succ:       19 (FALLTHRU)

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL)
;;  pred:       6
;;              8
;;              17
;;              18 (FALLTHRU)
(code_label 123 122 124 19 43 (nil) [3 uses])
(note 124 123 125 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 125 124 126 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])
            (const_int 0 [0]))) "test1.c":202 -1
     (nil))
(jump_insn 126 125 127 19 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 131)
            (pc))) "test1.c":202 -1
     (nil)
 -> 131)
;;  succ:       20 (FALLTHRU)
;;              21

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL)
;;  pred:       19 (FALLTHRU)
(note 127 126 128 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 128 127 129 20 (set (reg/f:DI 115 [ _34 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":203 -1
     (nil))
(jump_insn 129 128 130 20 (set (pc)
        (label_ref 230)) "test1.c":203 -1
     (nil)
 -> 230)
;;  succ:       34

(barrier 130 129 131)
;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL)
;;  pred:       19
(code_label 131 130 132 21 51 (nil) [1 uses])
(note 132 131 133 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 133 132 134 21 (set (reg/f:DI 144)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":206 -1
     (nil))
(insn 134 133 135 21 (set (reg/f:DI 101 [ _15 ])
        (mem/f:DI (plus:DI (reg/f:DI 144)
                (const_int 16 [0x10])) [2 node_30->right+0 S8 A64])) "test1.c":206 -1
     (nil))
(insn 135 134 136 21 (set (reg:DI 5 di)
        (reg/f:DI 101 [ _15 ])) "test1.c":206 -1
     (nil))
(call_insn 136 135 137 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodeHeight") [flags 0x3]  <function_decl 0x7fddd77eab00 nodeHeight>) [0 nodeHeight S1 A8])
            (const_int 0 [0]))) "test1.c":206 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 137 136 138 21 (set (reg:SI 102 [ _16 ])
        (reg:SI 0 ax)) "test1.c":206 -1
     (nil))
(insn 138 137 139 21 (set (reg/f:DI 145)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":206 -1
     (nil))
(insn 139 138 140 21 (set (reg/f:DI 103 [ _17 ])
        (mem/f:DI (plus:DI (reg/f:DI 145)
                (const_int 8 [0x8])) [2 node_30->left+0 S8 A64])) "test1.c":206 -1
     (nil))
(insn 140 139 141 21 (set (reg:DI 5 di)
        (reg/f:DI 103 [ _17 ])) "test1.c":206 -1
     (nil))
(call_insn 141 140 142 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodeHeight") [flags 0x3]  <function_decl 0x7fddd77eab00 nodeHeight>) [0 nodeHeight S1 A8])
            (const_int 0 [0]))) "test1.c":206 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 142 141 143 21 (set (reg:SI 104 [ _18 ])
        (reg:SI 0 ax)) "test1.c":206 -1
     (nil))
(insn 143 142 144 21 (set (reg:SI 4 si)
        (reg:SI 102 [ _16 ])) "test1.c":206 -1
     (nil))
(insn 144 143 145 21 (set (reg:SI 5 di)
        (reg:SI 104 [ _18 ])) "test1.c":206 -1
     (nil))
(call_insn 145 144 146 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("max") [flags 0x3]  <function_decl 0x7fddd77ea700 max>) [0 max S1 A8])
            (const_int 0 [0]))) "test1.c":206 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 146 145 147 21 (set (reg:SI 105 [ _19 ])
        (reg:SI 0 ax)) "test1.c":206 -1
     (nil))
(insn 147 146 148 21 (parallel [
            (set (reg:SI 106 [ _20 ])
                (plus:SI (reg:SI 105 [ _19 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":206 -1
     (nil))
(insn 148 147 149 21 (set (reg/f:DI 146)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":206 -1
     (nil))
(insn 149 148 150 21 (set (mem:SI (plus:DI (reg/f:DI 146)
                (const_int 24 [0x18])) [1 node_30->height+0 S4 A64])
        (reg:SI 106 [ _20 ])) "test1.c":206 -1
     (nil))
(insn 150 149 151 21 (set (reg:DI 147)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":208 -1
     (nil))
(insn 151 150 152 21 (set (reg:DI 5 di)
        (reg:DI 147)) "test1.c":208 -1
     (nil))
(call_insn 152 151 153 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("heightDiff") [flags 0x3]  <function_decl 0x7fddd77ead00 heightDiff>) [0 heightDiff S1 A8])
            (const_int 0 [0]))) "test1.c":208 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 153 152 154 21 (set (reg:SI 148)
        (reg:SI 0 ax)) "test1.c":208 -1
     (nil))
(insn 154 153 155 21 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [1 balance+0 S4 A32])
        (reg:SI 148)) "test1.c":208 -1
     (nil))
(insn 155 154 156 21 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -20 [0xffffffffffffffec])) [1 balance+0 S4 A32])
            (const_int 1 [0x1]))) "test1.c":211 -1
     (nil))
(jump_insn 156 155 157 21 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 172)
            (pc))) "test1.c":211 -1
     (nil)
 -> 172)
;;  succ:       22 (FALLTHRU)
;;              24

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL)
;;  pred:       21 (FALLTHRU)
(note 157 156 158 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 158 157 159 22 (set (reg/f:DI 149)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":211 -1
     (nil))
(insn 159 158 160 22 (set (reg/f:DI 107 [ _21 ])
        (mem/f:DI (plus:DI (reg/f:DI 149)
                (const_int 8 [0x8])) [2 node_30->left+0 S8 A64])) "test1.c":211 -1
     (nil))
(insn 160 159 161 22 (set (reg:DI 5 di)
        (reg/f:DI 107 [ _21 ])) "test1.c":211 -1
     (nil))
(call_insn 161 160 162 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("heightDiff") [flags 0x3]  <function_decl 0x7fddd77ead00 heightDiff>) [0 heightDiff S1 A8])
            (const_int 0 [0]))) "test1.c":211 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 162 161 163 22 (set (reg:SI 108 [ _22 ])
        (reg:SI 0 ax)) "test1.c":211 -1
     (nil))
(insn 163 162 164 22 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 108 [ _22 ])
            (const_int 0 [0]))) "test1.c":211 -1
     (nil))
(jump_insn 164 163 165 22 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 172)
            (pc))) "test1.c":211 -1
     (nil)
 -> 172)
;;  succ:       23 (FALLTHRU)
;;              24

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL)
;;  pred:       22 (FALLTHRU)
(note 165 164 166 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 166 165 167 23 (set (reg:DI 150)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":212 -1
     (nil))
(insn 167 166 168 23 (set (reg:DI 5 di)
        (reg:DI 150)) "test1.c":212 -1
     (nil))
(call_insn 168 167 169 23 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("rightRotate") [flags 0x3]  <function_decl 0x7fddd77ee300 rightRotate>) [0 rightRotate S1 A8])
            (const_int 0 [0]))) "test1.c":212 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 169 168 170 23 (set (reg/f:DI 115 [ _34 ])
        (reg:DI 0 ax)) "test1.c":212 -1
     (nil))
(jump_insn 170 169 171 23 (set (pc)
        (label_ref 230)) "test1.c":212 -1
     (nil)
 -> 230)
;;  succ:       34

(barrier 171 170 172)
;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL)
;;  pred:       21
;;              22
(code_label 172 171 173 24 52 (nil) [2 uses])
(note 173 172 174 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 174 173 175 24 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -20 [0xffffffffffffffec])) [1 balance+0 S4 A32])
            (const_int 1 [0x1]))) "test1.c":215 -1
     (nil))
(jump_insn 175 174 176 24 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 190)
            (pc))) "test1.c":215 -1
     (nil)
 -> 190)
;;  succ:       25 (FALLTHRU)
;;              27

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL)
;;  pred:       24 (FALLTHRU)
(note 176 175 177 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 177 176 178 25 (set (reg/f:DI 151)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":215 -1
     (nil))
(insn 178 177 179 25 (set (reg/f:DI 109 [ _23 ])
        (mem/f:DI (plus:DI (reg/f:DI 151)
                (const_int 8 [0x8])) [2 node_30->left+0 S8 A64])) "test1.c":215 -1
     (nil))
(insn 179 178 180 25 (set (reg:DI 5 di)
        (reg/f:DI 109 [ _23 ])) "test1.c":215 -1
     (nil))
(call_insn 180 179 181 25 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("heightDiff") [flags 0x3]  <function_decl 0x7fddd77ead00 heightDiff>) [0 heightDiff S1 A8])
            (const_int 0 [0]))) "test1.c":215 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 181 180 182 25 (set (reg:SI 110 [ _24 ])
        (reg:SI 0 ax)) "test1.c":215 -1
     (nil))
(insn 182 181 183 25 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 110 [ _24 ])
            (const_int 0 [0]))) "test1.c":215 -1
     (nil))
(jump_insn 183 182 184 25 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 190)
            (pc))) "test1.c":215 -1
     (nil)
 -> 190)
;;  succ:       26 (FALLTHRU)
;;              27

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL)
;;  pred:       25 (FALLTHRU)
(note 184 183 185 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 185 184 186 26 (set (reg:DI 152)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":217 -1
     (nil))
(insn 186 185 187 26 (set (reg:DI 5 di)
        (reg:DI 152)) "test1.c":217 -1
     (nil))
(call_insn 187 186 188 26 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("LeftRightRotate") [flags 0x3]  <function_decl 0x7fddd77ee700 LeftRightRotate>) [0 LeftRightRotate S1 A8])
            (const_int 0 [0]))) "test1.c":217 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 188 187 189 26 (set (reg:DI 153)
        (reg:DI 0 ax)) "test1.c":217 -1
     (nil))
(insn 189 188 190 26 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])
        (reg:DI 153)) "test1.c":217 -1
     (nil))
;;  succ:       27 (FALLTHRU)

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL)
;;  pred:       24
;;              25
;;              26 (FALLTHRU)
(code_label 190 189 191 27 53 (nil) [2 uses])
(note 191 190 192 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 192 191 193 27 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -20 [0xffffffffffffffec])) [1 balance+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))) "test1.c":221 -1
     (nil))
(jump_insn 193 192 194 27 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 209)
            (pc))) "test1.c":221 -1
     (nil)
 -> 209)
;;  succ:       28 (FALLTHRU)
;;              30

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL)
;;  pred:       27 (FALLTHRU)
(note 194 193 195 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 195 194 196 28 (set (reg/f:DI 154)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":221 -1
     (nil))
(insn 196 195 197 28 (set (reg/f:DI 111 [ _25 ])
        (mem/f:DI (plus:DI (reg/f:DI 154)
                (const_int 16 [0x10])) [2 node_31->right+0 S8 A64])) "test1.c":221 -1
     (nil))
(insn 197 196 198 28 (set (reg:DI 5 di)
        (reg/f:DI 111 [ _25 ])) "test1.c":221 -1
     (nil))
(call_insn 198 197 199 28 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("heightDiff") [flags 0x3]  <function_decl 0x7fddd77ead00 heightDiff>) [0 heightDiff S1 A8])
            (const_int 0 [0]))) "test1.c":221 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 199 198 200 28 (set (reg:SI 112 [ _26 ])
        (reg:SI 0 ax)) "test1.c":221 -1
     (nil))
(insn 200 199 201 28 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 112 [ _26 ])
            (const_int 0 [0]))) "test1.c":221 -1
     (nil))
(jump_insn 201 200 202 28 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 209)
            (pc))) "test1.c":221 -1
     (nil)
 -> 209)
;;  succ:       29 (FALLTHRU)
;;              30

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL)
;;  pred:       28 (FALLTHRU)
(note 202 201 203 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 203 202 204 29 (set (reg:DI 155)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":222 -1
     (nil))
(insn 204 203 205 29 (set (reg:DI 5 di)
        (reg:DI 155)) "test1.c":222 -1
     (nil))
(call_insn 205 204 206 29 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("leftRotate") [flags 0x3]  <function_decl 0x7fddd77ee500 leftRotate>) [0 leftRotate S1 A8])
            (const_int 0 [0]))) "test1.c":222 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 206 205 207 29 (set (reg/f:DI 115 [ _34 ])
        (reg:DI 0 ax)) "test1.c":222 -1
     (nil))
(jump_insn 207 206 208 29 (set (pc)
        (label_ref 230)) "test1.c":222 -1
     (nil)
 -> 230)
;;  succ:       34

(barrier 208 207 209)
;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL)
;;  pred:       27
;;              28
(code_label 209 208 210 30 54 (nil) [2 uses])
(note 210 209 211 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 211 210 212 30 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -20 [0xffffffffffffffec])) [1 balance+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))) "test1.c":225 -1
     (nil))
(jump_insn 212 211 213 30 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 227)
            (pc))) "test1.c":225 -1
     (nil)
 -> 227)
;;  succ:       31 (FALLTHRU)
;;              33

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL)
;;  pred:       30 (FALLTHRU)
(note 213 212 214 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 214 213 215 31 (set (reg/f:DI 156)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":225 -1
     (nil))
(insn 215 214 216 31 (set (reg/f:DI 113 [ _27 ])
        (mem/f:DI (plus:DI (reg/f:DI 156)
                (const_int 16 [0x10])) [2 node_31->right+0 S8 A64])) "test1.c":225 -1
     (nil))
(insn 216 215 217 31 (set (reg:DI 5 di)
        (reg/f:DI 113 [ _27 ])) "test1.c":225 -1
     (nil))
(call_insn 217 216 218 31 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("heightDiff") [flags 0x3]  <function_decl 0x7fddd77ead00 heightDiff>) [0 heightDiff S1 A8])
            (const_int 0 [0]))) "test1.c":225 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 218 217 219 31 (set (reg:SI 114 [ _28 ])
        (reg:SI 0 ax)) "test1.c":225 -1
     (nil))
(insn 219 218 220 31 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 114 [ _28 ])
            (const_int 0 [0]))) "test1.c":225 -1
     (nil))
(jump_insn 220 219 221 31 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 227)
            (pc))) "test1.c":225 -1
     (nil)
 -> 227)
;;  succ:       32 (FALLTHRU)
;;              33

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL)
;;  pred:       31 (FALLTHRU)
(note 221 220 222 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 222 221 223 32 (set (reg:DI 157)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":227 -1
     (nil))
(insn 223 222 224 32 (set (reg:DI 5 di)
        (reg:DI 157)) "test1.c":227 -1
     (nil))
(call_insn 224 223 225 32 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("RightLeftRotate") [flags 0x3]  <function_decl 0x7fddd77ee900 RightLeftRotate>) [0 RightLeftRotate S1 A8])
            (const_int 0 [0]))) "test1.c":227 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 225 224 226 32 (set (reg:DI 158)
        (reg:DI 0 ax)) "test1.c":227 -1
     (nil))
(insn 226 225 227 32 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])
        (reg:DI 158)) "test1.c":227 -1
     (nil))
;;  succ:       33 (FALLTHRU)

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL)
;;  pred:       30
;;              31
;;              32 (FALLTHRU)
(code_label 227 226 228 33 55 (nil) [2 uses])
(note 228 227 229 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 229 228 230 33 (set (reg/f:DI 115 [ _34 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [2 node+0 S8 A64])) "test1.c":230 -1
     (nil))
;;  succ:       34 (FALLTHRU)

;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
;;              20
;;              23
;;              29
;;              33 (FALLTHRU)
(code_label 230 229 231 34 41 (nil) [4 uses])
(note 231 230 232 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 232 231 236 34 (set (reg/f:DI 117 [ <retval> ])
        (reg/f:DI 115 [ _34 ])) -1
     (nil))
(insn 236 232 237 34 (set (reg/i:DI 0 ax)
        (reg/f:DI 117 [ <retval> ])) "test1.c":231 -1
     (nil))
(insn 237 236 0 34 (use (reg/i:DI 0 ax)) "test1.c":231 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function findNode (findNode, funcdef_no=17, decl_uid=2826, cgraph_uid=17, symbol_order=17)

findNode (struct avlNode * node, int queryNum)
{
  struct avlNode * D.2957;
  int _1;
  struct AVLnode * _2;
  int _3;
  struct AVLnode * _4;
  struct avlNode * _14;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (node_7(D) != 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 7>; [0.00%]
;;    succ:       3
;;                7

;;   basic block 3, loop depth 0
;;    pred:       2
  _1 = node_7(D)->key;
  if (queryNum_9(D) < _1)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]
;;    succ:       4
;;                5

;;   basic block 4, loop depth 0
;;    pred:       3
  _2 = node_7(D)->left;
  node_13 = findNode (_2, queryNum_9(D));
  goto <bb 7>; [0.00%]
;;    succ:       7

;;   basic block 5, loop depth 0
;;    pred:       3
  _3 = node_7(D)->key;
  if (queryNum_9(D) > _3)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]
;;    succ:       6
;;                7

;;   basic block 6, loop depth 0
;;    pred:       5
  _4 = node_7(D)->right;
  node_11 = findNode (_4, queryNum_9(D));
;;    succ:       7

;;   basic block 7, loop depth 0
;;    pred:       2
;;                4
;;                5
;;                6
  # node_5 = PHI <node_7(D)(2), node_13(4), node_7(D)(5), node_11(6)>
  _14 = node_5;
;;    succ:       8

;;   basic block 8, loop depth 0
;;    pred:       7
<L7> [0.00%]:
  return _14;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (node_5 - 5 )
Partition 7 (node_7(D) - 7 )
Partition 9 (queryNum_9(D) - 9 )
Partition 11 (node_11 - 11 )
Partition 13 (node_13 - 13 )
Partition 14 (_14 - 14 )
Partition 15 (_15(D) - 15 )


Partition map 

Partition 0 (node_5 - 5 )
Partition 1 (node_7(D) - 7 )
Partition 2 (queryNum_9(D) - 9 )
Partition 3 (node_11 - 11 )
Partition 4 (node_13 - 13 )
Partition 5 (_15(D) - 15 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483647, 0) node_5 <-> node_7(D)
(2147483647, 0) node_5 <-> node_11
(2147483647, 0) node_5 <-> node_13

Partition map 

Partition 0 (node_5 - 5 )
Partition 1 (node_7(D) - 7 )
Partition 2 (queryNum_9(D) - 9 )
Partition 3 (node_11 - 11 )
Partition 4 (node_13 - 13 )
Partition 5 (_15(D) - 15 )

Coalesce list: (5)node_5 & (7)node_7(D) [map: 0, 1] : Success -> 0
Coalesce list: (5)node_5 & (11)node_11 [map: 0, 3] : Success -> 0
Coalesce list: (5)node_5 & (13)node_13 [map: 0, 4] : Success -> 0
Coalesce list: (5)node_5 & (11)node_5: Already Coalesced.
Coalesce list: (5)node_5 & (13)node_5: Already Coalesced.
After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (node_5 - 5 7 11 13 )
Partition 5 (queryNum_9(D) - 9 )
Partition 6 (_14 - 14 )
Partition 7 (_15(D) - 15 )

findNode (struct avlNode * node, int queryNum)
{
  struct avlNode * D.2957;
  int _1;
  struct AVLnode * _2;
  int _3;
  struct AVLnode * _4;
  struct avlNode * _14;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (node_7(D) != 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 7>; [0.00%]
;;    succ:       3
;;                7

;;   basic block 3, loop depth 0
;;    pred:       2
  _1 = node_7(D)->key;
  if (queryNum_9(D) < _1)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]
;;    succ:       4
;;                5

;;   basic block 4, loop depth 0
;;    pred:       3
  _2 = node_7(D)->left;
  node_13 = findNode (_2, queryNum_9(D));
  goto <bb 7>; [0.00%]
;;    succ:       7

;;   basic block 5, loop depth 0
;;    pred:       3
  _3 = node_7(D)->key;
  if (queryNum_9(D) > _3)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]
;;    succ:       6
;;                7

;;   basic block 6, loop depth 0
;;    pred:       5
  _4 = node_7(D)->right;
  node_11 = findNode (_4, queryNum_9(D));
;;    succ:       7

;;   basic block 7, loop depth 0
;;    pred:       2
;;                4
;;                5
;;                6
  # node_5 = PHI <node_7(D)(2), node_13(4), node_7(D)(5), node_11(6)>
  _14 = node_5;
;;    succ:       8

;;   basic block 8, loop depth 0
;;    pred:       7
<L7> [0.00%]:
  return _14;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; if (node_7(D) != 0B)

(insn 7 6 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])
            (const_int 0 [0]))) "test1.c":235 -1
     (nil))

(jump_insn 8 7 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":235 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; _1 = node_7(D)->key;

(insn 10 9 11 (set (reg/f:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":237 -1
     (nil))

(insn 11 10 0 (set (reg:SI 87 [ _1 ])
        (mem:SI (reg/f:DI 93) [1 node_7(D)->key+0 S4 A64])) "test1.c":237 -1
     (nil))

;; if (queryNum_9(D) < _1)

(insn 12 11 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -12 [0xfffffffffffffff4])) [1 queryNum+0 S4 A32])
            (reg:SI 87 [ _1 ]))) "test1.c":237 -1
     (nil))

(jump_insn 13 12 0 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":237 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; _2 = node_7(D)->left;

(insn 15 14 16 (set (reg/f:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":238 -1
     (nil))

(insn 16 15 0 (set (reg/f:DI 88 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 94)
                (const_int 8 [0x8])) [2 node_7(D)->left+0 S8 A64])) "test1.c":238 -1
     (nil))

;; node_13 = findNode (_2, queryNum_9(D));

(insn 17 16 18 (set (reg:SI 95)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 queryNum+0 S4 A32])) "test1.c":238 -1
     (nil))

(insn 18 17 19 (set (reg:SI 4 si)
        (reg:SI 95)) "test1.c":238 -1
     (nil))

(insn 19 18 20 (set (reg:DI 5 di)
        (reg/f:DI 88 [ _2 ])) "test1.c":238 -1
     (nil))

(call_insn 20 19 21 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("findNode") [flags 0x3]  <function_decl 0x7fddd77eef00 findNode>) [0 findNode S1 A8])
            (const_int 0 [0]))) "test1.c":238 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))

(insn 21 20 22 (set (reg:DI 96)
        (reg:DI 0 ax)) "test1.c":238 -1
     (nil))

(insn 22 21 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])
        (reg:DI 96)) "test1.c":238 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; 

(code_label 25 24 26 58 (nil) [0 uses])

(note 26 25 0 NOTE_INSN_BASIC_BLOCK)

;; _3 = node_7(D)->key;

(insn 27 26 28 (set (reg/f:DI 97)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":239 -1
     (nil))

(insn 28 27 0 (set (reg:SI 89 [ _3 ])
        (mem:SI (reg/f:DI 97) [1 node_7(D)->key+0 S4 A64])) "test1.c":239 -1
     (nil))

;; if (queryNum_9(D) > _3)

(insn 29 28 30 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -12 [0xfffffffffffffff4])) [1 queryNum+0 S4 A32])
            (reg:SI 89 [ _3 ]))) "test1.c":239 -1
     (nil))

(jump_insn 30 29 0 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":239 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; _4 = node_7(D)->right;

(insn 32 31 33 (set (reg/f:DI 98)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":240 -1
     (nil))

(insn 33 32 0 (set (reg/f:DI 90 [ _4 ])
        (mem/f:DI (plus:DI (reg/f:DI 98)
                (const_int 16 [0x10])) [2 node_7(D)->right+0 S8 A64])) "test1.c":240 -1
     (nil))

;; node_11 = findNode (_4, queryNum_9(D));

(insn 34 33 35 (set (reg:SI 99)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 queryNum+0 S4 A32])) "test1.c":240 -1
     (nil))

(insn 35 34 36 (set (reg:SI 4 si)
        (reg:SI 99)) "test1.c":240 -1
     (nil))

(insn 36 35 37 (set (reg:DI 5 di)
        (reg/f:DI 90 [ _4 ])) "test1.c":240 -1
     (nil))

(call_insn 37 36 38 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("findNode") [flags 0x3]  <function_decl 0x7fddd77eef00 findNode>) [0 findNode S1 A8])
            (const_int 0 [0]))) "test1.c":240 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))

(insn 38 37 39 (set (reg:DI 100)
        (reg:DI 0 ax)) "test1.c":240 -1
     (nil))

(insn 39 38 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])
        (reg:DI 100)) "test1.c":240 -1
     (nil))

;; Generating RTL for gimple basic block 7

;; 

(code_label 40 39 41 57 (nil) [0 uses])

(note 41 40 0 NOTE_INSN_BASIC_BLOCK)

;; _14 = node_5;

(insn 42 41 0 (set (reg/f:DI 91 [ _14 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":243 -1
     (nil))

;; Generating RTL for gimple basic block 8

;; <L7> [0.00%]:

(code_label 43 42 44 59 (nil) [0 uses])

(note 44 43 0 NOTE_INSN_BASIC_BLOCK)

;; return _14;

(insn 45 44 46 (set (reg/f:DI 92 [ <retval> ])
        (reg/f:DI 91 [ _14 ])) "test1.c":243 -1
     (nil))

(jump_insn 46 45 47 (set (pc)
        (label_ref 0)) "test1.c":243 -1
     (nil))

(barrier 47 46 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 9 into block 8...
Merged blocks 8 and 9.
Merged 8 and 9 without moving.
Removing jump 46.
Merging block 10 into block 8...
Merged blocks 8 and 10.
Merged 8 and 10 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])
        (reg:DI 5 di [ node ])) "test1.c":234 -1
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 queryNum+0 S4 A32])
        (reg:SI 4 si [ queryNum ])) "test1.c":234 -1
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])
            (const_int 0 [0]))) "test1.c":235 -1
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 40)
            (pc))) "test1.c":235 -1
     (nil)
 -> 40)
;;  succ:       4 (FALLTHRU)
;;              8

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 9 8 10 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 4 (set (reg/f:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":237 -1
     (nil))
(insn 11 10 12 4 (set (reg:SI 87 [ _1 ])
        (mem:SI (reg/f:DI 93) [1 node_7(D)->key+0 S4 A64])) "test1.c":237 -1
     (nil))
(insn 12 11 13 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -12 [0xfffffffffffffff4])) [1 queryNum+0 S4 A32])
            (reg:SI 87 [ _1 ]))) "test1.c":237 -1
     (nil))
(jump_insn 13 12 14 4 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 25)
            (pc))) "test1.c":237 -1
     (nil)
 -> 25)
;;  succ:       5 (FALLTHRU)
;;              6

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 (FALLTHRU)
(note 14 13 15 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 5 (set (reg/f:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":238 -1
     (nil))
(insn 16 15 17 5 (set (reg/f:DI 88 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 94)
                (const_int 8 [0x8])) [2 node_7(D)->left+0 S8 A64])) "test1.c":238 -1
     (nil))
(insn 17 16 18 5 (set (reg:SI 95)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 queryNum+0 S4 A32])) "test1.c":238 -1
     (nil))
(insn 18 17 19 5 (set (reg:SI 4 si)
        (reg:SI 95)) "test1.c":238 -1
     (nil))
(insn 19 18 20 5 (set (reg:DI 5 di)
        (reg/f:DI 88 [ _2 ])) "test1.c":238 -1
     (nil))
(call_insn 20 19 21 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("findNode") [flags 0x3]  <function_decl 0x7fddd77eef00 findNode>) [0 findNode S1 A8])
            (const_int 0 [0]))) "test1.c":238 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 21 20 22 5 (set (reg:DI 96)
        (reg:DI 0 ax)) "test1.c":238 -1
     (nil))
(insn 22 21 23 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])
        (reg:DI 96)) "test1.c":238 -1
     (nil))
(jump_insn 23 22 24 5 (set (pc)
        (label_ref 40)) -1
     (nil)
 -> 40)
;;  succ:       8

(barrier 24 23 25)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
(code_label 25 24 26 6 58 (nil) [1 uses])
(note 26 25 27 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 6 (set (reg/f:DI 97)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":239 -1
     (nil))
(insn 28 27 29 6 (set (reg:SI 89 [ _3 ])
        (mem:SI (reg/f:DI 97) [1 node_7(D)->key+0 S4 A64])) "test1.c":239 -1
     (nil))
(insn 29 28 30 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -12 [0xfffffffffffffff4])) [1 queryNum+0 S4 A32])
            (reg:SI 89 [ _3 ]))) "test1.c":239 -1
     (nil))
(jump_insn 30 29 31 6 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 40)
            (pc))) "test1.c":239 -1
     (nil)
 -> 40)
;;  succ:       7 (FALLTHRU)
;;              8

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       6 (FALLTHRU)
(note 31 30 32 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 7 (set (reg/f:DI 98)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":240 -1
     (nil))
(insn 33 32 34 7 (set (reg/f:DI 90 [ _4 ])
        (mem/f:DI (plus:DI (reg/f:DI 98)
                (const_int 16 [0x10])) [2 node_7(D)->right+0 S8 A64])) "test1.c":240 -1
     (nil))
(insn 34 33 35 7 (set (reg:SI 99)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 queryNum+0 S4 A32])) "test1.c":240 -1
     (nil))
(insn 35 34 36 7 (set (reg:SI 4 si)
        (reg:SI 99)) "test1.c":240 -1
     (nil))
(insn 36 35 37 7 (set (reg:DI 5 di)
        (reg/f:DI 90 [ _4 ])) "test1.c":240 -1
     (nil))
(call_insn 37 36 38 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("findNode") [flags 0x3]  <function_decl 0x7fddd77eef00 findNode>) [0 findNode S1 A8])
            (const_int 0 [0]))) "test1.c":240 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 38 37 39 7 (set (reg:DI 100)
        (reg:DI 0 ax)) "test1.c":240 -1
     (nil))
(insn 39 38 40 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])
        (reg:DI 100)) "test1.c":240 -1
     (nil))
;;  succ:       8 (FALLTHRU)

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              5
;;              6
;;              7 (FALLTHRU)
(code_label 40 39 41 8 57 (nil) [3 uses])
(note 41 40 42 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 45 8 (set (reg/f:DI 91 [ _14 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":243 -1
     (nil))
(insn 45 42 49 8 (set (reg/f:DI 92 [ <retval> ])
        (reg/f:DI 91 [ _14 ])) "test1.c":243 -1
     (nil))
(insn 49 45 50 8 (set (reg/i:DI 0 ax)
        (reg/f:DI 92 [ <retval> ])) "test1.c":244 -1
     (nil))
(insn 50 49 0 8 (use (reg/i:DI 0 ax)) "test1.c":244 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function printPreOrder (printPreOrder, funcdef_no=18, decl_uid=2829, cgraph_uid=18, symbol_order=18)

printPreOrder (struct avlNode * node)
{
  int _1;
  struct AVLnode * _2;
  struct AVLnode * _3;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (node_5(D) == 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  goto <bb 5> (<L2>); [0.00%]
;;    succ:       5

;;   basic block 4, loop depth 0
;;    pred:       2
  _1 = node_5(D)->key;
  printf ("  %d  ", _1);
  _2 = node_5(D)->left;
  printPreOrder (_2);
  _3 = node_5(D)->right;
  printPreOrder (_3);
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
<L2> [0.00%]:
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 5 (node_5(D) - 5 )


Partition map 

Partition 0 (node_5(D) - 5 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (node_5(D) - 5 )

After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (node_5(D) - 5 )

printPreOrder (struct avlNode * node)
{
  int _1;
  struct AVLnode * _2;
  struct AVLnode * _3;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (node_5(D) == 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  goto <bb 5> (<L2>); [0.00%]
;;    succ:       5

;;   basic block 4, loop depth 0
;;    pred:       2
  _1 = node_5(D)->key;
  printf ("  %d  ", _1);
  _2 = node_5(D)->left;
  printPreOrder (_2);
  _3 = node_5(D)->right;
  printPreOrder (_3);
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
<L2> [0.00%]:
  return;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; if (node_5(D) == 0B)

(insn 6 5 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])
            (const_int 0 [0]))) "test1.c":248 -1
     (nil))

(jump_insn 7 6 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":248 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; Generating RTL for gimple basic block 4

;; 

(code_label 11 10 12 61 (nil) [0 uses])

(note 12 11 0 NOTE_INSN_BASIC_BLOCK)

;; _1 = node_5(D)->key;

(insn 13 12 14 (set (reg/f:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":251 -1
     (nil))

(insn 14 13 0 (set (reg:SI 87 [ _1 ])
        (mem:SI (reg/f:DI 90) [1 node_5(D)->key+0 S4 A64])) "test1.c":251 -1
     (nil))

;; printf ("  %d  ", _1);

(insn 15 14 16 (set (reg:SI 4 si)
        (reg:SI 87 [ _1 ])) "test1.c":251 -1
     (nil))

(insn 16 15 17 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7fddd7490f30 *.LC3>)) "test1.c":251 -1
     (nil))

(insn 17 16 18 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":251 -1
     (nil))

(call_insn 18 17 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fddd76aef00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":251 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))

;; _2 = node_5(D)->left;

(insn 19 18 20 (set (reg/f:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":252 -1
     (nil))

(insn 20 19 0 (set (reg/f:DI 88 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 91)
                (const_int 8 [0x8])) [2 node_5(D)->left+0 S8 A64])) "test1.c":252 -1
     (nil))

;; printPreOrder (_2);

(insn 21 20 22 (set (reg:DI 5 di)
        (reg/f:DI 88 [ _2 ])) "test1.c":252 -1
     (nil))

(call_insn 22 21 0 (call (mem:QI (symbol_ref:DI ("printPreOrder") [flags 0x3]  <function_decl 0x7fddd77fa100 printPreOrder>) [0 printPreOrder S1 A8])
        (const_int 0 [0])) "test1.c":252 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; _3 = node_5(D)->right;

(insn 23 22 24 (set (reg/f:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":253 -1
     (nil))

(insn 24 23 0 (set (reg/f:DI 89 [ _3 ])
        (mem/f:DI (plus:DI (reg/f:DI 92)
                (const_int 16 [0x10])) [2 node_5(D)->right+0 S8 A64])) "test1.c":253 -1
     (nil))

;; printPreOrder (_3);

(insn 25 24 26 (set (reg:DI 5 di)
        (reg/f:DI 89 [ _3 ])) "test1.c":253 -1
     (nil))

(call_insn 26 25 0 (call (mem:QI (symbol_ref:DI ("printPreOrder") [flags 0x3]  <function_decl 0x7fddd77fa100 printPreOrder>) [0 printPreOrder S1 A8])
        (const_int 0 [0])) "test1.c":253 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; Generating RTL for gimple basic block 5

;; <L2> [0.00%]:

(code_label 27 26 28 62 (nil) [0 uses])

(note 28 27 0 NOTE_INSN_BASIC_BLOCK)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Forwarding edge 2->4 to 7 failed.
Forwarding edge 2->4 to 7 failed.
Redirecting jump 9 from 6 to 7.
Merging block 6 into block 5...
Merged blocks 5 and 6.
Merged 5 and 6 without moving.


try_optimize_cfg iteration 2

Forwarding edge 2->4 to 7 failed.
fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])
        (reg:DI 5 di [ node ])) "test1.c":247 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])
            (const_int 0 [0]))) "test1.c":248 -1
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 11)
            (pc))) "test1.c":248 -1
     (nil)
 -> 11)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
(note 8 7 9 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 9 8 10 4 (set (pc)
        (label_ref:DI 29)) "test1.c":249 659 {jump}
     (nil)
 -> 29)
;;  succ:       7 [100.0%] 

(barrier 10 9 11)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 11 10 12 5 61 (nil) [1 uses])
(note 12 11 13 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 5 (set (reg/f:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":251 -1
     (nil))
(insn 14 13 15 5 (set (reg:SI 87 [ _1 ])
        (mem:SI (reg/f:DI 90) [1 node_5(D)->key+0 S4 A64])) "test1.c":251 -1
     (nil))
(insn 15 14 16 5 (set (reg:SI 4 si)
        (reg:SI 87 [ _1 ])) "test1.c":251 -1
     (nil))
(insn 16 15 17 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7fddd7490f30 *.LC3>)) "test1.c":251 -1
     (nil))
(insn 17 16 18 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":251 -1
     (nil))
(call_insn 18 17 19 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fddd76aef00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":251 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 19 18 20 5 (set (reg/f:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":252 -1
     (nil))
(insn 20 19 21 5 (set (reg/f:DI 88 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 91)
                (const_int 8 [0x8])) [2 node_5(D)->left+0 S8 A64])) "test1.c":252 -1
     (nil))
(insn 21 20 22 5 (set (reg:DI 5 di)
        (reg/f:DI 88 [ _2 ])) "test1.c":252 -1
     (nil))
(call_insn 22 21 23 5 (call (mem:QI (symbol_ref:DI ("printPreOrder") [flags 0x3]  <function_decl 0x7fddd77fa100 printPreOrder>) [0 printPreOrder S1 A8])
        (const_int 0 [0])) "test1.c":252 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 23 22 24 5 (set (reg/f:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":253 -1
     (nil))
(insn 24 23 25 5 (set (reg/f:DI 89 [ _3 ])
        (mem/f:DI (plus:DI (reg/f:DI 92)
                (const_int 16 [0x10])) [2 node_5(D)->right+0 S8 A64])) "test1.c":253 -1
     (nil))
(insn 25 24 26 5 (set (reg:DI 5 di)
        (reg/f:DI 89 [ _3 ])) "test1.c":253 -1
     (nil))
(call_insn 26 25 29 5 (call (mem:QI (symbol_ref:DI ("printPreOrder") [flags 0x3]  <function_decl 0x7fddd77fa100 printPreOrder>) [0 printPreOrder S1 A8])
        (const_int 0 [0])) "test1.c":253 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       7 (FALLTHRU)

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
;;              4 [100.0%] 
(code_label 29 26 30 7 60 (nil) [1 uses])
(note 30 29 0 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function printInOrder (printInOrder, funcdef_no=19, decl_uid=2832, cgraph_uid=19, symbol_order=19)

printInOrder (struct avlNode * node)
{
  struct AVLnode * _1;
  int _2;
  struct AVLnode * _3;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (node_5(D) == 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  goto <bb 5> (<L2>); [0.00%]
;;    succ:       5

;;   basic block 4, loop depth 0
;;    pred:       2
  _1 = node_5(D)->left;
  printInOrder (_1);
  _2 = node_5(D)->key;
  printf ("  %d  ", _2);
  _3 = node_5(D)->right;
  printInOrder (_3);
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
<L2> [0.00%]:
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 5 (node_5(D) - 5 )


Partition map 

Partition 0 (node_5(D) - 5 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (node_5(D) - 5 )

After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (node_5(D) - 5 )

printInOrder (struct avlNode * node)
{
  struct AVLnode * _1;
  int _2;
  struct AVLnode * _3;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (node_5(D) == 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  goto <bb 5> (<L2>); [0.00%]
;;    succ:       5

;;   basic block 4, loop depth 0
;;    pred:       2
  _1 = node_5(D)->left;
  printInOrder (_1);
  _2 = node_5(D)->key;
  printf ("  %d  ", _2);
  _3 = node_5(D)->right;
  printInOrder (_3);
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
<L2> [0.00%]:
  return;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; if (node_5(D) == 0B)

(insn 6 5 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])
            (const_int 0 [0]))) "test1.c":258 -1
     (nil))

(jump_insn 7 6 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":258 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; Generating RTL for gimple basic block 4

;; 

(code_label 11 10 12 65 (nil) [0 uses])

(note 12 11 0 NOTE_INSN_BASIC_BLOCK)

;; _1 = node_5(D)->left;

(insn 13 12 14 (set (reg/f:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":260 -1
     (nil))

(insn 14 13 0 (set (reg/f:DI 87 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 90)
                (const_int 8 [0x8])) [2 node_5(D)->left+0 S8 A64])) "test1.c":260 -1
     (nil))

;; printInOrder (_1);

(insn 15 14 16 (set (reg:DI 5 di)
        (reg/f:DI 87 [ _1 ])) "test1.c":260 -1
     (nil))

(call_insn 16 15 0 (call (mem:QI (symbol_ref:DI ("printInOrder") [flags 0x3]  <function_decl 0x7fddd77fa300 printInOrder>) [0 printInOrder S1 A8])
        (const_int 0 [0])) "test1.c":260 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; _2 = node_5(D)->key;

(insn 17 16 18 (set (reg/f:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":261 -1
     (nil))

(insn 18 17 0 (set (reg:SI 88 [ _2 ])
        (mem:SI (reg/f:DI 91) [1 node_5(D)->key+0 S4 A64])) "test1.c":261 -1
     (nil))

;; printf ("  %d  ", _2);

(insn 19 18 20 (set (reg:SI 4 si)
        (reg:SI 88 [ _2 ])) "test1.c":261 -1
     (nil))

(insn 20 19 21 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7fddd7490f30 *.LC3>)) "test1.c":261 -1
     (nil))

(insn 21 20 22 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":261 -1
     (nil))

(call_insn 22 21 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fddd76aef00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":261 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))

;; _3 = node_5(D)->right;

(insn 23 22 24 (set (reg/f:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":262 -1
     (nil))

(insn 24 23 0 (set (reg/f:DI 89 [ _3 ])
        (mem/f:DI (plus:DI (reg/f:DI 92)
                (const_int 16 [0x10])) [2 node_5(D)->right+0 S8 A64])) "test1.c":262 -1
     (nil))

;; printInOrder (_3);

(insn 25 24 26 (set (reg:DI 5 di)
        (reg/f:DI 89 [ _3 ])) "test1.c":262 -1
     (nil))

(call_insn 26 25 0 (call (mem:QI (symbol_ref:DI ("printInOrder") [flags 0x3]  <function_decl 0x7fddd77fa300 printInOrder>) [0 printInOrder S1 A8])
        (const_int 0 [0])) "test1.c":262 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; Generating RTL for gimple basic block 5

;; <L2> [0.00%]:

(code_label 27 26 28 66 (nil) [0 uses])

(note 28 27 0 NOTE_INSN_BASIC_BLOCK)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Forwarding edge 2->4 to 7 failed.
Forwarding edge 2->4 to 7 failed.
Redirecting jump 9 from 6 to 7.
Merging block 6 into block 5...
Merged blocks 5 and 6.
Merged 5 and 6 without moving.


try_optimize_cfg iteration 2

Forwarding edge 2->4 to 7 failed.
fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])
        (reg:DI 5 di [ node ])) "test1.c":257 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])
            (const_int 0 [0]))) "test1.c":258 -1
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 11)
            (pc))) "test1.c":258 -1
     (nil)
 -> 11)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
(note 8 7 9 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 9 8 10 4 (set (pc)
        (label_ref:DI 29)) "test1.c":259 659 {jump}
     (nil)
 -> 29)
;;  succ:       7 [100.0%] 

(barrier 10 9 11)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 11 10 12 5 65 (nil) [1 uses])
(note 12 11 13 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 5 (set (reg/f:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":260 -1
     (nil))
(insn 14 13 15 5 (set (reg/f:DI 87 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 90)
                (const_int 8 [0x8])) [2 node_5(D)->left+0 S8 A64])) "test1.c":260 -1
     (nil))
(insn 15 14 16 5 (set (reg:DI 5 di)
        (reg/f:DI 87 [ _1 ])) "test1.c":260 -1
     (nil))
(call_insn 16 15 17 5 (call (mem:QI (symbol_ref:DI ("printInOrder") [flags 0x3]  <function_decl 0x7fddd77fa300 printInOrder>) [0 printInOrder S1 A8])
        (const_int 0 [0])) "test1.c":260 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 17 16 18 5 (set (reg/f:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":261 -1
     (nil))
(insn 18 17 19 5 (set (reg:SI 88 [ _2 ])
        (mem:SI (reg/f:DI 91) [1 node_5(D)->key+0 S4 A64])) "test1.c":261 -1
     (nil))
(insn 19 18 20 5 (set (reg:SI 4 si)
        (reg:SI 88 [ _2 ])) "test1.c":261 -1
     (nil))
(insn 20 19 21 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7fddd7490f30 *.LC3>)) "test1.c":261 -1
     (nil))
(insn 21 20 22 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":261 -1
     (nil))
(call_insn 22 21 23 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fddd76aef00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":261 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 23 22 24 5 (set (reg/f:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":262 -1
     (nil))
(insn 24 23 25 5 (set (reg/f:DI 89 [ _3 ])
        (mem/f:DI (plus:DI (reg/f:DI 92)
                (const_int 16 [0x10])) [2 node_5(D)->right+0 S8 A64])) "test1.c":262 -1
     (nil))
(insn 25 24 26 5 (set (reg:DI 5 di)
        (reg/f:DI 89 [ _3 ])) "test1.c":262 -1
     (nil))
(call_insn 26 25 29 5 (call (mem:QI (symbol_ref:DI ("printInOrder") [flags 0x3]  <function_decl 0x7fddd77fa300 printInOrder>) [0 printInOrder S1 A8])
        (const_int 0 [0])) "test1.c":262 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       7 (FALLTHRU)

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
;;              4 [100.0%] 
(code_label 29 26 30 7 64 (nil) [1 uses])
(note 30 29 0 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function printPostOrder (printPostOrder, funcdef_no=20, decl_uid=2835, cgraph_uid=20, symbol_order=20)

printPostOrder (struct avlNode * node)
{
  struct AVLnode * _1;
  struct AVLnode * _2;
  int _3;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (node_5(D) == 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  goto <bb 5> (<L2>); [0.00%]
;;    succ:       5

;;   basic block 4, loop depth 0
;;    pred:       2
  _1 = node_5(D)->left;
  printPostOrder (_1);
  _2 = node_5(D)->right;
  printPostOrder (_2);
  _3 = node_5(D)->key;
  printf ("  %d  ", _3);
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
<L2> [0.00%]:
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 5 (node_5(D) - 5 )


Partition map 

Partition 0 (node_5(D) - 5 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (node_5(D) - 5 )

After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (node_5(D) - 5 )

printPostOrder (struct avlNode * node)
{
  struct AVLnode * _1;
  struct AVLnode * _2;
  int _3;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (node_5(D) == 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  goto <bb 5> (<L2>); [0.00%]
;;    succ:       5

;;   basic block 4, loop depth 0
;;    pred:       2
  _1 = node_5(D)->left;
  printPostOrder (_1);
  _2 = node_5(D)->right;
  printPostOrder (_2);
  _3 = node_5(D)->key;
  printf ("  %d  ", _3);
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
<L2> [0.00%]:
  return;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; if (node_5(D) == 0B)

(insn 6 5 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])
            (const_int 0 [0]))) "test1.c":267 -1
     (nil))

(jump_insn 7 6 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":267 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; Generating RTL for gimple basic block 4

;; 

(code_label 11 10 12 69 (nil) [0 uses])

(note 12 11 0 NOTE_INSN_BASIC_BLOCK)

;; _1 = node_5(D)->left;

(insn 13 12 14 (set (reg/f:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":269 -1
     (nil))

(insn 14 13 0 (set (reg/f:DI 87 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 90)
                (const_int 8 [0x8])) [2 node_5(D)->left+0 S8 A64])) "test1.c":269 -1
     (nil))

;; printPostOrder (_1);

(insn 15 14 16 (set (reg:DI 5 di)
        (reg/f:DI 87 [ _1 ])) "test1.c":269 -1
     (nil))

(call_insn 16 15 0 (call (mem:QI (symbol_ref:DI ("printPostOrder") [flags 0x3]  <function_decl 0x7fddd77fa500 printPostOrder>) [0 printPostOrder S1 A8])
        (const_int 0 [0])) "test1.c":269 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; _2 = node_5(D)->right;

(insn 17 16 18 (set (reg/f:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":270 -1
     (nil))

(insn 18 17 0 (set (reg/f:DI 88 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 91)
                (const_int 16 [0x10])) [2 node_5(D)->right+0 S8 A64])) "test1.c":270 -1
     (nil))

;; printPostOrder (_2);

(insn 19 18 20 (set (reg:DI 5 di)
        (reg/f:DI 88 [ _2 ])) "test1.c":270 -1
     (nil))

(call_insn 20 19 0 (call (mem:QI (symbol_ref:DI ("printPostOrder") [flags 0x3]  <function_decl 0x7fddd77fa500 printPostOrder>) [0 printPostOrder S1 A8])
        (const_int 0 [0])) "test1.c":270 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; _3 = node_5(D)->key;

(insn 21 20 22 (set (reg/f:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":271 -1
     (nil))

(insn 22 21 0 (set (reg:SI 89 [ _3 ])
        (mem:SI (reg/f:DI 92) [1 node_5(D)->key+0 S4 A64])) "test1.c":271 -1
     (nil))

;; printf ("  %d  ", _3);

(insn 23 22 24 (set (reg:SI 4 si)
        (reg:SI 89 [ _3 ])) "test1.c":271 -1
     (nil))

(insn 24 23 25 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7fddd7490f30 *.LC3>)) "test1.c":271 -1
     (nil))

(insn 25 24 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":271 -1
     (nil))

(call_insn 26 25 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fddd76aef00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":271 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))

;; Generating RTL for gimple basic block 5

;; <L2> [0.00%]:

(code_label 27 26 28 70 (nil) [0 uses])

(note 28 27 0 NOTE_INSN_BASIC_BLOCK)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Forwarding edge 2->4 to 7 failed.
Forwarding edge 2->4 to 7 failed.
Redirecting jump 9 from 6 to 7.
Merging block 6 into block 5...
Merged blocks 5 and 6.
Merged 5 and 6 without moving.


try_optimize_cfg iteration 2

Forwarding edge 2->4 to 7 failed.
fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])
        (reg:DI 5 di [ node ])) "test1.c":266 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])
            (const_int 0 [0]))) "test1.c":267 -1
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 11)
            (pc))) "test1.c":267 -1
     (nil)
 -> 11)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
(note 8 7 9 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 9 8 10 4 (set (pc)
        (label_ref:DI 29)) "test1.c":268 659 {jump}
     (nil)
 -> 29)
;;  succ:       7 [100.0%] 

(barrier 10 9 11)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 11 10 12 5 69 (nil) [1 uses])
(note 12 11 13 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 5 (set (reg/f:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":269 -1
     (nil))
(insn 14 13 15 5 (set (reg/f:DI 87 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 90)
                (const_int 8 [0x8])) [2 node_5(D)->left+0 S8 A64])) "test1.c":269 -1
     (nil))
(insn 15 14 16 5 (set (reg:DI 5 di)
        (reg/f:DI 87 [ _1 ])) "test1.c":269 -1
     (nil))
(call_insn 16 15 17 5 (call (mem:QI (symbol_ref:DI ("printPostOrder") [flags 0x3]  <function_decl 0x7fddd77fa500 printPostOrder>) [0 printPostOrder S1 A8])
        (const_int 0 [0])) "test1.c":269 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 17 16 18 5 (set (reg/f:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":270 -1
     (nil))
(insn 18 17 19 5 (set (reg/f:DI 88 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 91)
                (const_int 16 [0x10])) [2 node_5(D)->right+0 S8 A64])) "test1.c":270 -1
     (nil))
(insn 19 18 20 5 (set (reg:DI 5 di)
        (reg/f:DI 88 [ _2 ])) "test1.c":270 -1
     (nil))
(call_insn 20 19 21 5 (call (mem:QI (symbol_ref:DI ("printPostOrder") [flags 0x3]  <function_decl 0x7fddd77fa500 printPostOrder>) [0 printPostOrder S1 A8])
        (const_int 0 [0])) "test1.c":270 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 21 20 22 5 (set (reg/f:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [2 node+0 S8 A64])) "test1.c":271 -1
     (nil))
(insn 22 21 23 5 (set (reg:SI 89 [ _3 ])
        (mem:SI (reg/f:DI 92) [1 node_5(D)->key+0 S4 A64])) "test1.c":271 -1
     (nil))
(insn 23 22 24 5 (set (reg:SI 4 si)
        (reg:SI 89 [ _3 ])) "test1.c":271 -1
     (nil))
(insn 24 23 25 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7fddd7490f30 *.LC3>)) "test1.c":271 -1
     (nil))
(insn 25 24 26 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":271 -1
     (nil))
(call_insn 26 25 29 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fddd76aef00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":271 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
;;  succ:       7 (FALLTHRU)

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
;;              4 [100.0%] 
(code_label 29 26 30 7 68 (nil) [1 uses])
(note 30 29 0 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function main (main, funcdef_no=21, decl_uid=2837, cgraph_uid=21, symbol_order=21)

main ()
{
  struct avlNode * tempNode;
  struct avlNode * root;
  int queryNum;
  int insertNum;
  int flag;
  int choice;
  int D.2977;
  int choice.1_1;
  int insertNum.2_2;
  int insertNum.3_3;
  int insertNum.4_4;
  int queryNum.5_5;
  int queryNum.6_6;
  int queryNum.7_7;
  int queryNum.8_8;
  int queryNum.9_9;
  int _10;
  int queryNum.10_11;
  int _23;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  flag_20 = 1;
  root_21 = 0B;
  goto <bb 22>; [0.00%]
;;    succ:       22

;;   basic block 3, loop depth 1
;;    pred:       22
  __builtin_puts (&"\n\nEnter the Step to Run : "[0]);
  __builtin_puts (&"\t1: Insert a node into AVL tree"[0]);
  __builtin_puts (&"\t2: Delete a node in AVL tree"[0]);
  __builtin_puts (&"\t3: Search a node into AVL tree"[0]);
  __builtin_puts (&"\t4: printPreOrder (Ro L R) Tree"[0]);
  __builtin_puts (&"\t5: printInOrder (L Ro R) Tree"[0]);
  __builtin_puts (&"\t6: printPostOrder (L R Ro) Tree"[0]);
  __builtin_puts (&"\t7: printAVL Tree"[0]);
  __builtin_puts (&"\t0: EXIT"[0]);
  scanf ("%d", &choice);
  choice.1_1 = choice;
  switch (choice.1_1) <default: <L18> [0.00%], case 0: <L1> [0.00%], case 1: <L2> [0.00%], case 2: <L6> [0.00%], case 3: <L10> [0.00%], case 4: <L14> [0.00%], case 5: <L15> [0.00%], case 6: <L16> [0.00%], case 7: <L17> [0.00%]>
;;    succ:       21
;;                4
;;                5
;;                9
;;                13
;;                17
;;                18
;;                19
;;                20

;;   basic block 4, loop depth 1
;;    pred:       3
<L1> [0.00%]:
  flag_80 = 0;
  __builtin_puts (&"\n\t\tExiting, Thank You !!"[0]);
  root_91 = root_15;
  goto <bb 22>; [0.00%]
;;    succ:       22

;;   basic block 5, loop depth 1
;;    pred:       3
<L2> [0.00%]:
  printf ("\n\tEnter the Number to insert: ");
  scanf ("%d", &insertNum);
  insertNum.2_2 = insertNum;
  tempNode_70 = findNode (root_15, insertNum.2_2);
  if (tempNode_70 != 0B)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]
;;    succ:       6
;;                7

;;   basic block 6, loop depth 1
;;    pred:       5
  insertNum.3_3 = insertNum;
  printf ("\n\t %d Already exists in the tree\n", insertNum.3_3);
  goto <bb 8>; [0.00%]
;;    succ:       8

;;   basic block 7, loop depth 1
;;    pred:       5
  __builtin_puts (&"\n\tPrinting AVL Tree"[0]);
  printAVL (root_15, 1);
  __builtin_putchar (10);
  insertNum.4_4 = insertNum;
  root_75 = insert (root_15, insertNum.4_4);
  __builtin_puts (&"\n\tPrinting AVL Tree"[0]);
  printAVL (root_75, 1);
  __builtin_putchar (10);
;;    succ:       8

;;   basic block 8, loop depth 1
;;    pred:       6
;;                7
  # root_13 = PHI <root_15(6), root_75(7)>
  flag_84 = flag_12;
  goto <bb 22>; [0.00%]
;;    succ:       22

;;   basic block 9, loop depth 1
;;    pred:       3
<L6> [0.00%]:
  printf ("\n\tEnter the Number to Delete: ");
  scanf ("%d", &queryNum);
  queryNum.5_5 = queryNum;
  tempNode_57 = findNode (root_15, queryNum.5_5);
  if (tempNode_57 == 0B)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]
;;    succ:       10
;;                11

;;   basic block 10, loop depth 1
;;    pred:       9
  queryNum.6_6 = queryNum;
  printf ("\n\t %d Does not exist in the tree\n", queryNum.6_6);
  goto <bb 12>; [0.00%]
;;    succ:       12

;;   basic block 11, loop depth 1
;;    pred:       9
  __builtin_puts (&"\n\tPrinting AVL Tree"[0]);
  printAVL (root_15, 1);
  __builtin_putchar (10);
  queryNum.7_7 = queryNum;
  root_62 = delete (root_15, queryNum.7_7);
  __builtin_puts (&"\n\tPrinting AVL Tree"[0]);
  printAVL (root_62, 1);
  __builtin_putchar (10);
;;    succ:       12

;;   basic block 12, loop depth 1
;;    pred:       10
;;                11
  # root_14 = PHI <root_15(10), root_62(11)>
  flag_85 = flag_12;
  goto <bb 22>; [0.00%]
;;    succ:       22

;;   basic block 13, loop depth 1
;;    pred:       3
<L10> [0.00%]:
  printf ("\n\tEnter the Number to Search: ");
  scanf ("%d", &queryNum);
  queryNum.8_8 = queryNum;
  tempNode_48 = findNode (root_15, queryNum.8_8);
  if (tempNode_48 == 0B)
    goto <bb 14>; [0.00%]
  else
    goto <bb 15>; [0.00%]
;;    succ:       14
;;                15

;;   basic block 14, loop depth 1
;;    pred:       13
  queryNum.9_9 = queryNum;
  printf ("\n\t %d : Not Found\n", queryNum.9_9);
  goto <bb 16>; [0.00%]
;;    succ:       16

;;   basic block 15, loop depth 1
;;    pred:       13
  _10 = tempNode_48->height;
  queryNum.10_11 = queryNum;
  printf ("\n\t %d : Found at height %d \n", queryNum.10_11, _10);
  __builtin_puts (&"\n\tPrinting AVL Tree"[0]);
  printAVL (root_15, 1);
  __builtin_putchar (10);
;;    succ:       16

;;   basic block 16, loop depth 1
;;    pred:       14
;;                15
  flag_86 = flag_12;
  root_92 = root_15;
  goto <bb 22>; [0.00%]
;;    succ:       22

;;   basic block 17, loop depth 1
;;    pred:       3
<L14> [0.00%]:
  __builtin_puts (&"\nPrinting Tree preOrder"[0]);
  printPreOrder (root_15);
  flag_87 = flag_12;
  root_93 = root_15;
  goto <bb 22>; [0.00%]
;;    succ:       22

;;   basic block 18, loop depth 1
;;    pred:       3
<L15> [0.00%]:
  __builtin_puts (&"\nPrinting Tree inOrder"[0]);
  printInOrder (root_15);
  flag_88 = flag_12;
  root_94 = root_15;
  goto <bb 22>; [0.00%]
;;    succ:       22

;;   basic block 19, loop depth 1
;;    pred:       3
<L16> [0.00%]:
  __builtin_puts (&"\nPrinting Tree PostOrder"[0]);
  printPostOrder (root_15);
  flag_89 = flag_12;
  root_95 = root_15;
  goto <bb 22>; [0.00%]
;;    succ:       22

;;   basic block 20, loop depth 1
;;    pred:       3
<L17> [0.00%]:
  __builtin_puts (&"\nPrinting AVL Tree"[0]);
  printAVL (root_15, 1);
  flag_90 = flag_12;
  root_96 = root_15;
  goto <bb 22>; [0.00%]
;;    succ:       22

;;   basic block 21, loop depth 1
;;    pred:       3
<L18> [0.00%]:
  flag_82 = 0;
  __builtin_puts (&"\n\t\tExiting, Thank You !!"[0]);
  root_97 = root_15;
;;    succ:       22

;;   basic block 22, loop depth 1
;;    pred:       2
;;                4
;;                8
;;                12
;;                16
;;                17
;;                18
;;                19
;;                20
;;                21
  # flag_12 = PHI <flag_20(2), flag_80(4), flag_84(8), flag_85(12), flag_86(16), flag_87(17), flag_88(18), flag_89(19), flag_90(20), flag_82(21)>
  # root_15 = PHI <root_21(2), root_91(4), root_13(8), root_14(12), root_92(16), root_93(17), root_94(18), root_95(19), root_96(20), root_97(21)>
  if (flag_12 == 1)
    goto <bb 3>; [0.00%]
  else
    goto <bb 23>; [0.00%]
;;    succ:       3
;;                23

;;   basic block 23, loop depth 0
;;    pred:       22
  _23 = 0;
  choice ={v} {CLOBBER};
  insertNum ={v} {CLOBBER};
  queryNum ={v} {CLOBBER};
;;    succ:       24

;;   basic block 24, loop depth 0
;;    pred:       23
<L23> [0.00%]:
  return _23;
;;    succ:       EXIT

}



Partition map 

Partition 1 (choice.1_1 - 1 )
Partition 2 (insertNum.2_2 - 2 )
Partition 3 (insertNum.3_3 - 3 )
Partition 4 (insertNum.4_4 - 4 )
Partition 5 (queryNum.5_5 - 5 )
Partition 6 (queryNum.6_6 - 6 )
Partition 7 (queryNum.7_7 - 7 )
Partition 8 (queryNum.8_8 - 8 )
Partition 9 (queryNum.9_9 - 9 )
Partition 10 (_10 - 10 )
Partition 11 (queryNum.10_11 - 11 )
Partition 12 (flag_12 - 12 )
Partition 13 (root_13 - 13 )
Partition 14 (root_14 - 14 )
Partition 15 (root_15 - 15 )
Partition 20 (flag_20 - 20 )
Partition 21 (root_21 - 21 )
Partition 23 (_23 - 23 )
Partition 48 (tempNode_48 - 48 )
Partition 57 (tempNode_57 - 57 )
Partition 62 (root_62 - 62 )
Partition 70 (tempNode_70 - 70 )
Partition 75 (root_75 - 75 )
Partition 80 (flag_80 - 80 )
Partition 82 (flag_82 - 82 )
Partition 84 (flag_84 - 84 )
Partition 85 (flag_85 - 85 )
Partition 86 (flag_86 - 86 )
Partition 87 (flag_87 - 87 )
Partition 88 (flag_88 - 88 )
Partition 89 (flag_89 - 89 )
Partition 90 (flag_90 - 90 )
Partition 91 (root_91 - 91 )
Partition 92 (root_92 - 92 )
Partition 93 (root_93 - 93 )
Partition 94 (root_94 - 94 )
Partition 95 (root_95 - 95 )
Partition 96 (root_96 - 96 )
Partition 97 (root_97 - 97 )
Partition 98 (_98(D) - 98 )


Partition map 

Partition 0 (flag_12 - 12 )
Partition 1 (root_13 - 13 )
Partition 2 (root_14 - 14 )
Partition 3 (root_15 - 15 )
Partition 4 (flag_20 - 20 )
Partition 5 (root_21 - 21 )
Partition 6 (tempNode_48 - 48 )
Partition 7 (tempNode_57 - 57 )
Partition 8 (root_62 - 62 )
Partition 9 (tempNode_70 - 70 )
Partition 10 (root_75 - 75 )
Partition 11 (flag_80 - 80 )
Partition 12 (flag_82 - 82 )
Partition 13 (flag_84 - 84 )
Partition 14 (flag_85 - 85 )
Partition 15 (flag_86 - 86 )
Partition 16 (flag_87 - 87 )
Partition 17 (flag_88 - 88 )
Partition 18 (flag_89 - 89 )
Partition 19 (flag_90 - 90 )
Partition 20 (root_91 - 91 )
Partition 21 (root_92 - 92 )
Partition 22 (root_93 - 93 )
Partition 23 (root_94 - 94 )
Partition 24 (root_95 - 95 )
Partition 25 (root_96 - 96 )
Partition 26 (root_97 - 97 )
Partition 27 (_98(D) - 98 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483646, 0) root_13 <-> root_15
(2147483646, 0) root_13 <-> root_75
(2147483646, 0) flag_12 <-> flag_84
(2147483646, 0) flag_12 <-> flag_85
(2147483646, 0) flag_12 <-> flag_86
(2147483646, 0) flag_12 <-> flag_87
(2147483646, 0) flag_12 <-> flag_88
(2147483646, 0) flag_12 <-> flag_89
(2147483646, 0) flag_12 <-> flag_90
(2147483646, 0) root_13 <-> root_14
(2147483646, 0) flag_12 <-> flag_20
(2147483646, 0) root_13 <-> root_21
(2147483646, 0) tempNode_48 <-> tempNode_57
(2147483646, 0) root_13 <-> root_62
(2147483646, 0) tempNode_48 <-> tempNode_70
(2147483646, 0) flag_12 <-> flag_80
(2147483646, 0) flag_12 <-> flag_82
(2147483646, 0) root_13 <-> root_91
(2147483646, 0) root_13 <-> root_92
(2147483646, 0) root_13 <-> root_93
(2147483646, 0) root_13 <-> root_94
(2147483646, 0) root_13 <-> root_95
(2147483646, 0) root_13 <-> root_96
(2147483646, 0) root_13 <-> root_97
(1, 0) root_15 <-> root_91
(1, 0) root_14 <-> root_15
(1, 0) root_14 <-> root_62
(1, 0) root_15 <-> root_92
(1, 0) root_15 <-> root_93
(1, 0) root_15 <-> root_94
(1, 0) root_15 <-> root_95
(1, 0) root_15 <-> root_96
(1, 0) root_15 <-> root_97

Partition map 

Partition 0 (flag_12 - 12 )
Partition 1 (root_13 - 13 )
Partition 2 (root_14 - 14 )
Partition 3 (root_15 - 15 )
Partition 4 (flag_20 - 20 )
Partition 5 (root_21 - 21 )
Partition 6 (tempNode_48 - 48 )
Partition 7 (tempNode_57 - 57 )
Partition 8 (root_62 - 62 )
Partition 9 (tempNode_70 - 70 )
Partition 10 (root_75 - 75 )
Partition 11 (flag_80 - 80 )
Partition 12 (flag_82 - 82 )
Partition 13 (flag_84 - 84 )
Partition 14 (flag_85 - 85 )
Partition 15 (flag_86 - 86 )
Partition 16 (flag_87 - 87 )
Partition 17 (flag_88 - 88 )
Partition 18 (flag_89 - 89 )
Partition 19 (flag_90 - 90 )
Partition 20 (root_91 - 91 )
Partition 21 (root_92 - 92 )
Partition 22 (root_93 - 93 )
Partition 23 (root_94 - 94 )
Partition 24 (root_95 - 95 )
Partition 25 (root_96 - 96 )
Partition 26 (root_97 - 97 )
Partition 27 (_98(D) - 98 )

Coalesce list: (13)root_13 & (15)root_15 [map: 1, 3] : Success -> 1
Coalesce list: (13)root_13 & (75)root_75 [map: 1, 10] : Success -> 1
Coalesce list: (12)flag_12 & (84)flag_84 [map: 0, 13] : Success -> 0
Coalesce list: (12)flag_12 & (85)flag_85 [map: 0, 14] : Success -> 0
Coalesce list: (12)flag_12 & (86)flag_86 [map: 0, 15] : Success -> 0
Coalesce list: (12)flag_12 & (87)flag_87 [map: 0, 16] : Success -> 0
Coalesce list: (12)flag_12 & (88)flag_88 [map: 0, 17] : Success -> 0
Coalesce list: (12)flag_12 & (89)flag_89 [map: 0, 18] : Success -> 0
Coalesce list: (12)flag_12 & (90)flag_90 [map: 0, 19] : Success -> 0
Coalesce list: (13)root_13 & (14)root_14 [map: 1, 2] : Success -> 1
Coalesce list: (12)flag_12 & (20)flag_20 [map: 0, 4] : Success -> 0
Coalesce list: (13)root_13 & (21)root_21 [map: 1, 5] : Success -> 1
Coalesce list: (48)tempNode_48 & (57)tempNode_57 [map: 6, 7] : Success -> 6
Coalesce list: (13)root_13 & (62)root_62 [map: 1, 8] : Success -> 1
Coalesce list: (48)tempNode_48 & (70)tempNode_70 [map: 6, 9] : Success -> 6
Coalesce list: (12)flag_12 & (80)flag_80 [map: 0, 11] : Success -> 0
Coalesce list: (12)flag_12 & (82)flag_82 [map: 0, 12] : Success -> 0
Coalesce list: (13)root_13 & (91)root_91 [map: 1, 20] : Success -> 1
Coalesce list: (13)root_13 & (92)root_92 [map: 1, 21] : Success -> 1
Coalesce list: (13)root_13 & (93)root_93 [map: 1, 22] : Success -> 1
Coalesce list: (13)root_13 & (94)root_94 [map: 1, 23] : Success -> 1
Coalesce list: (13)root_13 & (95)root_95 [map: 1, 24] : Success -> 1
Coalesce list: (13)root_13 & (96)root_96 [map: 1, 25] : Success -> 1
Coalesce list: (13)root_13 & (97)root_97 [map: 1, 26] : Success -> 1
Coalesce list: (15)root_13 & (91)root_13: Already Coalesced.
Coalesce list: (14)root_13 & (15)root_13: Already Coalesced.
Coalesce list: (14)root_13 & (62)root_13: Already Coalesced.
Coalesce list: (15)root_13 & (92)root_13: Already Coalesced.
Coalesce list: (15)root_13 & (93)root_13: Already Coalesced.
Coalesce list: (15)root_13 & (94)root_13: Already Coalesced.
Coalesce list: (15)root_13 & (95)root_13: Already Coalesced.
Coalesce list: (15)root_13 & (96)root_13: Already Coalesced.
Coalesce list: (15)root_13 & (97)root_13: Already Coalesced.
Coalesce list: (15)root_13 & (97)root_13: Already Coalesced.
Coalesce list: (15)root_13 & (96)root_13: Already Coalesced.
Coalesce list: (15)root_13 & (95)root_13: Already Coalesced.
Coalesce list: (15)root_13 & (94)root_13: Already Coalesced.
Coalesce list: (15)root_13 & (93)root_13: Already Coalesced.
Coalesce list: (15)root_13 & (92)root_13: Already Coalesced.
Coalesce list: (15)root_13 & (14)root_13: Already Coalesced.
Coalesce list: (15)root_13 & (13)root_13: Already Coalesced.
Coalesce list: (15)root_13 & (91)root_13: Already Coalesced.
Coalesce list: (15)root_13 & (21)root_13: Already Coalesced.
Coalesce list: (12)flag_12 & (82)flag_12: Already Coalesced.
Coalesce list: (12)flag_12 & (90)flag_12: Already Coalesced.
Coalesce list: (12)flag_12 & (89)flag_12: Already Coalesced.
Coalesce list: (12)flag_12 & (88)flag_12: Already Coalesced.
Coalesce list: (12)flag_12 & (87)flag_12: Already Coalesced.
Coalesce list: (12)flag_12 & (86)flag_12: Already Coalesced.
Coalesce list: (12)flag_12 & (85)flag_12: Already Coalesced.
Coalesce list: (12)flag_12 & (84)flag_12: Already Coalesced.
Coalesce list: (12)flag_12 & (80)flag_12: Already Coalesced.
Coalesce list: (12)flag_12 & (20)flag_12: Already Coalesced.
After Coalescing:

Partition map 

Partition 0 (choice.1_1 - 1 )
Partition 1 (insertNum.2_2 - 2 )
Partition 2 (insertNum.3_3 - 3 )
Partition 3 (insertNum.4_4 - 4 )
Partition 4 (queryNum.5_5 - 5 )
Partition 5 (queryNum.6_6 - 6 )
Partition 6 (queryNum.7_7 - 7 )
Partition 7 (queryNum.8_8 - 8 )
Partition 8 (queryNum.9_9 - 9 )
Partition 9 (_10 - 10 )
Partition 10 (queryNum.10_11 - 11 )
Partition 11 (flag_12 - 12 20 80 82 84 85 86 87 88 89 90 )
Partition 12 (root_13 - 13 14 15 21 62 75 91 92 93 94 95 96 97 )
Partition 13 (_23 - 23 )
Partition 14 (tempNode_48 - 48 57 70 )
Partition 15 (_98(D) - 98 )

main ()
{
  struct avlNode * tempNode;
  struct avlNode * root;
  int queryNum;
  int insertNum;
  int flag;
  int choice;
  int D.2977;
  int choice.1_1;
  int insertNum.2_2;
  int insertNum.3_3;
  int insertNum.4_4;
  int queryNum.5_5;
  int queryNum.6_6;
  int queryNum.7_7;
  int queryNum.8_8;
  int queryNum.9_9;
  int _10;
  int queryNum.10_11;
  int _23;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  flag_20 = 1;
  root_21 = 0B;
  goto <bb 22>; [0.00%]
;;    succ:       22

;;   basic block 3, loop depth 1
;;    pred:       22
  __builtin_puts (&"\n\nEnter the Step to Run : "[0]);
  __builtin_puts (&"\t1: Insert a node into AVL tree"[0]);
  __builtin_puts (&"\t2: Delete a node in AVL tree"[0]);
  __builtin_puts (&"\t3: Search a node into AVL tree"[0]);
  __builtin_puts (&"\t4: printPreOrder (Ro L R) Tree"[0]);
  __builtin_puts (&"\t5: printInOrder (L Ro R) Tree"[0]);
  __builtin_puts (&"\t6: printPostOrder (L R Ro) Tree"[0]);
  __builtin_puts (&"\t7: printAVL Tree"[0]);
  __builtin_puts (&"\t0: EXIT"[0]);
  scanf ("%d", &choice);
  choice.1_1 = choice;
  switch (choice.1_1) <default: <L18> [0.00%], case 0: <L1> [0.00%], case 1: <L2> [0.00%], case 2: <L6> [0.00%], case 3: <L10> [0.00%], case 4: <L14> [0.00%], case 5: <L15> [0.00%], case 6: <L16> [0.00%], case 7: <L17> [0.00%]>
;;    succ:       21
;;                4
;;                5
;;                9
;;                13
;;                17
;;                18
;;                19
;;                20

;;   basic block 4, loop depth 1
;;    pred:       3
<L1> [0.00%]:
  flag_80 = 0;
  __builtin_puts (&"\n\t\tExiting, Thank You !!"[0]);
  root_91 = root_15;
  goto <bb 22>; [0.00%]
;;    succ:       22

;;   basic block 5, loop depth 1
;;    pred:       3
<L2> [0.00%]:
  printf ("\n\tEnter the Number to insert: ");
  scanf ("%d", &insertNum);
  insertNum.2_2 = insertNum;
  tempNode_70 = findNode (root_15, insertNum.2_2);
  if (tempNode_70 != 0B)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]
;;    succ:       6
;;                7

;;   basic block 6, loop depth 1
;;    pred:       5
  insertNum.3_3 = insertNum;
  printf ("\n\t %d Already exists in the tree\n", insertNum.3_3);
  goto <bb 8>; [0.00%]
;;    succ:       8

;;   basic block 7, loop depth 1
;;    pred:       5
  __builtin_puts (&"\n\tPrinting AVL Tree"[0]);
  printAVL (root_15, 1);
  __builtin_putchar (10);
  insertNum.4_4 = insertNum;
  root_75 = insert (root_15, insertNum.4_4);
  __builtin_puts (&"\n\tPrinting AVL Tree"[0]);
  printAVL (root_75, 1);
  __builtin_putchar (10);
;;    succ:       8

;;   basic block 8, loop depth 1
;;    pred:       6
;;                7
  # root_13 = PHI <root_15(6), root_75(7)>
  flag_84 = flag_12;
  goto <bb 22>; [0.00%]
;;    succ:       22

;;   basic block 9, loop depth 1
;;    pred:       3
<L6> [0.00%]:
  printf ("\n\tEnter the Number to Delete: ");
  scanf ("%d", &queryNum);
  queryNum.5_5 = queryNum;
  tempNode_57 = findNode (root_15, queryNum.5_5);
  if (tempNode_57 == 0B)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]
;;    succ:       10
;;                11

;;   basic block 10, loop depth 1
;;    pred:       9
  queryNum.6_6 = queryNum;
  printf ("\n\t %d Does not exist in the tree\n", queryNum.6_6);
  goto <bb 12>; [0.00%]
;;    succ:       12

;;   basic block 11, loop depth 1
;;    pred:       9
  __builtin_puts (&"\n\tPrinting AVL Tree"[0]);
  printAVL (root_15, 1);
  __builtin_putchar (10);
  queryNum.7_7 = queryNum;
  root_62 = delete (root_15, queryNum.7_7);
  __builtin_puts (&"\n\tPrinting AVL Tree"[0]);
  printAVL (root_62, 1);
  __builtin_putchar (10);
;;    succ:       12

;;   basic block 12, loop depth 1
;;    pred:       10
;;                11
  # root_14 = PHI <root_15(10), root_62(11)>
  flag_85 = flag_12;
  goto <bb 22>; [0.00%]
;;    succ:       22

;;   basic block 13, loop depth 1
;;    pred:       3
<L10> [0.00%]:
  printf ("\n\tEnter the Number to Search: ");
  scanf ("%d", &queryNum);
  queryNum.8_8 = queryNum;
  tempNode_48 = findNode (root_15, queryNum.8_8);
  if (tempNode_48 == 0B)
    goto <bb 14>; [0.00%]
  else
    goto <bb 15>; [0.00%]
;;    succ:       14
;;                15

;;   basic block 14, loop depth 1
;;    pred:       13
  queryNum.9_9 = queryNum;
  printf ("\n\t %d : Not Found\n", queryNum.9_9);
  goto <bb 16>; [0.00%]
;;    succ:       16

;;   basic block 15, loop depth 1
;;    pred:       13
  _10 = tempNode_48->height;
  queryNum.10_11 = queryNum;
  printf ("\n\t %d : Found at height %d \n", queryNum.10_11, _10);
  __builtin_puts (&"\n\tPrinting AVL Tree"[0]);
  printAVL (root_15, 1);
  __builtin_putchar (10);
;;    succ:       16

;;   basic block 16, loop depth 1
;;    pred:       14
;;                15
  flag_86 = flag_12;
  root_92 = root_15;
  goto <bb 22>; [0.00%]
;;    succ:       22

;;   basic block 17, loop depth 1
;;    pred:       3
<L14> [0.00%]:
  __builtin_puts (&"\nPrinting Tree preOrder"[0]);
  printPreOrder (root_15);
  flag_87 = flag_12;
  root_93 = root_15;
  goto <bb 22>; [0.00%]
;;    succ:       22

;;   basic block 18, loop depth 1
;;    pred:       3
<L15> [0.00%]:
  __builtin_puts (&"\nPrinting Tree inOrder"[0]);
  printInOrder (root_15);
  flag_88 = flag_12;
  root_94 = root_15;
  goto <bb 22>; [0.00%]
;;    succ:       22

;;   basic block 19, loop depth 1
;;    pred:       3
<L16> [0.00%]:
  __builtin_puts (&"\nPrinting Tree PostOrder"[0]);
  printPostOrder (root_15);
  flag_89 = flag_12;
  root_95 = root_15;
  goto <bb 22>; [0.00%]
;;    succ:       22

;;   basic block 20, loop depth 1
;;    pred:       3
<L17> [0.00%]:
  __builtin_puts (&"\nPrinting AVL Tree"[0]);
  printAVL (root_15, 1);
  flag_90 = flag_12;
  root_96 = root_15;
  goto <bb 22>; [0.00%]
;;    succ:       22

;;   basic block 21, loop depth 1
;;    pred:       3
<L18> [0.00%]:
  flag_82 = 0;
  __builtin_puts (&"\n\t\tExiting, Thank You !!"[0]);
  root_97 = root_15;
;;    succ:       22

;;   basic block 22, loop depth 1
;;    pred:       2
;;                4
;;                8
;;                12
;;                16
;;                17
;;                18
;;                19
;;                20
;;                21
  # flag_12 = PHI <flag_20(2), flag_80(4), flag_84(8), flag_85(12), flag_86(16), flag_87(17), flag_88(18), flag_89(19), flag_90(20), flag_82(21)>
  # root_15 = PHI <root_21(2), root_91(4), root_13(8), root_14(12), root_92(16), root_93(17), root_94(18), root_95(19), root_96(20), root_97(21)>
  if (flag_12 == 1)
    goto <bb 3>; [0.00%]
  else
    goto <bb 23>; [0.00%]
;;    succ:       3
;;                23

;;   basic block 23, loop depth 0
;;    pred:       22
  _23 = 0;
  choice ={v} {CLOBBER};
  insertNum ={v} {CLOBBER};
  queryNum ={v} {CLOBBER};
;;    succ:       24

;;   basic block 24, loop depth 0
;;    pred:       23
<L23> [0.00%]:
  return _23;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; flag_20 = 1;

(insn 5 4 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 flag+0 S4 A32])
        (const_int 1 [0x1])) "test1.c":277 -1
     (nil))

;; root_21 = 0B;

(insn 6 5 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])
        (const_int 0 [0])) "test1.c":281 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; __builtin_puts (&"\n\nEnter the Step to Run : "[0]);

(insn 10 9 11 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7fddd7497ea0 *.LC4>)) "test1.c":286 -1
     (nil))

(call_insn 11 10 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":286 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; __builtin_puts (&"\t1: Insert a node into AVL tree"[0]);

(insn 12 11 13 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7fddd7497f30 *.LC5>)) "test1.c":288 -1
     (nil))

(call_insn 13 12 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":288 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; __builtin_puts (&"\t2: Delete a node in AVL tree"[0]);

(insn 14 13 15 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7fddd74a0000 *.LC6>)) "test1.c":289 -1
     (nil))

(call_insn 15 14 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":289 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; __builtin_puts (&"\t3: Search a node into AVL tree"[0]);

(insn 16 15 17 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7fddd74a0090 *.LC7>)) "test1.c":290 -1
     (nil))

(call_insn 17 16 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":290 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; __builtin_puts (&"\t4: printPreOrder (Ro L R) Tree"[0]);

(insn 18 17 19 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7fddd74a0120 *.LC8>)) "test1.c":291 -1
     (nil))

(call_insn 19 18 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":291 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; __builtin_puts (&"\t5: printInOrder (L Ro R) Tree"[0]);

(insn 20 19 21 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7fddd74a01b0 *.LC9>)) "test1.c":292 -1
     (nil))

(call_insn 21 20 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":292 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; __builtin_puts (&"\t6: printPostOrder (L R Ro) Tree"[0]);

(insn 22 21 23 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7fddd74a0240 *.LC10>)) "test1.c":293 -1
     (nil))

(call_insn 23 22 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":293 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; __builtin_puts (&"\t7: printAVL Tree"[0]);

(insn 24 23 25 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7fddd74a02d0 *.LC11>)) "test1.c":294 -1
     (nil))

(call_insn 25 24 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":294 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; __builtin_puts (&"\t0: EXIT"[0]);

(insn 26 25 27 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7fddd74a0360 *.LC12>)) "test1.c":296 -1
     (nil))

(call_insn 27 26 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":296 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; scanf ("%d", &choice);

(insn 28 27 29 (parallel [
            (set (reg:DI 100)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":297 -1
     (nil))

(insn 29 28 30 (set (reg:DI 4 si)
        (reg:DI 100)) "test1.c":297 -1
     (nil))

(insn 30 29 31 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fddd745d5a0 *.LC2>)) "test1.c":297 -1
     (nil))

(insn 31 30 32 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":297 -1
     (nil))

(call_insn 32 31 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7fddd76afb00 scanf>) [0 __builtin_scanf S1 A8])
            (const_int 0 [0]))) "test1.c":297 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))

;; choice.1_1 = choice;

(insn 33 32 0 (set (reg:SI 87 [ choice.1_1 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [1 choice+0 S4 A32])) "test1.c":299 -1
     (nil))
Applying pattern match.pd:84, generic-match.c:12506

;; switch (choice.1_1) <default: <L18> [0.00%], case 0: <L1> [0.00%], case 1: <L2> [0.00%], case 2: <L6> [0.00%], case 3: <L10> [0.00%], case 4: <L14> [0.00%], case 5: <L15> [0.00%], case 6: <L16> [0.00%], case 7: <L17> [0.00%]>

(insn 34 33 35 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 87 [ choice.1_1 ])
            (const_int 7 [0x7]))) "test1.c":299 -1
     (nil))

(jump_insn 35 34 36 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":299 -1
     (nil))

(insn 36 35 37 (set (reg:DI 101)
        (zero_extend:DI (reg:SI 87 [ choice.1_1 ]))) "test1.c":299 -1
     (nil))

(insn 37 36 38 (parallel [
            (set (reg:DI 102)
                (ashift:DI (reg:DI 101)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":299 -1
     (nil))

(insn 38 37 39 (set (reg:DI 103)
        (label_ref:DI 44)) "test1.c":299 -1
     (nil))

(insn 39 38 40 (set (reg:SI 104)
        (mem/u/c:SI (plus:DI (reg:DI 102)
                (reg:DI 103)) [0  S4 A8])) "test1.c":299 -1
     (nil))

(insn 40 39 41 (set (reg:DI 105)
        (sign_extend:DI (reg:SI 104))) "test1.c":299 -1
     (nil))

(insn 41 40 42 (set (reg:DI 107)
        (label_ref:DI 44)) "test1.c":299 -1
     (nil))

(insn 42 41 43 (parallel [
            (set (reg:DI 106)
                (plus:DI (reg:DI 105)
                    (reg:DI 107)))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":299 -1
     (nil))

(jump_insn 43 42 44 (parallel [
            (set (pc)
                (reg:DI 106))
            (use (label_ref 44))
        ]) "test1.c":299 -1
     (nil))

(code_label 44 43 45 76 (nil) [0 uses])

(jump_table_data 45 44 46 (addr_diff_vec:SI (label_ref:DI 44)
         [
            (label_ref:DI 0)
            (label_ref:DI 0)
            (label_ref:DI 0)
            (label_ref:DI 0)
            (label_ref:DI 0)
            (label_ref:DI 0)
            (label_ref:DI 0)
            (label_ref:DI 0)
        ]
        (const_int 0 [0])
        (const_int 0 [0])))

(barrier 46 45 0)

;; Generating RTL for gimple basic block 4

;; <L1> [0.00%]:

(code_label 47 46 48 75 (nil) [0 uses])

(note 48 47 0 NOTE_INSN_BASIC_BLOCK)

;; flag_80 = 0;

(insn 49 48 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 flag+0 S4 A32])
        (const_int 0 [0])) "test1.c":303 -1
     (nil))

;; __builtin_puts (&"\n\t\tExiting, Thank You !!"[0]);

(insn 50 49 51 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7fddd74a03f0 *.LC13>)) "test1.c":304 -1
     (nil))

(call_insn 51 50 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":304 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; root_91 = root_15;

(nil)

;; Generating RTL for gimple basic block 5

;; <L2> [0.00%]:

(code_label 54 53 55 77 (nil) [0 uses])

(note 55 54 0 NOTE_INSN_BASIC_BLOCK)

;; printf ("\n\tEnter the Number to insert: ");

(insn 56 55 57 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7fddd74a0480 *.LC14>)) "test1.c":310 -1
     (nil))

(insn 57 56 58 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":310 -1
     (nil))

(call_insn 58 57 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fddd76aef00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":310 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))

;; scanf ("%d", &insertNum);

(insn 59 58 60 (parallel [
            (set (reg:DI 108)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -32 [0xffffffffffffffe0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":311 -1
     (nil))

(insn 60 59 61 (set (reg:DI 4 si)
        (reg:DI 108)) "test1.c":311 -1
     (nil))

(insn 61 60 62 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fddd745d5a0 *.LC2>)) "test1.c":311 -1
     (nil))

(insn 62 61 63 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":311 -1
     (nil))

(call_insn 63 62 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7fddd76afb00 scanf>) [0 __builtin_scanf S1 A8])
            (const_int 0 [0]))) "test1.c":311 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))

;; insertNum.2_2 = insertNum;

(insn 64 63 0 (set (reg:SI 88 [ insertNum.2_2 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [1 insertNum+0 S4 A64])) "test1.c":313 -1
     (nil))

;; tempNode_70 = findNode (root_15, insertNum.2_2);

(insn 65 64 66 (set (reg:DI 109)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])) "test1.c":313 -1
     (nil))

(insn 66 65 67 (set (reg:SI 4 si)
        (reg:SI 88 [ insertNum.2_2 ])) "test1.c":313 -1
     (nil))

(insn 67 66 68 (set (reg:DI 5 di)
        (reg:DI 109)) "test1.c":313 -1
     (nil))

(call_insn 68 67 69 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("findNode") [flags 0x3]  <function_decl 0x7fddd77eef00 findNode>) [0 findNode S1 A8])
            (const_int 0 [0]))) "test1.c":313 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))

(insn 69 68 70 (set (reg:DI 110)
        (reg:DI 0 ax)) "test1.c":313 -1
     (nil))

(insn 70 69 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 tempNode+0 S8 A64])
        (reg:DI 110)) "test1.c":313 -1
     (nil))

;; if (tempNode_70 != 0B)

(insn 71 70 72 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -24 [0xffffffffffffffe8])) [2 tempNode+0 S8 A64])
            (const_int 0 [0]))) "test1.c":315 -1
     (nil))

(jump_insn 72 71 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":315 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; insertNum.3_3 = insertNum;

(insn 74 73 0 (set (reg:SI 89 [ insertNum.3_3 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [1 insertNum+0 S4 A64])) "test1.c":316 -1
     (nil))

;; printf ("\n\t %d Already exists in the tree\n", insertNum.3_3);

(insn 75 74 76 (set (reg:SI 4 si)
        (reg:SI 89 [ insertNum.3_3 ])) "test1.c":316 -1
     (nil))

(insn 76 75 77 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7fddd74a0510 *.LC15>)) "test1.c":316 -1
     (nil))

(insn 77 76 78 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":316 -1
     (nil))

(call_insn 78 77 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fddd76aef00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":316 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))

;; Generating RTL for gimple basic block 7

;; 

(code_label 81 80 82 84 (nil) [0 uses])

(note 82 81 0 NOTE_INSN_BASIC_BLOCK)

;; __builtin_puts (&"\n\tPrinting AVL Tree"[0]);

(insn 83 82 84 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7fddd74a05a0 *.LC16>)) "test1.c":319 -1
     (nil))

(call_insn 84 83 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":319 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; printAVL (root_15, 1);

(insn 85 84 86 (set (reg:DI 111)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])) "test1.c":320 -1
     (nil))

(insn 86 85 87 (set (reg:SI 4 si)
        (const_int 1 [0x1])) "test1.c":320 -1
     (nil))

(insn 87 86 88 (set (reg:DI 5 di)
        (reg:DI 111)) "test1.c":320 -1
     (nil))

(call_insn 88 87 0 (call (mem:QI (symbol_ref:DI ("printAVL") [flags 0x3]  <function_decl 0x7fddd77ee100 printAVL>) [0 printAVL S1 A8])
        (const_int 0 [0])) "test1.c":320 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))

;; __builtin_putchar (10);

(insn 89 88 90 (set (reg:SI 5 di)
        (const_int 10 [0xa])) "test1.c":321 -1
     (nil))

(call_insn 90 89 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7fddd76af200 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) "test1.c":321 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))

;; insertNum.4_4 = insertNum;

(insn 91 90 0 (set (reg:SI 90 [ insertNum.4_4 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [1 insertNum+0 S4 A64])) "test1.c":323 -1
     (nil))

;; root_75 = insert (root_15, insertNum.4_4);

(insn 92 91 93 (set (reg:DI 112)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])) "test1.c":323 -1
     (nil))

(insn 93 92 94 (set (reg:SI 4 si)
        (reg:SI 90 [ insertNum.4_4 ])) "test1.c":323 -1
     (nil))

(insn 94 93 95 (set (reg:DI 5 di)
        (reg:DI 112)) "test1.c":323 -1
     (nil))

(call_insn 95 94 96 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("insert") [flags 0x3]  <function_decl 0x7fddd77eeb00 insert>) [0 insert S1 A8])
            (const_int 0 [0]))) "test1.c":323 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))

(insn 96 95 97 (set (reg:DI 113)
        (reg:DI 0 ax)) "test1.c":323 -1
     (nil))

(insn 97 96 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])
        (reg:DI 113)) "test1.c":323 -1
     (nil))

;; __builtin_puts (&"\n\tPrinting AVL Tree"[0]);

(insn 98 97 99 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7fddd74a05a0 *.LC16>)) "test1.c":324 -1
     (nil))

(call_insn 99 98 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":324 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; printAVL (root_75, 1);

(insn 100 99 101 (set (reg:DI 114)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])) "test1.c":325 -1
     (nil))

(insn 101 100 102 (set (reg:SI 4 si)
        (const_int 1 [0x1])) "test1.c":325 -1
     (nil))

(insn 102 101 103 (set (reg:DI 5 di)
        (reg:DI 114)) "test1.c":325 -1
     (nil))

(call_insn 103 102 0 (call (mem:QI (symbol_ref:DI ("printAVL") [flags 0x3]  <function_decl 0x7fddd77ee100 printAVL>) [0 printAVL S1 A8])
        (const_int 0 [0])) "test1.c":325 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))

;; __builtin_putchar (10);

(insn 104 103 105 (set (reg:SI 5 di)
        (const_int 10 [0xa])) "test1.c":326 -1
     (nil))

(call_insn 105 104 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7fddd76af200 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) "test1.c":326 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))

;; Generating RTL for gimple basic block 8

;; 

(code_label 106 105 107 85 (nil) [0 uses])

(note 107 106 0 NOTE_INSN_BASIC_BLOCK)

;; flag_84 = flag_12;

(nil)

;; Generating RTL for gimple basic block 9

;; <L6> [0.00%]:

(code_label 110 109 111 78 (nil) [0 uses])

(note 111 110 0 NOTE_INSN_BASIC_BLOCK)

;; printf ("\n\tEnter the Number to Delete: ");

(insn 112 111 113 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7fddd74a0630 *.LC17>)) "test1.c":334 -1
     (nil))

(insn 113 112 114 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":334 -1
     (nil))

(call_insn 114 113 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fddd76aef00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":334 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))

;; scanf ("%d", &queryNum);

(insn 115 114 116 (parallel [
            (set (reg:DI 115)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -36 [0xffffffffffffffdc])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":335 -1
     (nil))

(insn 116 115 117 (set (reg:DI 4 si)
        (reg:DI 115)) "test1.c":335 -1
     (nil))

(insn 117 116 118 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fddd745d5a0 *.LC2>)) "test1.c":335 -1
     (nil))

(insn 118 117 119 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":335 -1
     (nil))

(call_insn 119 118 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7fddd76afb00 scanf>) [0 __builtin_scanf S1 A8])
            (const_int 0 [0]))) "test1.c":335 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))

;; queryNum.5_5 = queryNum;

(insn 120 119 0 (set (reg:SI 91 [ queryNum.5_5 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [1 queryNum+0 S4 A32])) "test1.c":337 -1
     (nil))

;; tempNode_57 = findNode (root_15, queryNum.5_5);

(insn 121 120 122 (set (reg:DI 116)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])) "test1.c":337 -1
     (nil))

(insn 122 121 123 (set (reg:SI 4 si)
        (reg:SI 91 [ queryNum.5_5 ])) "test1.c":337 -1
     (nil))

(insn 123 122 124 (set (reg:DI 5 di)
        (reg:DI 116)) "test1.c":337 -1
     (nil))

(call_insn 124 123 125 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("findNode") [flags 0x3]  <function_decl 0x7fddd77eef00 findNode>) [0 findNode S1 A8])
            (const_int 0 [0]))) "test1.c":337 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))

(insn 125 124 126 (set (reg:DI 117)
        (reg:DI 0 ax)) "test1.c":337 -1
     (nil))

(insn 126 125 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 tempNode+0 S8 A64])
        (reg:DI 117)) "test1.c":337 -1
     (nil))

;; if (tempNode_57 == 0B)

(insn 127 126 128 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -24 [0xffffffffffffffe8])) [2 tempNode+0 S8 A64])
            (const_int 0 [0]))) "test1.c":339 -1
     (nil))

(jump_insn 128 127 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":339 -1
     (nil))

;; Generating RTL for gimple basic block 10

;; queryNum.6_6 = queryNum;

(insn 130 129 0 (set (reg:SI 92 [ queryNum.6_6 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [1 queryNum+0 S4 A32])) "test1.c":340 -1
     (nil))

;; printf ("\n\t %d Does not exist in the tree\n", queryNum.6_6);

(insn 131 130 132 (set (reg:SI 4 si)
        (reg:SI 92 [ queryNum.6_6 ])) "test1.c":340 -1
     (nil))

(insn 132 131 133 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7fddd74a06c0 *.LC18>)) "test1.c":340 -1
     (nil))

(insn 133 132 134 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":340 -1
     (nil))

(call_insn 134 133 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fddd76aef00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":340 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))

;; Generating RTL for gimple basic block 11

;; 

(code_label 137 136 138 86 (nil) [0 uses])

(note 138 137 0 NOTE_INSN_BASIC_BLOCK)

;; __builtin_puts (&"\n\tPrinting AVL Tree"[0]);

(insn 139 138 140 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7fddd74a05a0 *.LC16>)) "test1.c":343 -1
     (nil))

(call_insn 140 139 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":343 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; printAVL (root_15, 1);

(insn 141 140 142 (set (reg:DI 118)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])) "test1.c":344 -1
     (nil))

(insn 142 141 143 (set (reg:SI 4 si)
        (const_int 1 [0x1])) "test1.c":344 -1
     (nil))

(insn 143 142 144 (set (reg:DI 5 di)
        (reg:DI 118)) "test1.c":344 -1
     (nil))

(call_insn 144 143 0 (call (mem:QI (symbol_ref:DI ("printAVL") [flags 0x3]  <function_decl 0x7fddd77ee100 printAVL>) [0 printAVL S1 A8])
        (const_int 0 [0])) "test1.c":344 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))

;; __builtin_putchar (10);

(insn 145 144 146 (set (reg:SI 5 di)
        (const_int 10 [0xa])) "test1.c":345 -1
     (nil))

(call_insn 146 145 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7fddd76af200 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) "test1.c":345 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))

;; queryNum.7_7 = queryNum;

(insn 147 146 0 (set (reg:SI 93 [ queryNum.7_7 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [1 queryNum+0 S4 A32])) "test1.c":346 -1
     (nil))

;; root_62 = delete (root_15, queryNum.7_7);

(insn 148 147 149 (set (reg:DI 119)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])) "test1.c":346 -1
     (nil))

(insn 149 148 150 (set (reg:SI 4 si)
        (reg:SI 93 [ queryNum.7_7 ])) "test1.c":346 -1
     (nil))

(insn 150 149 151 (set (reg:DI 5 di)
        (reg:DI 119)) "test1.c":346 -1
     (nil))

(call_insn 151 150 152 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("delete") [flags 0x3]  <function_decl 0x7fddd77eed00 delete>) [0 delete S1 A8])
            (const_int 0 [0]))) "test1.c":346 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))

(insn 152 151 153 (set (reg:DI 120)
        (reg:DI 0 ax)) "test1.c":346 -1
     (nil))

(insn 153 152 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])
        (reg:DI 120)) "test1.c":346 -1
     (nil))

;; __builtin_puts (&"\n\tPrinting AVL Tree"[0]);

(insn 154 153 155 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7fddd74a05a0 *.LC16>)) "test1.c":348 -1
     (nil))

(call_insn 155 154 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":348 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; printAVL (root_62, 1);

(insn 156 155 157 (set (reg:DI 121)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])) "test1.c":349 -1
     (nil))

(insn 157 156 158 (set (reg:SI 4 si)
        (const_int 1 [0x1])) "test1.c":349 -1
     (nil))

(insn 158 157 159 (set (reg:DI 5 di)
        (reg:DI 121)) "test1.c":349 -1
     (nil))

(call_insn 159 158 0 (call (mem:QI (symbol_ref:DI ("printAVL") [flags 0x3]  <function_decl 0x7fddd77ee100 printAVL>) [0 printAVL S1 A8])
        (const_int 0 [0])) "test1.c":349 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))

;; __builtin_putchar (10);

(insn 160 159 161 (set (reg:SI 5 di)
        (const_int 10 [0xa])) "test1.c":350 -1
     (nil))

(call_insn 161 160 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7fddd76af200 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) "test1.c":350 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))

;; Generating RTL for gimple basic block 12

;; 

(code_label 162 161 163 87 (nil) [0 uses])

(note 163 162 0 NOTE_INSN_BASIC_BLOCK)

;; flag_85 = flag_12;

(nil)

;; Generating RTL for gimple basic block 13

;; <L10> [0.00%]:

(code_label 166 165 167 79 (nil) [0 uses])

(note 167 166 0 NOTE_INSN_BASIC_BLOCK)

;; printf ("\n\tEnter the Number to Search: ");

(insn 168 167 169 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7fddd74a0750 *.LC19>)) "test1.c":358 -1
     (nil))

(insn 169 168 170 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":358 -1
     (nil))

(call_insn 170 169 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fddd76aef00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":358 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))

;; scanf ("%d", &queryNum);

(insn 171 170 172 (parallel [
            (set (reg:DI 122)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -36 [0xffffffffffffffdc])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":359 -1
     (nil))

(insn 172 171 173 (set (reg:DI 4 si)
        (reg:DI 122)) "test1.c":359 -1
     (nil))

(insn 173 172 174 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fddd745d5a0 *.LC2>)) "test1.c":359 -1
     (nil))

(insn 174 173 175 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":359 -1
     (nil))

(call_insn 175 174 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7fddd76afb00 scanf>) [0 __builtin_scanf S1 A8])
            (const_int 0 [0]))) "test1.c":359 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))

;; queryNum.8_8 = queryNum;

(insn 176 175 0 (set (reg:SI 94 [ queryNum.8_8 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [1 queryNum+0 S4 A32])) "test1.c":361 -1
     (nil))

;; tempNode_48 = findNode (root_15, queryNum.8_8);

(insn 177 176 178 (set (reg:DI 123)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])) "test1.c":361 -1
     (nil))

(insn 178 177 179 (set (reg:SI 4 si)
        (reg:SI 94 [ queryNum.8_8 ])) "test1.c":361 -1
     (nil))

(insn 179 178 180 (set (reg:DI 5 di)
        (reg:DI 123)) "test1.c":361 -1
     (nil))

(call_insn 180 179 181 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("findNode") [flags 0x3]  <function_decl 0x7fddd77eef00 findNode>) [0 findNode S1 A8])
            (const_int 0 [0]))) "test1.c":361 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))

(insn 181 180 182 (set (reg:DI 124)
        (reg:DI 0 ax)) "test1.c":361 -1
     (nil))

(insn 182 181 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 tempNode+0 S8 A64])
        (reg:DI 124)) "test1.c":361 -1
     (nil))

;; if (tempNode_48 == 0B)

(insn 183 182 184 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -24 [0xffffffffffffffe8])) [2 tempNode+0 S8 A64])
            (const_int 0 [0]))) "test1.c":363 -1
     (nil))

(jump_insn 184 183 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "test1.c":363 -1
     (nil))

;; Generating RTL for gimple basic block 14

;; queryNum.9_9 = queryNum;

(insn 186 185 0 (set (reg:SI 95 [ queryNum.9_9 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [1 queryNum+0 S4 A32])) "test1.c":364 -1
     (nil))

;; printf ("\n\t %d : Not Found\n", queryNum.9_9);

(insn 187 186 188 (set (reg:SI 4 si)
        (reg:SI 95 [ queryNum.9_9 ])) "test1.c":364 -1
     (nil))

(insn 188 187 189 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7fddd74a07e0 *.LC20>)) "test1.c":364 -1
     (nil))

(insn 189 188 190 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":364 -1
     (nil))

(call_insn 190 189 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fddd76aef00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":364 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))

;; Generating RTL for gimple basic block 15

;; 

(code_label 193 192 194 88 (nil) [0 uses])

(note 194 193 0 NOTE_INSN_BASIC_BLOCK)

;; _10 = tempNode_48->height;

(insn 195 194 196 (set (reg/f:DI 125)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 tempNode+0 S8 A64])) "test1.c":367 -1
     (nil))

(insn 196 195 0 (set (reg:SI 96 [ _10 ])
        (mem:SI (plus:DI (reg/f:DI 125)
                (const_int 24 [0x18])) [1 tempNode_48->height+0 S4 A64])) "test1.c":367 -1
     (nil))

;; queryNum.10_11 = queryNum;

(insn 197 196 0 (set (reg:SI 97 [ queryNum.10_11 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [1 queryNum+0 S4 A32])) "test1.c":367 -1
     (nil))

;; printf ("\n\t %d : Found at height %d \n", queryNum.10_11, _10);

(insn 198 197 199 (set (reg:SI 1 dx)
        (reg:SI 96 [ _10 ])) "test1.c":367 -1
     (nil))

(insn 199 198 200 (set (reg:SI 4 si)
        (reg:SI 97 [ queryNum.10_11 ])) "test1.c":367 -1
     (nil))

(insn 200 199 201 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7fddd74a0870 *.LC21>)) "test1.c":367 -1
     (nil))

(insn 201 200 202 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":367 -1
     (nil))

(call_insn 202 201 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fddd76aef00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":367 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))

;; __builtin_puts (&"\n\tPrinting AVL Tree"[0]);

(insn 203 202 204 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7fddd74a05a0 *.LC16>)) "test1.c":370 -1
     (nil))

(call_insn 204 203 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":370 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; printAVL (root_15, 1);

(insn 205 204 206 (set (reg:DI 126)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])) "test1.c":371 -1
     (nil))

(insn 206 205 207 (set (reg:SI 4 si)
        (const_int 1 [0x1])) "test1.c":371 -1
     (nil))

(insn 207 206 208 (set (reg:DI 5 di)
        (reg:DI 126)) "test1.c":371 -1
     (nil))

(call_insn 208 207 0 (call (mem:QI (symbol_ref:DI ("printAVL") [flags 0x3]  <function_decl 0x7fddd77ee100 printAVL>) [0 printAVL S1 A8])
        (const_int 0 [0])) "test1.c":371 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))

;; __builtin_putchar (10);

(insn 209 208 210 (set (reg:SI 5 di)
        (const_int 10 [0xa])) "test1.c":372 -1
     (nil))

(call_insn 210 209 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7fddd76af200 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) "test1.c":372 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))

;; Generating RTL for gimple basic block 16

;; 

(code_label 211 210 212 89 (nil) [0 uses])

(note 212 211 0 NOTE_INSN_BASIC_BLOCK)

;; flag_86 = flag_12;

(nil)

;; root_92 = root_15;

(nil)

;; Generating RTL for gimple basic block 17

;; <L14> [0.00%]:

(code_label 215 214 216 80 (nil) [0 uses])

(note 216 215 0 NOTE_INSN_BASIC_BLOCK)

;; __builtin_puts (&"\nPrinting Tree preOrder"[0]);

(insn 217 216 218 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7fddd74a0900 *.LC22>)) "test1.c":380 -1
     (nil))

(call_insn 218 217 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":380 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; printPreOrder (root_15);

(insn 219 218 220 (set (reg:DI 127)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])) "test1.c":381 -1
     (nil))

(insn 220 219 221 (set (reg:DI 5 di)
        (reg:DI 127)) "test1.c":381 -1
     (nil))

(call_insn 221 220 0 (call (mem:QI (symbol_ref:DI ("printPreOrder") [flags 0x3]  <function_decl 0x7fddd77fa100 printPreOrder>) [0 printPreOrder S1 A8])
        (const_int 0 [0])) "test1.c":381 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; flag_87 = flag_12;

(nil)

;; root_93 = root_15;

(nil)

;; Generating RTL for gimple basic block 18

;; <L15> [0.00%]:

(code_label 224 223 225 81 (nil) [0 uses])

(note 225 224 0 NOTE_INSN_BASIC_BLOCK)

;; __builtin_puts (&"\nPrinting Tree inOrder"[0]);

(insn 226 225 227 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7fddd74a0990 *.LC23>)) "test1.c":388 -1
     (nil))

(call_insn 227 226 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":388 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; printInOrder (root_15);

(insn 228 227 229 (set (reg:DI 128)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])) "test1.c":389 -1
     (nil))

(insn 229 228 230 (set (reg:DI 5 di)
        (reg:DI 128)) "test1.c":389 -1
     (nil))

(call_insn 230 229 0 (call (mem:QI (symbol_ref:DI ("printInOrder") [flags 0x3]  <function_decl 0x7fddd77fa300 printInOrder>) [0 printInOrder S1 A8])
        (const_int 0 [0])) "test1.c":389 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; flag_88 = flag_12;

(nil)

;; root_94 = root_15;

(nil)

;; Generating RTL for gimple basic block 19

;; <L16> [0.00%]:

(code_label 233 232 234 82 (nil) [0 uses])

(note 234 233 0 NOTE_INSN_BASIC_BLOCK)

;; __builtin_puts (&"\nPrinting Tree PostOrder"[0]);

(insn 235 234 236 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7fddd74a0a20 *.LC24>)) "test1.c":396 -1
     (nil))

(call_insn 236 235 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":396 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; printPostOrder (root_15);

(insn 237 236 238 (set (reg:DI 129)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])) "test1.c":397 -1
     (nil))

(insn 238 237 239 (set (reg:DI 5 di)
        (reg:DI 129)) "test1.c":397 -1
     (nil))

(call_insn 239 238 0 (call (mem:QI (symbol_ref:DI ("printPostOrder") [flags 0x3]  <function_decl 0x7fddd77fa500 printPostOrder>) [0 printPostOrder S1 A8])
        (const_int 0 [0])) "test1.c":397 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; flag_89 = flag_12;

(nil)

;; root_95 = root_15;

(nil)

;; Generating RTL for gimple basic block 20

;; <L17> [0.00%]:

(code_label 242 241 243 83 (nil) [0 uses])

(note 243 242 0 NOTE_INSN_BASIC_BLOCK)

;; __builtin_puts (&"\nPrinting AVL Tree"[0]);

(insn 244 243 245 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7fddd74a0ab0 *.LC25>)) "test1.c":404 -1
     (nil))

(call_insn 245 244 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":404 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; printAVL (root_15, 1);

(insn 246 245 247 (set (reg:DI 130)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])) "test1.c":405 -1
     (nil))

(insn 247 246 248 (set (reg:SI 4 si)
        (const_int 1 [0x1])) "test1.c":405 -1
     (nil))

(insn 248 247 249 (set (reg:DI 5 di)
        (reg:DI 130)) "test1.c":405 -1
     (nil))

(call_insn 249 248 0 (call (mem:QI (symbol_ref:DI ("printAVL") [flags 0x3]  <function_decl 0x7fddd77ee100 printAVL>) [0 printAVL S1 A8])
        (const_int 0 [0])) "test1.c":405 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))

;; flag_90 = flag_12;

(nil)

;; root_96 = root_15;

(nil)

;; Generating RTL for gimple basic block 21

;; <L18> [0.00%]:

(code_label 252 251 253 74 (nil) [0 uses])

(note 253 252 0 NOTE_INSN_BASIC_BLOCK)

;; flag_82 = 0;

(insn 254 253 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 flag+0 S4 A32])
        (const_int 0 [0])) "test1.c":412 -1
     (nil))

;; __builtin_puts (&"\n\t\tExiting, Thank You !!"[0]);

(insn 255 254 256 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7fddd74a03f0 *.LC13>)) "test1.c":413 -1
     (nil))

(call_insn 256 255 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":413 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; root_97 = root_15;

(nil)

;; Generating RTL for gimple basic block 22

;; 

(code_label 257 256 258 73 (nil) [0 uses])

(note 258 257 0 NOTE_INSN_BASIC_BLOCK)

;; if (flag_12 == 1)

(insn 260 258 261 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 flag+0 S4 A32])
            (const_int 1 [0x1]))) "test1.c":284 -1
     (nil))

(jump_insn 261 260 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 259)
            (pc))) "test1.c":284 -1
     (nil))

;; Generating RTL for gimple basic block 23

;; _23 = 0;

(insn 263 262 0 (set (reg:SI 98 [ _23 ])
        (const_int 0 [0])) "test1.c":419 -1
     (nil))

;; choice ={v} {CLOBBER};

(nil)

;; insertNum ={v} {CLOBBER};

(nil)

;; queryNum ={v} {CLOBBER};

(nil)

;; Generating RTL for gimple basic block 24

;; <L23> [0.00%]:

(code_label 264 263 265 91 (nil) [0 uses])

(note 265 264 0 NOTE_INSN_BASIC_BLOCK)

;; return _23;

(insn 266 265 267 (set (reg:SI 99 [ <retval> ])
        (reg:SI 98 [ _23 ])) -1
     (nil))

(jump_insn 267 266 268 (set (pc)
        (label_ref 0)) -1
     (nil))

(barrier 268 267 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 26 into block 25...
Merged blocks 25 and 26.
Merged 25 and 26 without moving.
Removing jump 267.
Merging block 27 into block 25...
Merged blocks 25 and 27.
Merged 25 and 27 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 flag+0 S4 A32])
        (const_int 1 [0x1])) "test1.c":277 -1
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])
        (const_int 0 [0])) "test1.c":281 -1
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (label_ref 257)) "test1.c":284 -1
     (nil)
 -> 257)
;;  succ:       24

(barrier 8 7 259)
;; basic block 4, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24
(code_label 259 8 9 4 90 (nil) [1 uses])
(note 9 259 10 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7fddd7497ea0 *.LC4>)) "test1.c":286 -1
     (nil))
(call_insn 11 10 12 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":286 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 12 11 13 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7fddd7497f30 *.LC5>)) "test1.c":288 -1
     (nil))
(call_insn 13 12 14 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":288 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 14 13 15 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7fddd74a0000 *.LC6>)) "test1.c":289 -1
     (nil))
(call_insn 15 14 16 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":289 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 16 15 17 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7fddd74a0090 *.LC7>)) "test1.c":290 -1
     (nil))
(call_insn 17 16 18 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":290 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 18 17 19 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7fddd74a0120 *.LC8>)) "test1.c":291 -1
     (nil))
(call_insn 19 18 20 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":291 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 20 19 21 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7fddd74a01b0 *.LC9>)) "test1.c":292 -1
     (nil))
(call_insn 21 20 22 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":292 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 22 21 23 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7fddd74a0240 *.LC10>)) "test1.c":293 -1
     (nil))
(call_insn 23 22 24 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":293 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 24 23 25 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7fddd74a02d0 *.LC11>)) "test1.c":294 -1
     (nil))
(call_insn 25 24 26 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":294 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 26 25 27 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7fddd74a0360 *.LC12>)) "test1.c":296 -1
     (nil))
(call_insn 27 26 28 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":296 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 28 27 29 4 (parallel [
            (set (reg:DI 100)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":297 -1
     (nil))
(insn 29 28 30 4 (set (reg:DI 4 si)
        (reg:DI 100)) "test1.c":297 -1
     (nil))
(insn 30 29 31 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fddd745d5a0 *.LC2>)) "test1.c":297 -1
     (nil))
(insn 31 30 32 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":297 -1
     (nil))
(call_insn 32 31 33 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7fddd76afb00 scanf>) [0 __builtin_scanf S1 A8])
            (const_int 0 [0]))) "test1.c":297 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 33 32 34 4 (set (reg:SI 87 [ choice.1_1 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [1 choice+0 S4 A32])) "test1.c":299 -1
     (nil))
(insn 34 33 35 4 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 87 [ choice.1_1 ])
            (const_int 7 [0x7]))) "test1.c":299 -1
     (nil))
(jump_insn 35 34 273 4 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 252)
            (pc))) "test1.c":299 -1
     (nil)
 -> 252)
;;  succ:       23
;;              5 (FALLTHRU)

;; basic block 5, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 (FALLTHRU)
(note 273 35 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 36 273 37 5 (set (reg:DI 101)
        (zero_extend:DI (reg:SI 87 [ choice.1_1 ]))) "test1.c":299 -1
     (nil))
(insn 37 36 38 5 (parallel [
            (set (reg:DI 102)
                (ashift:DI (reg:DI 101)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":299 -1
     (nil))
(insn 38 37 39 5 (set (reg:DI 103)
        (label_ref:DI 44)) "test1.c":299 -1
     (insn_list:REG_LABEL_OPERAND 44 (nil)))
(insn 39 38 40 5 (set (reg:SI 104)
        (mem/u/c:SI (plus:DI (reg:DI 102)
                (reg:DI 103)) [0  S4 A8])) "test1.c":299 -1
     (nil))
(insn 40 39 41 5 (set (reg:DI 105)
        (sign_extend:DI (reg:SI 104))) "test1.c":299 -1
     (nil))
(insn 41 40 42 5 (set (reg:DI 107)
        (label_ref:DI 44)) "test1.c":299 -1
     (insn_list:REG_LABEL_OPERAND 44 (nil)))
(insn 42 41 43 5 (parallel [
            (set (reg:DI 106)
                (plus:DI (reg:DI 105)
                    (reg:DI 107)))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":299 -1
     (nil))
(jump_insn 43 42 44 5 (parallel [
            (set (pc)
                (reg:DI 106))
            (use (label_ref 44))
        ]) "test1.c":299 -1
     (nil)
 -> 44)
;;  succ:       22
;;              6
;;              7
;;              11
;;              15
;;              19
;;              20
;;              21

;; Insn is not within a basic block
(code_label 44 43 45 76 (nil) [3 uses])
;; Insn is not within a basic block
(jump_table_data 45 44 46 (addr_diff_vec:SI (label_ref:DI 44)
         [
            (label_ref:DI 47)
            (label_ref:DI 54)
            (label_ref:DI 110)
            (label_ref:DI 166)
            (label_ref:DI 215)
            (label_ref:DI 224)
            (label_ref:DI 233)
            (label_ref:DI 242)
        ]
        (const_int 0 [0])
        (const_int 0 [0])))
(barrier 46 45 47)
;; basic block 6, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
(code_label 47 46 48 6 75 (nil) [1 uses])
(note 48 47 49 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 6 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 flag+0 S4 A32])
        (const_int 0 [0])) "test1.c":303 -1
     (nil))
(insn 50 49 51 6 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7fddd74a03f0 *.LC13>)) "test1.c":304 -1
     (nil))
(call_insn 51 50 52 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":304 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 52 51 53 6 (set (pc)
        (label_ref 257)) "test1.c":305 -1
     (nil)
 -> 257)
;;  succ:       24 (DFS_BACK)

(barrier 53 52 54)
;; basic block 7, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
(code_label 54 53 55 7 77 (nil) [1 uses])
(note 55 54 56 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 7 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7fddd74a0480 *.LC14>)) "test1.c":310 -1
     (nil))
(insn 57 56 58 7 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":310 -1
     (nil))
(call_insn 58 57 59 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fddd76aef00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":310 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 59 58 60 7 (parallel [
            (set (reg:DI 108)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -32 [0xffffffffffffffe0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":311 -1
     (nil))
(insn 60 59 61 7 (set (reg:DI 4 si)
        (reg:DI 108)) "test1.c":311 -1
     (nil))
(insn 61 60 62 7 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fddd745d5a0 *.LC2>)) "test1.c":311 -1
     (nil))
(insn 62 61 63 7 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":311 -1
     (nil))
(call_insn 63 62 64 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7fddd76afb00 scanf>) [0 __builtin_scanf S1 A8])
            (const_int 0 [0]))) "test1.c":311 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 64 63 65 7 (set (reg:SI 88 [ insertNum.2_2 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [1 insertNum+0 S4 A64])) "test1.c":313 -1
     (nil))
(insn 65 64 66 7 (set (reg:DI 109)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])) "test1.c":313 -1
     (nil))
(insn 66 65 67 7 (set (reg:SI 4 si)
        (reg:SI 88 [ insertNum.2_2 ])) "test1.c":313 -1
     (nil))
(insn 67 66 68 7 (set (reg:DI 5 di)
        (reg:DI 109)) "test1.c":313 -1
     (nil))
(call_insn 68 67 69 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("findNode") [flags 0x3]  <function_decl 0x7fddd77eef00 findNode>) [0 findNode S1 A8])
            (const_int 0 [0]))) "test1.c":313 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 69 68 70 7 (set (reg:DI 110)
        (reg:DI 0 ax)) "test1.c":313 -1
     (nil))
(insn 70 69 71 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 tempNode+0 S8 A64])
        (reg:DI 110)) "test1.c":313 -1
     (nil))
(insn 71 70 72 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -24 [0xffffffffffffffe8])) [2 tempNode+0 S8 A64])
            (const_int 0 [0]))) "test1.c":315 -1
     (nil))
(jump_insn 72 71 73 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 81)
            (pc))) "test1.c":315 -1
     (nil)
 -> 81)
;;  succ:       8 (FALLTHRU)
;;              9

;; basic block 8, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 (FALLTHRU)
(note 73 72 74 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 8 (set (reg:SI 89 [ insertNum.3_3 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [1 insertNum+0 S4 A64])) "test1.c":316 -1
     (nil))
(insn 75 74 76 8 (set (reg:SI 4 si)
        (reg:SI 89 [ insertNum.3_3 ])) "test1.c":316 -1
     (nil))
(insn 76 75 77 8 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7fddd74a0510 *.LC15>)) "test1.c":316 -1
     (nil))
(insn 77 76 78 8 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":316 -1
     (nil))
(call_insn 78 77 79 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fddd76aef00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":316 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(jump_insn 79 78 80 8 (set (pc)
        (label_ref 106)) -1
     (nil)
 -> 106)
;;  succ:       10

(barrier 80 79 81)
;; basic block 9, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       7
(code_label 81 80 82 9 84 (nil) [1 uses])
(note 82 81 83 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 9 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7fddd74a05a0 *.LC16>)) "test1.c":319 -1
     (nil))
(call_insn 84 83 85 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":319 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 85 84 86 9 (set (reg:DI 111)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])) "test1.c":320 -1
     (nil))
(insn 86 85 87 9 (set (reg:SI 4 si)
        (const_int 1 [0x1])) "test1.c":320 -1
     (nil))
(insn 87 86 88 9 (set (reg:DI 5 di)
        (reg:DI 111)) "test1.c":320 -1
     (nil))
(call_insn 88 87 89 9 (call (mem:QI (symbol_ref:DI ("printAVL") [flags 0x3]  <function_decl 0x7fddd77ee100 printAVL>) [0 printAVL S1 A8])
        (const_int 0 [0])) "test1.c":320 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 89 88 90 9 (set (reg:SI 5 di)
        (const_int 10 [0xa])) "test1.c":321 -1
     (nil))
(call_insn 90 89 91 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7fddd76af200 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) "test1.c":321 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 91 90 92 9 (set (reg:SI 90 [ insertNum.4_4 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [1 insertNum+0 S4 A64])) "test1.c":323 -1
     (nil))
(insn 92 91 93 9 (set (reg:DI 112)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])) "test1.c":323 -1
     (nil))
(insn 93 92 94 9 (set (reg:SI 4 si)
        (reg:SI 90 [ insertNum.4_4 ])) "test1.c":323 -1
     (nil))
(insn 94 93 95 9 (set (reg:DI 5 di)
        (reg:DI 112)) "test1.c":323 -1
     (nil))
(call_insn 95 94 96 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("insert") [flags 0x3]  <function_decl 0x7fddd77eeb00 insert>) [0 insert S1 A8])
            (const_int 0 [0]))) "test1.c":323 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 96 95 97 9 (set (reg:DI 113)
        (reg:DI 0 ax)) "test1.c":323 -1
     (nil))
(insn 97 96 98 9 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])
        (reg:DI 113)) "test1.c":323 -1
     (nil))
(insn 98 97 99 9 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7fddd74a05a0 *.LC16>)) "test1.c":324 -1
     (nil))
(call_insn 99 98 100 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":324 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 100 99 101 9 (set (reg:DI 114)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])) "test1.c":325 -1
     (nil))
(insn 101 100 102 9 (set (reg:SI 4 si)
        (const_int 1 [0x1])) "test1.c":325 -1
     (nil))
(insn 102 101 103 9 (set (reg:DI 5 di)
        (reg:DI 114)) "test1.c":325 -1
     (nil))
(call_insn 103 102 104 9 (call (mem:QI (symbol_ref:DI ("printAVL") [flags 0x3]  <function_decl 0x7fddd77ee100 printAVL>) [0 printAVL S1 A8])
        (const_int 0 [0])) "test1.c":325 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 104 103 105 9 (set (reg:SI 5 di)
        (const_int 10 [0xa])) "test1.c":326 -1
     (nil))
(call_insn 105 104 106 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7fddd76af200 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) "test1.c":326 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:       10 (FALLTHRU)

;; basic block 10, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL)
;;  pred:       8
;;              9 (FALLTHRU)
(code_label 106 105 107 10 85 (nil) [1 uses])
(note 107 106 108 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(jump_insn 108 107 109 10 (set (pc)
        (label_ref 257)) "test1.c":329 -1
     (nil)
 -> 257)
;;  succ:       24 (DFS_BACK)

(barrier 109 108 110)
;; basic block 11, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
(code_label 110 109 111 11 78 (nil) [1 uses])
(note 111 110 112 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 112 111 113 11 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7fddd74a0630 *.LC17>)) "test1.c":334 -1
     (nil))
(insn 113 112 114 11 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":334 -1
     (nil))
(call_insn 114 113 115 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fddd76aef00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":334 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 115 114 116 11 (parallel [
            (set (reg:DI 115)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -36 [0xffffffffffffffdc])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":335 -1
     (nil))
(insn 116 115 117 11 (set (reg:DI 4 si)
        (reg:DI 115)) "test1.c":335 -1
     (nil))
(insn 117 116 118 11 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fddd745d5a0 *.LC2>)) "test1.c":335 -1
     (nil))
(insn 118 117 119 11 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":335 -1
     (nil))
(call_insn 119 118 120 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7fddd76afb00 scanf>) [0 __builtin_scanf S1 A8])
            (const_int 0 [0]))) "test1.c":335 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 120 119 121 11 (set (reg:SI 91 [ queryNum.5_5 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [1 queryNum+0 S4 A32])) "test1.c":337 -1
     (nil))
(insn 121 120 122 11 (set (reg:DI 116)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])) "test1.c":337 -1
     (nil))
(insn 122 121 123 11 (set (reg:SI 4 si)
        (reg:SI 91 [ queryNum.5_5 ])) "test1.c":337 -1
     (nil))
(insn 123 122 124 11 (set (reg:DI 5 di)
        (reg:DI 116)) "test1.c":337 -1
     (nil))
(call_insn 124 123 125 11 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("findNode") [flags 0x3]  <function_decl 0x7fddd77eef00 findNode>) [0 findNode S1 A8])
            (const_int 0 [0]))) "test1.c":337 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 125 124 126 11 (set (reg:DI 117)
        (reg:DI 0 ax)) "test1.c":337 -1
     (nil))
(insn 126 125 127 11 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 tempNode+0 S8 A64])
        (reg:DI 117)) "test1.c":337 -1
     (nil))
(insn 127 126 128 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -24 [0xffffffffffffffe8])) [2 tempNode+0 S8 A64])
            (const_int 0 [0]))) "test1.c":339 -1
     (nil))
(jump_insn 128 127 129 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 137)
            (pc))) "test1.c":339 -1
     (nil)
 -> 137)
;;  succ:       12 (FALLTHRU)
;;              13

;; basic block 12, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL)
;;  pred:       11 (FALLTHRU)
(note 129 128 130 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 130 129 131 12 (set (reg:SI 92 [ queryNum.6_6 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [1 queryNum+0 S4 A32])) "test1.c":340 -1
     (nil))
(insn 131 130 132 12 (set (reg:SI 4 si)
        (reg:SI 92 [ queryNum.6_6 ])) "test1.c":340 -1
     (nil))
(insn 132 131 133 12 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7fddd74a06c0 *.LC18>)) "test1.c":340 -1
     (nil))
(insn 133 132 134 12 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":340 -1
     (nil))
(call_insn 134 133 135 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fddd76aef00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":340 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(jump_insn 135 134 136 12 (set (pc)
        (label_ref 162)) -1
     (nil)
 -> 162)
;;  succ:       14

(barrier 136 135 137)
;; basic block 13, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL)
;;  pred:       11
(code_label 137 136 138 13 86 (nil) [1 uses])
(note 138 137 139 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 139 138 140 13 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7fddd74a05a0 *.LC16>)) "test1.c":343 -1
     (nil))
(call_insn 140 139 141 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":343 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 141 140 142 13 (set (reg:DI 118)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])) "test1.c":344 -1
     (nil))
(insn 142 141 143 13 (set (reg:SI 4 si)
        (const_int 1 [0x1])) "test1.c":344 -1
     (nil))
(insn 143 142 144 13 (set (reg:DI 5 di)
        (reg:DI 118)) "test1.c":344 -1
     (nil))
(call_insn 144 143 145 13 (call (mem:QI (symbol_ref:DI ("printAVL") [flags 0x3]  <function_decl 0x7fddd77ee100 printAVL>) [0 printAVL S1 A8])
        (const_int 0 [0])) "test1.c":344 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 145 144 146 13 (set (reg:SI 5 di)
        (const_int 10 [0xa])) "test1.c":345 -1
     (nil))
(call_insn 146 145 147 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7fddd76af200 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) "test1.c":345 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 147 146 148 13 (set (reg:SI 93 [ queryNum.7_7 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [1 queryNum+0 S4 A32])) "test1.c":346 -1
     (nil))
(insn 148 147 149 13 (set (reg:DI 119)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])) "test1.c":346 -1
     (nil))
(insn 149 148 150 13 (set (reg:SI 4 si)
        (reg:SI 93 [ queryNum.7_7 ])) "test1.c":346 -1
     (nil))
(insn 150 149 151 13 (set (reg:DI 5 di)
        (reg:DI 119)) "test1.c":346 -1
     (nil))
(call_insn 151 150 152 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("delete") [flags 0x3]  <function_decl 0x7fddd77eed00 delete>) [0 delete S1 A8])
            (const_int 0 [0]))) "test1.c":346 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 152 151 153 13 (set (reg:DI 120)
        (reg:DI 0 ax)) "test1.c":346 -1
     (nil))
(insn 153 152 154 13 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])
        (reg:DI 120)) "test1.c":346 -1
     (nil))
(insn 154 153 155 13 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7fddd74a05a0 *.LC16>)) "test1.c":348 -1
     (nil))
(call_insn 155 154 156 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":348 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 156 155 157 13 (set (reg:DI 121)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])) "test1.c":349 -1
     (nil))
(insn 157 156 158 13 (set (reg:SI 4 si)
        (const_int 1 [0x1])) "test1.c":349 -1
     (nil))
(insn 158 157 159 13 (set (reg:DI 5 di)
        (reg:DI 121)) "test1.c":349 -1
     (nil))
(call_insn 159 158 160 13 (call (mem:QI (symbol_ref:DI ("printAVL") [flags 0x3]  <function_decl 0x7fddd77ee100 printAVL>) [0 printAVL S1 A8])
        (const_int 0 [0])) "test1.c":349 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 160 159 161 13 (set (reg:SI 5 di)
        (const_int 10 [0xa])) "test1.c":350 -1
     (nil))
(call_insn 161 160 162 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7fddd76af200 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) "test1.c":350 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:       14 (FALLTHRU)

;; basic block 14, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL)
;;  pred:       12
;;              13 (FALLTHRU)
(code_label 162 161 163 14 87 (nil) [1 uses])
(note 163 162 164 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(jump_insn 164 163 165 14 (set (pc)
        (label_ref 257)) "test1.c":353 -1
     (nil)
 -> 257)
;;  succ:       24 (DFS_BACK)

(barrier 165 164 166)
;; basic block 15, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
(code_label 166 165 167 15 79 (nil) [1 uses])
(note 167 166 168 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 168 167 169 15 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7fddd74a0750 *.LC19>)) "test1.c":358 -1
     (nil))
(insn 169 168 170 15 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":358 -1
     (nil))
(call_insn 170 169 171 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fddd76aef00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":358 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 171 170 172 15 (parallel [
            (set (reg:DI 122)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -36 [0xffffffffffffffdc])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":359 -1
     (nil))
(insn 172 171 173 15 (set (reg:DI 4 si)
        (reg:DI 122)) "test1.c":359 -1
     (nil))
(insn 173 172 174 15 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fddd745d5a0 *.LC2>)) "test1.c":359 -1
     (nil))
(insn 174 173 175 15 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":359 -1
     (nil))
(call_insn 175 174 176 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7fddd76afb00 scanf>) [0 __builtin_scanf S1 A8])
            (const_int 0 [0]))) "test1.c":359 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 176 175 177 15 (set (reg:SI 94 [ queryNum.8_8 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [1 queryNum+0 S4 A32])) "test1.c":361 -1
     (nil))
(insn 177 176 178 15 (set (reg:DI 123)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])) "test1.c":361 -1
     (nil))
(insn 178 177 179 15 (set (reg:SI 4 si)
        (reg:SI 94 [ queryNum.8_8 ])) "test1.c":361 -1
     (nil))
(insn 179 178 180 15 (set (reg:DI 5 di)
        (reg:DI 123)) "test1.c":361 -1
     (nil))
(call_insn 180 179 181 15 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("findNode") [flags 0x3]  <function_decl 0x7fddd77eef00 findNode>) [0 findNode S1 A8])
            (const_int 0 [0]))) "test1.c":361 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 181 180 182 15 (set (reg:DI 124)
        (reg:DI 0 ax)) "test1.c":361 -1
     (nil))
(insn 182 181 183 15 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 tempNode+0 S8 A64])
        (reg:DI 124)) "test1.c":361 -1
     (nil))
(insn 183 182 184 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -24 [0xffffffffffffffe8])) [2 tempNode+0 S8 A64])
            (const_int 0 [0]))) "test1.c":363 -1
     (nil))
(jump_insn 184 183 185 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 193)
            (pc))) "test1.c":363 -1
     (nil)
 -> 193)
;;  succ:       16 (FALLTHRU)
;;              17

;; basic block 16, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL)
;;  pred:       15 (FALLTHRU)
(note 185 184 186 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 186 185 187 16 (set (reg:SI 95 [ queryNum.9_9 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [1 queryNum+0 S4 A32])) "test1.c":364 -1
     (nil))
(insn 187 186 188 16 (set (reg:SI 4 si)
        (reg:SI 95 [ queryNum.9_9 ])) "test1.c":364 -1
     (nil))
(insn 188 187 189 16 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7fddd74a07e0 *.LC20>)) "test1.c":364 -1
     (nil))
(insn 189 188 190 16 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":364 -1
     (nil))
(call_insn 190 189 191 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fddd76aef00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":364 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(jump_insn 191 190 192 16 (set (pc)
        (label_ref 211)) -1
     (nil)
 -> 211)
;;  succ:       18

(barrier 192 191 193)
;; basic block 17, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL)
;;  pred:       15
(code_label 193 192 194 17 88 (nil) [1 uses])
(note 194 193 195 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 195 194 196 17 (set (reg/f:DI 125)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 tempNode+0 S8 A64])) "test1.c":367 -1
     (nil))
(insn 196 195 197 17 (set (reg:SI 96 [ _10 ])
        (mem:SI (plus:DI (reg/f:DI 125)
                (const_int 24 [0x18])) [1 tempNode_48->height+0 S4 A64])) "test1.c":367 -1
     (nil))
(insn 197 196 198 17 (set (reg:SI 97 [ queryNum.10_11 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [1 queryNum+0 S4 A32])) "test1.c":367 -1
     (nil))
(insn 198 197 199 17 (set (reg:SI 1 dx)
        (reg:SI 96 [ _10 ])) "test1.c":367 -1
     (nil))
(insn 199 198 200 17 (set (reg:SI 4 si)
        (reg:SI 97 [ queryNum.10_11 ])) "test1.c":367 -1
     (nil))
(insn 200 199 201 17 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7fddd74a0870 *.LC21>)) "test1.c":367 -1
     (nil))
(insn 201 200 202 17 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":367 -1
     (nil))
(call_insn 202 201 203 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fddd76aef00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":367 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 203 202 204 17 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7fddd74a05a0 *.LC16>)) "test1.c":370 -1
     (nil))
(call_insn 204 203 205 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":370 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 205 204 206 17 (set (reg:DI 126)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])) "test1.c":371 -1
     (nil))
(insn 206 205 207 17 (set (reg:SI 4 si)
        (const_int 1 [0x1])) "test1.c":371 -1
     (nil))
(insn 207 206 208 17 (set (reg:DI 5 di)
        (reg:DI 126)) "test1.c":371 -1
     (nil))
(call_insn 208 207 209 17 (call (mem:QI (symbol_ref:DI ("printAVL") [flags 0x3]  <function_decl 0x7fddd77ee100 printAVL>) [0 printAVL S1 A8])
        (const_int 0 [0])) "test1.c":371 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 209 208 210 17 (set (reg:SI 5 di)
        (const_int 10 [0xa])) "test1.c":372 -1
     (nil))
(call_insn 210 209 211 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7fddd76af200 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) "test1.c":372 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:       18 (FALLTHRU)

;; basic block 18, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL)
;;  pred:       16
;;              17 (FALLTHRU)
(code_label 211 210 212 18 89 (nil) [1 uses])
(note 212 211 213 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(jump_insn 213 212 214 18 (set (pc)
        (label_ref 257)) "test1.c":375 -1
     (nil)
 -> 257)
;;  succ:       24 (DFS_BACK)

(barrier 214 213 215)
;; basic block 19, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
(code_label 215 214 216 19 80 (nil) [1 uses])
(note 216 215 217 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 217 216 218 19 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7fddd74a0900 *.LC22>)) "test1.c":380 -1
     (nil))
(call_insn 218 217 219 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":380 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 219 218 220 19 (set (reg:DI 127)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])) "test1.c":381 -1
     (nil))
(insn 220 219 221 19 (set (reg:DI 5 di)
        (reg:DI 127)) "test1.c":381 -1
     (nil))
(call_insn 221 220 222 19 (call (mem:QI (symbol_ref:DI ("printPreOrder") [flags 0x3]  <function_decl 0x7fddd77fa100 printPreOrder>) [0 printPreOrder S1 A8])
        (const_int 0 [0])) "test1.c":381 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 222 221 223 19 (set (pc)
        (label_ref 257)) "test1.c":383 -1
     (nil)
 -> 257)
;;  succ:       24 (DFS_BACK)

(barrier 223 222 224)
;; basic block 20, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
(code_label 224 223 225 20 81 (nil) [1 uses])
(note 225 224 226 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 226 225 227 20 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7fddd74a0990 *.LC23>)) "test1.c":388 -1
     (nil))
(call_insn 227 226 228 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":388 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 228 227 229 20 (set (reg:DI 128)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])) "test1.c":389 -1
     (nil))
(insn 229 228 230 20 (set (reg:DI 5 di)
        (reg:DI 128)) "test1.c":389 -1
     (nil))
(call_insn 230 229 231 20 (call (mem:QI (symbol_ref:DI ("printInOrder") [flags 0x3]  <function_decl 0x7fddd77fa300 printInOrder>) [0 printInOrder S1 A8])
        (const_int 0 [0])) "test1.c":389 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 231 230 232 20 (set (pc)
        (label_ref 257)) "test1.c":391 -1
     (nil)
 -> 257)
;;  succ:       24 (DFS_BACK)

(barrier 232 231 233)
;; basic block 21, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
(code_label 233 232 234 21 82 (nil) [1 uses])
(note 234 233 235 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 235 234 236 21 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7fddd74a0a20 *.LC24>)) "test1.c":396 -1
     (nil))
(call_insn 236 235 237 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":396 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 237 236 238 21 (set (reg:DI 129)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])) "test1.c":397 -1
     (nil))
(insn 238 237 239 21 (set (reg:DI 5 di)
        (reg:DI 129)) "test1.c":397 -1
     (nil))
(call_insn 239 238 240 21 (call (mem:QI (symbol_ref:DI ("printPostOrder") [flags 0x3]  <function_decl 0x7fddd77fa500 printPostOrder>) [0 printPostOrder S1 A8])
        (const_int 0 [0])) "test1.c":397 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 240 239 241 21 (set (pc)
        (label_ref 257)) "test1.c":399 -1
     (nil)
 -> 257)
;;  succ:       24 (DFS_BACK)

(barrier 241 240 242)
;; basic block 22, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
(code_label 242 241 243 22 83 (nil) [1 uses])
(note 243 242 244 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 244 243 245 22 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7fddd74a0ab0 *.LC25>)) "test1.c":404 -1
     (nil))
(call_insn 245 244 246 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":404 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 246 245 247 22 (set (reg:DI 130)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 root+0 S8 A64])) "test1.c":405 -1
     (nil))
(insn 247 246 248 22 (set (reg:SI 4 si)
        (const_int 1 [0x1])) "test1.c":405 -1
     (nil))
(insn 248 247 249 22 (set (reg:DI 5 di)
        (reg:DI 130)) "test1.c":405 -1
     (nil))
(call_insn 249 248 250 22 (call (mem:QI (symbol_ref:DI ("printAVL") [flags 0x3]  <function_decl 0x7fddd77ee100 printAVL>) [0 printAVL S1 A8])
        (const_int 0 [0])) "test1.c":405 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(jump_insn 250 249 251 22 (set (pc)
        (label_ref 257)) "test1.c":407 -1
     (nil)
 -> 257)
;;  succ:       24 (DFS_BACK)

(barrier 251 250 252)
;; basic block 23, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
(code_label 252 251 253 23 74 (nil) [1 uses])
(note 253 252 254 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 254 253 255 23 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 flag+0 S4 A32])
        (const_int 0 [0])) "test1.c":412 -1
     (nil))
(insn 255 254 256 23 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7fddd74a03f0 *.LC13>)) "test1.c":413 -1
     (nil))
(call_insn 256 255 257 23 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fddd76af600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":413 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       24 (FALLTHRU,DFS_BACK)

;; basic block 24, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              6 (DFS_BACK)
;;              10 (DFS_BACK)
;;              14 (DFS_BACK)
;;              18 (DFS_BACK)
;;              19 (DFS_BACK)
;;              20 (DFS_BACK)
;;              21 (DFS_BACK)
;;              22 (DFS_BACK)
;;              23 (FALLTHRU,DFS_BACK)
(code_label 257 256 258 24 73 (nil) [9 uses])
(note 258 257 260 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 260 258 261 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 flag+0 S4 A32])
            (const_int 1 [0x1]))) "test1.c":284 -1
     (nil))
(jump_insn 261 260 262 24 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 259)
            (pc))) "test1.c":284 -1
     (nil)
 -> 259)
;;  succ:       4
;;              25 (FALLTHRU)

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       24 (FALLTHRU)
(note 262 261 263 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 263 262 266 25 (set (reg:SI 98 [ _23 ])
        (const_int 0 [0])) "test1.c":419 -1
     (nil))
(insn 266 263 270 25 (set (reg:SI 99 [ <retval> ])
        (reg:SI 98 [ _23 ])) -1
     (nil))
(insn 270 266 271 25 (set (reg/i:SI 0 ax)
        (reg:SI 99 [ <retval> ])) "test1.c":420 -1
     (nil))
(insn 271 270 0 25 (use (reg/i:SI 0 ax)) "test1.c":420 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)

