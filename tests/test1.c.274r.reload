
;; Function isSafe (isSafe, funcdef_no=0, decl_uid=2257, cgraph_uid=0, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 22:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=98 from oldreg=87, assigning class GENERAL_REGS to r98
   22: {r98:DI=r98:DI<<0x5;clobber flags:CC;}
      REG_DEAD r87:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   51: r98:DI=r87:DI
    Inserting insn reload after:
   52: r88:DI=r98:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9

********** Pseudo live ranges #1: **********

  BB 9
   Insn 46: point = 0, n_alt = -1
   Insn 45: point = 0, n_alt = -2
   Insn 41: point = 1, n_alt = -2
  BB 7
   Insn 48: point = 4, n_alt = -1
   Insn 31: point = 4, n_alt = 0
  BB 8
   Insn 36: point = 5, n_alt = 0
  BB 6
   Insn 29: point = 6, n_alt = -1
   Insn 28: point = 6, n_alt = 0
   Insn 27: point = 7, n_alt = 0
   Insn 26: point = 9, n_alt = 0
   Insn 25: point = 11, n_alt = 0
   Insn 24: point = 12, n_alt = 0
   Insn 23: point = 14, n_alt = 3
   Insn 52: point = 15, n_alt = -2
	Hard reg 1 is preferable by r98 with profit 1
   Insn 22: point = 17, n_alt = 0
   Insn 51: point = 17, n_alt = -2
	Hard reg 1 is preferable by r98 with profit 1
	Hard reg 0 is preferable by r98 with profit 1
   Insn 21: point = 19, n_alt = 0
   Insn 20: point = 21, n_alt = 0
  BB 5
   Insn 18: point = 22, n_alt = -1
   Insn 17: point = 22, n_alt = 0
  BB 4
   Insn 15: point = 22, n_alt = -1
   Insn 14: point = 22, n_alt = 1
  BB 3
   Insn 12: point = 22, n_alt = -1
   Insn 11: point = 22, n_alt = 0
  BB 2
   Insn 9: point = 22, n_alt = -1
   Insn 8: point = 22, n_alt = 1
   Insn 4: point = 22, n_alt = 5
   Insn 3: point = 22, n_alt = 1
   Insn 2: point = 22, n_alt = 1
 r87: [18..19]
 r88: [13..15]
 r89: [8..12]
 r90: [6..7]
 r91: [2..5]
 r92: [0..1]
 r93: [20..21]
 r94: [13..14]
 r95: [8..9]
 r96: [10..11]
 r98: [16..17]
Compressing live ranges: from 22 to 18 - 81%
Ranges after the compression:
 r87: [14..15]
 r88: [10..11]
 r89: [6..9]
 r90: [4..5]
 r91: [2..3]
 r92: [0..1]
 r93: [16..17]
 r94: [10..11]
 r95: [6..7]
 r96: [8..9]
 r98: [12..13]

********** Assignment #1: **********

	 Assigning to 98 (cl=GENERAL_REGS, orig=87, freq=3, tfirst=98, tfreq=3)...
	   Assign 0 to reload r98 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 21
changing reg in insn 24
changing reg in insn 24
changing reg in insn 24
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 36
changing reg in insn 31
changing reg in insn 41
changing reg in insn 41
changing reg in insn 45
changing reg in insn 20
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 26
changing reg in insn 27
changing reg in insn 25
changing reg in insn 26
deleting insn with uid = 51.
deleting insn with uid = 41.
starting the processing of deferred insns
ending the processing of deferred insns


isSafe

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={11d,10u} r1={3d,3u,1e} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,19u} r7={1d,9u} r17={7d,5u} r20={1d,1u,1e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 88{37d,49u,2e} in 27{27 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
        (reg:SI 5 di [ x ])) "test1.c":12 82 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
        (reg:SI 4 si [ y ])) "test1.c":12 82 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 sol+0 S8 A64])
        (reg:DI 1 dx [ sol ])) "test1.c":12 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
            (const_int 0 [0]))) "test1.c":14 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) "test1.c":14 627 {*jcc_1}
     (nil)
 -> 34)
;;  succ:       3 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
            (const_int 7 [0x7]))) "test1.c":13 7 {*cmpsi_1}
     (nil))
(jump_insn 12 11 13 3 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) "test1.c":13 627 {*jcc_1}
     (nil)
 -> 34)
;;  succ:       4 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 13 12 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 4 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
            (const_int 0 [0]))) "test1.c":13 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 15 14 16 4 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) "test1.c":13 627 {*jcc_1}
     (nil)
 -> 34)
;;  succ:       5 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 16 15 17 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
            (const_int 7 [0x7]))) "test1.c":13 7 {*cmpsi_1}
     (nil))
(jump_insn 18 17 19 5 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) "test1.c":13 627 {*jcc_1}
     (nil)
 -> 34)
;;  succ:       6 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 93 94 95 96
(note 19 18 20 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 6 (set (reg:SI 0 ax [93])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])) "test1.c":14 82 {*movsi_internal}
     (nil))
(insn 21 20 22 6 (set (reg:DI 0 ax [orig:87 _1 ] [87])
        (sign_extend:DI (reg:SI 0 ax [93]))) "test1.c":14 145 {*extendsidi2_rex64}
     (nil))
(insn 22 21 52 6 (parallel [
            (set (reg:DI 0 ax [orig:87 _1 ] [87])
                (ashift:DI (reg:DI 0 ax [orig:87 _1 ] [87])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":14 522 {*ashldi3_1}
     (nil))
(insn 52 22 23 6 (set (reg:DI 1 dx [orig:88 _2 ] [88])
        (reg:DI 0 ax [orig:87 _1 ] [87])) "test1.c":14 81 {*movdi_internal}
     (nil))
(insn 23 52 24 6 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 sol+0 S8 A64])) "test1.c":14 81 {*movdi_internal}
     (nil))
(insn 24 23 25 6 (parallel [
            (set (reg/f:DI 1 dx [orig:89 _3 ] [89])
                (plus:DI (reg:DI 1 dx [orig:88 _2 ] [88])
                    (reg/f:DI 0 ax [94])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":14 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 sol+0 S8 A64])
            (reg:DI 1 dx [orig:88 _2 ] [88]))
        (nil)))
(insn 25 24 26 6 (set (reg:SI 0 ax [96])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])) "test1.c":14 82 {*movsi_internal}
     (nil))
(insn 26 25 27 6 (set (reg:DI 0 ax [95])
        (sign_extend:DI (reg:SI 0 ax [96]))) "test1.c":14 145 {*extendsidi2_rex64}
     (nil))
(insn 27 26 28 6 (set (reg:SI 0 ax [orig:90 _4 ] [90])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [95])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [orig:89 _3 ] [89])) [1 *_3 S4 A32])) "test1.c":14 82 {*movsi_internal}
     (nil))
(insn 28 27 29 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:90 _4 ] [90])
            (const_int -1 [0xffffffffffffffff]))) "test1.c":14 7 {*cmpsi_1}
     (nil))
(jump_insn 29 28 30 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) "test1.c":14 627 {*jcc_1}
     (nil)
 -> 34)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 91
(note 30 29 31 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 48 7 (set (reg:SI 0 ax [orig:91 iftmp.0_5 ] [91])
        (const_int 1 [0x1])) "test1.c":14 82 {*movsi_internal}
     (nil))
(jump_insn 48 31 49 7 (set (pc)
        (label_ref 39)) "test1.c":14 659 {jump}
     (nil)
 -> 39)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91

(barrier 49 48 34)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3
;;              4
;;              5
;;              6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 91
(code_label 34 49 35 8 2 (nil) [5 uses])
(note 35 34 36 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 39 8 (set (reg:SI 0 ax [orig:91 iftmp.0_5 ] [91])
        (const_int 0 [0])) "test1.c":14 82 {*movsi_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 1, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              7 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91
;; lr  def 	 0 [ax] 92
(code_label 39 36 40 9 4 (nil) [1 uses])
(note 40 39 45 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 45 40 46 9 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:92 <retval> ] [92])) "test1.c":15 82 {*movsi_internal}
     (nil))
(insn 46 45 50 9 (use (reg/i:SI 0 ax)) "test1.c":15 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 50 46 0 NOTE_INSN_DELETED)

;; Function printSolution (printSolution, funcdef_no=1, decl_uid=2260, cgraph_uid=1, symbol_order=1)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 16:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=95 from oldreg=87, assigning class GENERAL_REGS to r95
   16: {r95:DI=r95:DI<<0x5;clobber flags:CC;}
      REG_DEAD r87:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   50: r95:DI=r87:DI
    Inserting insn reload after:
   51: r88:DI=r95:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 23:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 26:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 35:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) rm  (1) re {*cmpsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 44: point = 0, n_alt = -1
  BB 7
   Insn 40: point = 0, n_alt = -1
   Insn 39: point = 0, n_alt = 0
  BB 2
   Insn 45: point = 0, n_alt = -1
   Insn 6: point = 0, n_alt = 1
   Insn 2: point = 0, n_alt = 5
  BB 6
   Insn 35: point = 0, n_alt = 1
   Insn 34: point = 0, n_alt = 0
   Insn 33: point = 0, n_alt = 0
  BB 5
   Insn 31: point = 0, n_alt = -1
   Insn 30: point = 0, n_alt = 0
  BB 3
   Insn 47: point = 0, n_alt = -1
   Insn 10: point = 0, n_alt = 1
  BB 4
   Insn 26: point = 0, n_alt = 1
   Insn 25: point = 0, n_alt = 0
   Insn 24: point = 0, n_alt = 1
   Insn 23: point = 0, n_alt = 4
   Insn 22: point = 0, n_alt = -2
   Insn 21: point = 1, n_alt = 0
   Insn 20: point = 3, n_alt = 0
   Insn 19: point = 5, n_alt = 0
   Insn 18: point = 6, n_alt = 0
   Insn 17: point = 8, n_alt = 3
   Insn 51: point = 9, n_alt = -2
	Hard reg 1 is preferable by r95 with profit 1
   Insn 16: point = 11, n_alt = 0
   Insn 50: point = 11, n_alt = -2
	Hard reg 1 is preferable by r95 with profit 1
	Hard reg 0 is preferable by r95 with profit 1
   Insn 15: point = 13, n_alt = 0
   Insn 14: point = 15, n_alt = 0
 r87: [12..13]
 r88: [7..9]
 r89: [2..6]
 r90: [0..1]
 r91: [14..15]
 r92: [7..8]
 r93: [2..3]
 r94: [4..5]
 r95: [10..11]
Compressing live ranges: from 16 to 14 - 87%
Ranges after the compression:
 r87: [10..11]
 r88: [6..7]
 r89: [2..5]
 r90: [0..1]
 r91: [12..13]
 r92: [6..7]
 r93: [2..3]
 r94: [4..5]
 r95: [8..9]

********** Assignment #1: **********

	 Assigning to 95 (cl=GENERAL_REGS, orig=87, freq=3, tfirst=95, tfreq=3)...
	   Assign 0 to reload r95 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 15
changing reg in insn 18
changing reg in insn 18
changing reg in insn 18
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
changing reg in insn 19
changing reg in insn 20
deleting insn with uid = 50.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 34.


printSolution

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={11d,8u} r1={5d,2u,1e} r2={3d} r4={4d,1u} r5={5d,3u} r6={1d,20u} r7={1d,10u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={8d,2u} r18={2d} r19={2d} r20={1d,1u,1e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 230{181d,47u,2e} in 27{25 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 sol+0 S8 A64])
        (reg:DI 5 di [ sol ])) "test1.c":19 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 45 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
        (const_int 0 [0])) "test1.c":20 82 {*movsi_internal}
     (nil))
(jump_insn 45 6 46 2 (set (pc)
        (label_ref 36)) "test1.c":20 659 {jump}
     (nil)
 -> 36)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 46 45 38)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 38 46 9 3 9 (nil) [1 uses])
(note 9 38 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 47 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
        (const_int 0 [0])) "test1.c":21 82 {*movsi_internal}
     (nil))
(jump_insn 47 10 48 3 (set (pc)
        (label_ref 27)) "test1.c":21 659 {jump}
     (nil)
 -> 27)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 48 47 29)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94
(code_label 29 48 13 4 8 (nil) [1 uses])
(note 13 29 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 4 (set (reg:SI 0 ax [91])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])) "test1.c":22 82 {*movsi_internal}
     (nil))
(insn 15 14 16 4 (set (reg:DI 0 ax [orig:87 _1 ] [87])
        (sign_extend:DI (reg:SI 0 ax [91]))) "test1.c":22 145 {*extendsidi2_rex64}
     (nil))
(insn 16 15 51 4 (parallel [
            (set (reg:DI 0 ax [orig:87 _1 ] [87])
                (ashift:DI (reg:DI 0 ax [orig:87 _1 ] [87])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":22 522 {*ashldi3_1}
     (nil))
(insn 51 16 17 4 (set (reg:DI 1 dx [orig:88 _2 ] [88])
        (reg:DI 0 ax [orig:87 _1 ] [87])) "test1.c":22 81 {*movdi_internal}
     (nil))
(insn 17 51 18 4 (set (reg/f:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 sol+0 S8 A64])) "test1.c":22 81 {*movdi_internal}
     (nil))
(insn 18 17 19 4 (parallel [
            (set (reg/f:DI 1 dx [orig:89 _3 ] [89])
                (plus:DI (reg:DI 1 dx [orig:88 _2 ] [88])
                    (reg/f:DI 0 ax [92])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":22 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [2 sol+0 S8 A64])
            (reg:DI 1 dx [orig:88 _2 ] [88]))
        (nil)))
(insn 19 18 20 4 (set (reg:SI 0 ax [94])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])) "test1.c":22 82 {*movsi_internal}
     (nil))
(insn 20 19 21 4 (set (reg:DI 0 ax [93])
        (sign_extend:DI (reg:SI 0 ax [94]))) "test1.c":22 145 {*extendsidi2_rex64}
     (nil))
(insn 21 20 22 4 (set (reg:SI 0 ax [orig:90 _4 ] [90])
        (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [93])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [orig:89 _3 ] [89])) [1 *_3 S4 A32])) "test1.c":22 82 {*movsi_internal}
     (nil))
(insn 22 21 23 4 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:90 _4 ] [90])) "test1.c":22 82 {*movsi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fa2de79c090 *.LC0>)) "test1.c":22 81 {*movdi_internal}
     (nil))
(insn 24 23 25 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":22 84 {*movqi_internal}
     (nil))
(call_insn 25 24 26 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fa2de68bf00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":22 676 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 26 25 27 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":21 217 {*addsi_1}
     (nil))
;;  succ:       5 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 27 26 28 5 7 (nil) [1 uses])
(note 28 27 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 30 28 31 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
            (const_int 7 [0x7]))) "test1.c":21 7 {*cmpsi_1}
     (nil))
(jump_insn 31 30 32 5 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) "test1.c":21 627 {*jcc_1}
     (nil)
 -> 29)
;;  succ:       4
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 32 31 33 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 6 (set (reg:SI 5 di)
        (const_int 10 [0xa])) "test1.c":23 82 {*movsi_internal}
     (nil))
(call_insn 34 33 35 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7fa2de68c200 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) "test1.c":23 676 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 35 34 36 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":20 217 {*addsi_1}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 36 35 37 7 6 (nil) [1 uses])
(note 37 36 39 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 39 37 40 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
            (const_int 7 [0x7]))) "test1.c":20 7 {*cmpsi_1}
     (nil))
(jump_insn 40 39 41 7 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 38)
            (pc))) "test1.c":20 627 {*jcc_1}
     (nil)
 -> 38)
;;  succ:       3
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 41 40 44 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 44 41 49 8 (const_int 0 [0]) "test1.c":25 694 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 49 44 0 NOTE_INSN_DELETED)

;; Function solveKT (solveKT, funcdef_no=2, decl_uid=2270, cgraph_uid=2, symbol_order=2)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=352, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=336, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 18
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 20:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 27:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 51:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 52:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 53:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 65:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 73:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11

********** Pseudo live ranges #1: **********

  BB 11
   Insn 86: point = 0, n_alt = -1
   Insn 85: point = 0, n_alt = -2
   Insn 81: point = 1, n_alt = -2
  BB 9
   Insn 92: point = 4, n_alt = -1
   Insn 68: point = 4, n_alt = 0
   Insn 67: point = 5, n_alt = 0
   Insn 66: point = 5, n_alt = 1
   Insn 65: point = 5, n_alt = 4
  BB 10
   Insn 76: point = 5, n_alt = 0
   Insn 75: point = 6, n_alt = 0
   Insn 74: point = 6, n_alt = -2
   Insn 73: point = 7, n_alt = 3
  BB 8
   Insn 63: point = 8, n_alt = -1
   Insn 62: point = 8, n_alt = 0
   Insn 61: point = 9, n_alt = -2
   Insn 60: point = 10, n_alt = 0
   Insn 59: point = 10, n_alt = 0
   Insn 58: point = 10, n_alt = 0
   Insn 57: point = 10, n_alt = 0
   Insn 56: point = 10, n_alt = -2
   Insn 55: point = 11, n_alt = -2
   Insn 54: point = 12, n_alt = -2
   Insn 53: point = 13, n_alt = 3
   Insn 52: point = 14, n_alt = 3
   Insn 51: point = 15, n_alt = 3
   Insn 50: point = 16, n_alt = 1
   Insn 49: point = 16, n_alt = 1
   Insn 48: point = 16, n_alt = 1
   Insn 47: point = 16, n_alt = 1
   Insn 46: point = 16, n_alt = 1
   Insn 45: point = 16, n_alt = 1
   Insn 44: point = 16, n_alt = 1
   Insn 43: point = 16, n_alt = 1
   Insn 42: point = 16, n_alt = 1
   Insn 41: point = 16, n_alt = 1
   Insn 40: point = 16, n_alt = 1
   Insn 39: point = 16, n_alt = 1
   Insn 38: point = 16, n_alt = 1
   Insn 37: point = 16, n_alt = 1
   Insn 36: point = 16, n_alt = 1
   Insn 35: point = 16, n_alt = 1
   Insn 34: point = 16, n_alt = 1
  BB 7
   Insn 32: point = 16, n_alt = -1
   Insn 31: point = 16, n_alt = 0
  BB 2
   Insn 88: point = 16, n_alt = -1
   Insn 5: point = 16, n_alt = 1
  BB 6
   Insn 27: point = 16, n_alt = 1
  BB 5
   Insn 25: point = 16, n_alt = -1
   Insn 24: point = 16, n_alt = 0
  BB 3
   Insn 90: point = 16, n_alt = -1
   Insn 9: point = 16, n_alt = 1
  BB 4
   Insn 20: point = 16, n_alt = 1
   Insn 19: point = 16, n_alt = 1
   Insn 18: point = 17, n_alt = 0
   Insn 17: point = 19, n_alt = 0
   Insn 16: point = 21, n_alt = 1
   Insn 15: point = 23, n_alt = 0
   Insn 14: point = 24, n_alt = 0
   Insn 13: point = 26, n_alt = 0
 r87: [8..9]
 r88: [2..5]
 r89: [0..1]
 r90: [18..24]
 r91: [25..26]
 r92: [20..21]
 r93: [22..23]
 r94: [18..19]
 r95: [16..17]
 r96: [12..15]
 r97: [11..14]
 r98: [10..13]
 r99: [6..7]
Compressing live ranges: from 27 to 20 - 74%
Ranges after the compression:
 r87: [6..7]
 r88: [2..3]
 r89: [0..1]
 r90: [12..17]
 r91: [18..19]
 r92: [14..15]
 r93: [16..17]
 r94: [12..13]
 r95: [10..11]
 r96: [8..9]
 r97: [8..9]
 r98: [8..9]
 r99: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=352, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=336, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 61
changing reg in insn 62
changing reg in insn 76
changing reg in insn 68
changing reg in insn 81
changing reg in insn 81
changing reg in insn 85
changing reg in insn 14
changing reg in insn 13
changing reg in insn 14
changing reg in insn 16
changing reg in insn 17
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 51
changing reg in insn 54
changing reg in insn 52
changing reg in insn 55
changing reg in insn 53
changing reg in insn 56
changing reg in insn 73
changing reg in insn 74
deleting insn with uid = 61.
deleting insn with uid = 81.
starting the processing of deferred insns
ending the processing of deferred insns


solveKT

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 37 [r8] 38 [r9]
;;  ref usage 	r0={13d,10u} r1={9d,5u} r2={6d,2u} r4={5d,1u} r5={7d,3u} r6={1d,43u} r7={1d,14u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={14d,3u} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={5d,1u} r38={5d,1u} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 351{267d,84u,0e} in 57{54 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 88 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
        (const_int 0 [0])) "test1.c":39 82 {*movsi_internal}
     (nil))
(jump_insn 88 5 89 2 (set (pc)
        (label_ref 28)) "test1.c":39 659 {jump}
     (nil)
 -> 28)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 89 88 30)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 30 89 8 3 14 (nil) [1 uses])
(note 8 30 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 90 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
        (const_int 0 [0])) "test1.c":40 82 {*movsi_internal}
     (nil))
(jump_insn 90 9 91 3 (set (pc)
        (label_ref 21)) "test1.c":40 659 {jump}
     (nil)
 -> 21)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 91 90 23)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 93 94 95
(code_label 23 91 12 4 13 (nil) [1 uses])
(note 12 23 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 4 (set (reg:SI 0 ax [91])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])) "test1.c":41 82 {*movsi_internal}
     (nil))
(insn 14 13 15 4 (set (reg:DI 0 ax [90])
        (sign_extend:DI (reg:SI 0 ax [91]))) "test1.c":41 145 {*extendsidi2_rex64}
     (nil))
(insn 15 14 16 4 (set (reg:SI 1 dx [93])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])) "test1.c":41 82 {*movsi_internal}
     (nil))
(insn 16 15 17 4 (set (reg:DI 1 dx [92])
        (sign_extend:DI (reg:SI 1 dx [93]))) "test1.c":41 145 {*extendsidi2_rex64}
     (nil))
(insn 17 16 18 4 (parallel [
            (set (reg:DI 1 dx [94])
                (ashift:DI (reg:DI 1 dx [92])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":41 522 {*ashldi3_1}
     (nil))
(insn 18 17 19 4 (parallel [
            (set (reg:DI 0 ax [95])
                (plus:DI (reg:DI 0 ax [90])
                    (reg:DI 1 dx [94])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":41 218 {*adddi_1}
     (nil))
(insn 19 18 20 4 (set (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [95])
                        (const_int 4 [0x4]))
                    (reg/f:DI 6 bp))
                (const_int -272 [0xfffffffffffffef0])) [1 sol S4 A32])
        (const_int -1 [0xffffffffffffffff])) "test1.c":41 82 {*movsi_internal}
     (nil))
(insn 20 19 21 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":40 217 {*addsi_1}
     (nil))
;;  succ:       5 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 21 20 22 5 12 (nil) [1 uses])
(note 22 21 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 24 22 25 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [1 y+0 S4 A32])
            (const_int 7 [0x7]))) "test1.c":40 7 {*cmpsi_1}
     (nil))
(jump_insn 25 24 26 5 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) "test1.c":40 627 {*jcc_1}
     (nil)
 -> 23)
;;  succ:       4
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 26 25 27 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":39 217 {*addsi_1}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 28 27 29 7 11 (nil) [1 uses])
(note 29 28 31 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 31 29 32 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])
            (const_int 7 [0x7]))) "test1.c":39 7 {*cmpsi_1}
     (nil))
(jump_insn 32 31 33 7 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) "test1.c":39 627 {*jcc_1}
     (nil)
 -> 30)
;;  succ:       3
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 96 97 98
(note 33 32 34 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -304 [0xfffffffffffffed0])) [1 xMove+0 S4 A64])
        (const_int 2 [0x2])) "test1.c":46 82 {*movsi_internal}
     (nil))
(insn 35 34 36 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -300 [0xfffffffffffffed4])) [1 xMove+4 S4 A32])
        (const_int 1 [0x1])) "test1.c":46 82 {*movsi_internal}
     (nil))
(insn 36 35 37 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -296 [0xfffffffffffffed8])) [1 xMove+8 S4 A64])
        (const_int -1 [0xffffffffffffffff])) "test1.c":46 82 {*movsi_internal}
     (nil))
(insn 37 36 38 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -292 [0xfffffffffffffedc])) [1 xMove+12 S4 A32])
        (const_int -2 [0xfffffffffffffffe])) "test1.c":46 82 {*movsi_internal}
     (nil))
(insn 38 37 39 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -288 [0xfffffffffffffee0])) [1 xMove+16 S4 A64])
        (const_int -2 [0xfffffffffffffffe])) "test1.c":46 82 {*movsi_internal}
     (nil))
(insn 39 38 40 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -284 [0xfffffffffffffee4])) [1 xMove+20 S4 A32])
        (const_int -1 [0xffffffffffffffff])) "test1.c":46 82 {*movsi_internal}
     (nil))
(insn 40 39 41 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -280 [0xfffffffffffffee8])) [1 xMove+24 S4 A64])
        (const_int 1 [0x1])) "test1.c":46 82 {*movsi_internal}
     (nil))
(insn 41 40 42 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -276 [0xfffffffffffffeec])) [1 xMove+28 S4 A32])
        (const_int 2 [0x2])) "test1.c":46 82 {*movsi_internal}
     (nil))
(insn 42 41 43 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -336 [0xfffffffffffffeb0])) [1 yMove+0 S4 A64])
        (const_int 1 [0x1])) "test1.c":47 82 {*movsi_internal}
     (nil))
(insn 43 42 44 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -332 [0xfffffffffffffeb4])) [1 yMove+4 S4 A32])
        (const_int 2 [0x2])) "test1.c":47 82 {*movsi_internal}
     (nil))
(insn 44 43 45 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -328 [0xfffffffffffffeb8])) [1 yMove+8 S4 A64])
        (const_int 2 [0x2])) "test1.c":47 82 {*movsi_internal}
     (nil))
(insn 45 44 46 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -324 [0xfffffffffffffebc])) [1 yMove+12 S4 A32])
        (const_int 1 [0x1])) "test1.c":47 82 {*movsi_internal}
     (nil))
(insn 46 45 47 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -320 [0xfffffffffffffec0])) [1 yMove+16 S4 A64])
        (const_int -1 [0xffffffffffffffff])) "test1.c":47 82 {*movsi_internal}
     (nil))
(insn 47 46 48 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -316 [0xfffffffffffffec4])) [1 yMove+20 S4 A32])
        (const_int -2 [0xfffffffffffffffe])) "test1.c":47 82 {*movsi_internal}
     (nil))
(insn 48 47 49 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -312 [0xfffffffffffffec8])) [1 yMove+24 S4 A64])
        (const_int -2 [0xfffffffffffffffe])) "test1.c":47 82 {*movsi_internal}
     (nil))
(insn 49 48 50 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -308 [0xfffffffffffffecc])) [1 yMove+28 S4 A32])
        (const_int -1 [0xffffffffffffffff])) "test1.c":47 82 {*movsi_internal}
     (nil))
(insn 50 49 51 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -272 [0xfffffffffffffef0])) [1 sol+0 S4 A64])
        (const_int 0 [0])) "test1.c":50 82 {*movsi_internal}
     (nil))
(insn 51 50 52 8 (parallel [
            (set (reg:DI 2 cx [96])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -336 [0xfffffffffffffeb0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":54 218 {*adddi_1}
     (nil))
(insn 52 51 53 8 (parallel [
            (set (reg:DI 1 dx [97])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -304 [0xfffffffffffffed0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":54 218 {*adddi_1}
     (nil))
(insn 53 52 54 8 (parallel [
            (set (reg:DI 0 ax [98])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":54 218 {*adddi_1}
     (nil))
(insn 54 53 55 8 (set (reg:DI 38 r9)
        (reg:DI 2 cx [96])) "test1.c":54 81 {*movdi_internal}
     (nil))
(insn 55 54 56 8 (set (reg:DI 37 r8)
        (reg:DI 1 dx [97])) "test1.c":54 81 {*movdi_internal}
     (nil))
(insn 56 55 57 8 (set (reg:DI 2 cx)
        (reg:DI 0 ax [98])) "test1.c":54 81 {*movdi_internal}
     (nil))
(insn 57 56 58 8 (set (reg:SI 1 dx)
        (const_int 1 [0x1])) "test1.c":54 82 {*movsi_internal}
     (nil))
(insn 58 57 59 8 (set (reg:SI 4 si)
        (const_int 0 [0])) "test1.c":54 82 {*movsi_internal}
     (nil))
(insn 59 58 60 8 (set (reg:SI 5 di)
        (const_int 0 [0])) "test1.c":54 82 {*movsi_internal}
     (nil))
(call_insn 60 59 62 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("solveKTUtil") [flags 0x3]  <function_decl 0x7fa2de775f00 solveKTUtil>) [0 solveKTUtil S1 A8])
            (const_int 0 [0]))) "test1.c":54 676 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 62 60 63 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:87 _1 ] [87])
            (const_int 0 [0]))) "test1.c":54 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 63 62 64 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) "test1.c":54 627 {*jcc_1}
     (nil)
 -> 71)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88
(note 64 63 65 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 9 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fa2de79c870 *.LC1>)) "test1.c":55 81 {*movdi_internal}
     (nil))
(insn 66 65 67 9 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":55 84 {*movqi_internal}
     (nil))
(call_insn 67 66 68 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fa2de68bf00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":55 676 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 68 67 92 9 (set (reg:SI 0 ax [orig:88 _4 ] [88])
        (const_int 0 [0])) "test1.c":56 82 {*movsi_internal}
     (nil))
(jump_insn 92 68 93 9 (set (pc)
        (label_ref 79)) "test1.c":56 659 {jump}
     (nil)
 -> 79)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88

(barrier 93 92 71)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 99
(code_label 71 93 72 10 15 (nil) [1 uses])
(note 72 71 73 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 73 72 74 10 (parallel [
            (set (reg:DI 0 ax [99])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":59 218 {*adddi_1}
     (nil))
(insn 74 73 75 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [99])) "test1.c":59 81 {*movdi_internal}
     (nil))
(call_insn 75 74 76 10 (call (mem:QI (symbol_ref:DI ("printSolution") [flags 0x3]  <function_decl 0x7fa2de77a200 printSolution>) [0 printSolution S1 A8])
        (const_int 0 [0])) "test1.c":59 665 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 76 75 79 10 (set (reg:SI 0 ax [orig:88 _4 ] [88])
        (const_int 1 [0x1])) "test1.c":61 82 {*movsi_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 1, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;;              9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  def 	 0 [ax] 89
(code_label 79 76 80 11 17 (nil) [1 uses])
(note 80 79 85 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 85 80 86 11 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:89 <retval> ] [89])) "test1.c":62 82 {*movsi_internal}
     (nil))
(insn 86 85 94 11 (use (reg/i:SI 0 ax)) "test1.c":62 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 94 86 0 NOTE_INSN_DELETED)

;; Function solveKTUtil (solveKTUtil, funcdef_no=3, decl_uid=2253, cgraph_uid=3, symbol_order=3)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 27
	 Choosing alt 0 in insn 27:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 33
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 39
	 Choosing alt 0 in insn 39:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 45
	 Choosing alt 0 in insn 45:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 60:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=137 from oldreg=96, assigning class GENERAL_REGS to r137
   60: {r137:DI=r137:DI<<0x5;clobber flags:CC;}
      REG_DEAD r96:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  124: r137:DI=r96:DI
    Inserting insn reload after:
  125: r97:DI=r137:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 68:  (0) r  (1) r  (2) le {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 92:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=138 from oldreg=101, assigning class GENERAL_REGS to r138
   92: {r138:DI=r138:DI<<0x5;clobber flags:CC;}
      REG_DEAD r101:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  126: r138:DI=r101:DI
    Inserting insn reload after:
  127: r102:DI=r138:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 97:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 100:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12

********** Pseudo live ranges #1: **********

  BB 12
   Insn 115: point = 0, n_alt = -1
   Insn 114: point = 0, n_alt = -2
   Insn 110: point = 1, n_alt = -2
  BB 7
   Insn 121: point = 4, n_alt = -1
   Insn 85: point = 4, n_alt = 0
  BB 3
   Insn 117: point = 5, n_alt = -1
   Insn 14: point = 5, n_alt = 0
  BB 11
   Insn 107: point = 6, n_alt = 0
  BB 10
   Insn 105: point = 7, n_alt = -1
   Insn 104: point = 7, n_alt = 0
  BB 4
   Insn 119: point = 7, n_alt = -1
   Insn 19: point = 7, n_alt = 1
  BB 2
   Insn 12: point = 7, n_alt = -1
   Insn 11: point = 7, n_alt = 0
   Insn 7: point = 7, n_alt = 5
   Insn 6: point = 7, n_alt = 5
   Insn 5: point = 7, n_alt = 5
   Insn 4: point = 7, n_alt = 1
   Insn 3: point = 7, n_alt = 1
   Insn 2: point = 7, n_alt = 1
  BB 9
   Insn 100: point = 7, n_alt = 1
  BB 8
   Insn 97: point = 7, n_alt = 1
   Insn 96: point = 8, n_alt = 0
   Insn 95: point = 10, n_alt = 0
   Insn 94: point = 11, n_alt = 0
   Insn 93: point = 13, n_alt = 3
   Insn 127: point = 14, n_alt = -2
	Hard reg 1 is preferable by r138 with profit 1
   Insn 92: point = 16, n_alt = 0
   Insn 126: point = 16, n_alt = -2
	Hard reg 1 is preferable by r138 with profit 1
	Hard reg 0 is preferable by r138 with profit 1
   Insn 91: point = 18, n_alt = 0
   Insn 90: point = 20, n_alt = 0
  BB 6
   Insn 83: point = 21, n_alt = -1
   Insn 82: point = 21, n_alt = 0
   Insn 81: point = 22, n_alt = -2
   Insn 80: point = 23, n_alt = 0
   Insn 79: point = 23, n_alt = -2
   Insn 78: point = 24, n_alt = -2
   Insn 77: point = 25, n_alt = -2
   Insn 76: point = 26, n_alt = -2
   Insn 75: point = 27, n_alt = -2
   Insn 74: point = 28, n_alt = -2
   Insn 73: point = 29, n_alt = 0
   Insn 72: point = 30, n_alt = 0
   Insn 71: point = 31, n_alt = 3
   Insn 70: point = 32, n_alt = 3
   Insn 69: point = 33, n_alt = 3
   Insn 68: point = 34, n_alt = 3
   Insn 67: point = 36, n_alt = 0
   Insn 66: point = 37, n_alt = 1
   Insn 65: point = 38, n_alt = 0
   Insn 64: point = 39, n_alt = 0
   Insn 63: point = 41, n_alt = 0
   Insn 62: point = 42, n_alt = 3
   Insn 61: point = 44, n_alt = 3
   Insn 125: point = 45, n_alt = -2
	Hard reg 1 is preferable by r137 with profit 1
   Insn 60: point = 47, n_alt = 0
   Insn 124: point = 47, n_alt = -2
	Hard reg 1 is preferable by r137 with profit 1
	Hard reg 0 is preferable by r137 with profit 1
   Insn 59: point = 49, n_alt = 0
   Insn 58: point = 51, n_alt = 0
  BB 5
   Insn 56: point = 52, n_alt = -1
   Insn 55: point = 52, n_alt = 0
   Insn 54: point = 53, n_alt = -2
   Insn 53: point = 54, n_alt = 0
   Insn 52: point = 54, n_alt = -2
   Insn 51: point = 55, n_alt = -2
   Insn 50: point = 56, n_alt = -2
   Insn 49: point = 57, n_alt = 0
   Insn 48: point = 58, n_alt = 0
   Insn 47: point = 59, n_alt = 3
   Insn 46: point = 60, n_alt = 1
   Insn 45: point = 61, n_alt = 0
   Insn 44: point = 63, n_alt = 0
   Insn 40: point = 64, n_alt = 0
   Insn 39: point = 66, n_alt = 0
   Insn 38: point = 68, n_alt = 3
   Insn 37: point = 69, n_alt = 1
   Insn 36: point = 71, n_alt = 0
   Insn 35: point = 73, n_alt = 0
   Insn 34: point = 74, n_alt = 1
   Insn 33: point = 75, n_alt = 0
   Insn 32: point = 77, n_alt = 0
   Insn 28: point = 78, n_alt = 0
   Insn 27: point = 80, n_alt = 0
   Insn 26: point = 82, n_alt = 3
   Insn 25: point = 83, n_alt = 1
   Insn 24: point = 85, n_alt = 0
   Insn 23: point = 87, n_alt = 0
 r87: [84..85]
 r88: [81..83]
 r89: [79..80]
 r90: [76..78]
 r91: [70..71]
 r92: [67..69]
 r93: [65..66]
 r94: [62..64]
 r95: [52..53]
 r96: [48..49]
 r97: [43..45]
 r98: [37..42]
 r99: [25..34]
 r100: [21..22]
 r101: [17..18]
 r102: [12..14]
 r103: [7..11]
 r104: [2..6]
 r105: [0..1]
 r106: [86..87]
 r107: [81..82]
 r110: [74..75]
 r111: [76..77]
 r112: [72..73]
 r113: [67..68]
 r116: [60..61]
 r117: [62..63]
 r118: [56..59]
 r119: [55..58]
 r120: [54..57]
 r121: [50..51]
 r122: [43..44]
 r123: [37..39]
 r124: [40..41]
 r125: [37..38]
 r126: [35..36]
 r127: [28..33]
 r128: [27..32]
 r129: [26..31]
 r130: [24..30]
 r131: [23..29]
 r132: [19..20]
 r133: [12..13]
 r134: [7..8]
 r135: [9..10]
 r137: [46..47]
 r138: [15..16]
Compressing live ranges: from 88 to 62 - 70%
Ranges after the compression:
 r87: [58..59]
 r88: [56..57]
 r89: [54..55]
 r90: [52..53]
 r91: [46..47]
 r92: [44..45]
 r93: [42..43]
 r94: [40..41]
 r95: [34..35]
 r96: [30..31]
 r97: [26..27]
 r98: [22..25]
 r99: [18..19]
 r100: [16..17]
 r101: [12..13]
 r102: [8..9]
 r103: [4..7]
 r104: [2..3]
 r105: [0..1]
 r106: [60..61]
 r107: [56..57]
 r110: [50..51]
 r111: [52..53]
 r112: [48..49]
 r113: [44..45]
 r116: [38..39]
 r117: [40..41]
 r118: [36..37]
 r119: [36..37]
 r120: [36..37]
 r121: [32..33]
 r122: [26..27]
 r123: [22..23]
 r124: [24..25]
 r125: [22..23]
 r126: [20..21]
 r127: [18..19]
 r128: [18..19]
 r129: [18..19]
 r130: [18..19]
 r131: [18..19]
 r132: [14..15]
 r133: [8..9]
 r134: [4..5]
 r135: [6..7]
 r137: [28..29]
 r138: [10..11]

********** Assignment #1: **********

	 Assigning to 137 (cl=GENERAL_REGS, orig=96, freq=3, tfirst=137, tfreq=3)...
	   Assign 0 to reload r137 (freq=3)
	 Assigning to 138 (cl=GENERAL_REGS, orig=101, freq=3, tfirst=138, tfreq=3)...
	   Assign 0 to reload r138 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 33
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 45
changing reg in insn 54
changing reg in insn 55
changing reg in insn 59
changing reg in insn 62
changing reg in insn 62
changing reg in insn 62
changing reg in insn 66
changing reg in insn 68
changing reg in insn 77
changing reg in insn 81
changing reg in insn 82
changing reg in insn 91
changing reg in insn 94
changing reg in insn 94
changing reg in insn 94
changing reg in insn 97
changing reg in insn 107
changing reg in insn 85
changing reg in insn 14
changing reg in insn 110
changing reg in insn 110
changing reg in insn 114
changing reg in insn 23
changing reg in insn 24
changing reg in insn 26
changing reg in insn 33
changing reg in insn 34
changing reg in insn 32
changing reg in insn 35
changing reg in insn 36
changing reg in insn 38
changing reg in insn 45
changing reg in insn 46
changing reg in insn 44
changing reg in insn 47
changing reg in insn 50
changing reg in insn 48
changing reg in insn 51
changing reg in insn 49
changing reg in insn 52
changing reg in insn 58
changing reg in insn 59
changing reg in insn 61
changing reg in insn 62
changing reg in insn 64
changing reg in insn 66
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 74
changing reg in insn 70
changing reg in insn 75
changing reg in insn 71
changing reg in insn 76
changing reg in insn 72
changing reg in insn 78
changing reg in insn 73
changing reg in insn 79
changing reg in insn 90
changing reg in insn 91
changing reg in insn 93
changing reg in insn 94
changing reg in insn 96
changing reg in insn 97
changing reg in insn 95
changing reg in insn 96
deleting insn with uid = 50.
deleting insn with uid = 54.
deleting insn with uid = 124.
deleting insn with uid = 78.
deleting insn with uid = 81.
deleting insn with uid = 126.
deleting insn with uid = 110.
starting the processing of deferred insns
ending the processing of deferred insns


solveKTUtil

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 37 [r8] 38 [r9]
;;  ref usage 	r0={34d,32u} r1={14d,12u,6e} r2={7d,5u} r4={5d,3u} r5={6d,4u} r6={1d,47u} r7={1d,14u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={18d,4u} r18={2d} r19={2d} r20={1d,1u,7e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={5d,3u} r38={4d,2u} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 372{232d,127u,13e} in 80{78 regular + 2 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 17 [flags]
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 x+0 S4 A32])
        (reg:SI 5 di [ x ])) "test1.c":68 82 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 y+0 S4 A32])
        (reg:SI 4 si [ y ])) "test1.c":68 82 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 movei+0 S4 A32])
        (reg:SI 1 dx [ movei ])) "test1.c":68 82 {*movsi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 sol+0 S8 A64])
        (reg:DI 2 cx [ sol ])) "test1.c":68 81 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 xMove+0 S8 A64])
        (reg:DI 37 r8 [ xMove ])) "test1.c":68 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 yMove+0 S8 A64])
        (reg:DI 38 r9 [ yMove ])) "test1.c":68 81 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [1 movei+0 S4 A32])
            (const_int 64 [0x40]))) "test1.c":70 7 {*cmpsi_1}
     (nil))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) "test1.c":70 627 {*jcc_1}
     (nil)
 -> 17)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 104
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 117 3 (set (reg:SI 0 ax [orig:104 _19 ] [104])
        (const_int 1 [0x1])) "test1.c":71 82 {*movsi_internal}
     (nil))
(jump_insn 117 14 118 3 (set (pc)
        (label_ref 108)) "test1.c":71 659 {jump}
     (nil)
 -> 108)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104

(barrier 118 117 17)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 17 118 18 4 19 (nil) [1 uses])
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 119 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 k+0 S4 A32])
        (const_int 0 [0])) "test1.c":75 82 {*movsi_internal}
     (nil))
(jump_insn 119 19 120 4 (set (pc)
        (label_ref 101)) "test1.c":75 659 {jump}
     (nil)
 -> 101)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 120 119 103)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       10
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95 106 107 110 111 112 113 116 117 118 119 120
(code_label 103 120 22 5 24 (nil) [1 uses])
(note 22 103 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 5 (set (reg:SI 0 ax [106])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 k+0 S4 A32])) "test1.c":76 82 {*movsi_internal}
     (nil))
(insn 24 23 25 5 (set (reg:DI 0 ax [orig:87 _1 ] [87])
        (sign_extend:DI (reg:SI 0 ax [106]))) "test1.c":76 145 {*extendsidi2_rex64}
     (nil))
(insn 25 24 26 5 (parallel [
            (set (reg:DI 1 dx [orig:88 _2 ] [88])
                (ashift:DI (reg:DI 0 ax [orig:87 _1 ] [87])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":76 522 {*ashldi3_1}
     (nil))
(insn 26 25 27 5 (set (reg/f:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 xMove+0 S8 A64])) "test1.c":76 81 {*movdi_internal}
     (nil))
(insn 27 26 28 5 (parallel [
            (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
                (plus:DI (reg/f:DI 0 ax [107])
                    (reg:DI 1 dx [orig:88 _2 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":76 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [2 xMove+0 S8 A64])
            (reg:DI 1 dx [orig:88 _2 ] [88]))
        (nil)))
(insn 28 27 32 5 (set (reg:SI 1 dx [orig:90 _4 ] [90])
        (mem:SI (reg/f:DI 0 ax [orig:89 _3 ] [89]) [1 *_3+0 S4 A32])) "test1.c":76 82 {*movsi_internal}
     (nil))
(insn 32 28 33 5 (set (reg:SI 0 ax [111])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 x+0 S4 A32])) "test1.c":76 82 {*movsi_internal}
     (nil))
(insn 33 32 34 5 (parallel [
            (set (reg:SI 0 ax [110])
                (plus:SI (reg:SI 0 ax [111])
                    (reg:SI 1 dx [orig:90 _4 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":76 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:90 _4 ] [90])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [1 x+0 S4 A32]))
        (nil)))
(insn 34 33 35 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 next_x+0 S4 A32])
        (reg:SI 0 ax [110])) "test1.c":76 82 {*movsi_internal}
     (nil))
(insn 35 34 36 5 (set (reg:SI 0 ax [112])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 k+0 S4 A32])) "test1.c":77 82 {*movsi_internal}
     (nil))
(insn 36 35 37 5 (set (reg:DI 0 ax [orig:91 _5 ] [91])
        (sign_extend:DI (reg:SI 0 ax [112]))) "test1.c":77 145 {*extendsidi2_rex64}
     (nil))
(insn 37 36 38 5 (parallel [
            (set (reg:DI 1 dx [orig:92 _6 ] [92])
                (ashift:DI (reg:DI 0 ax [orig:91 _5 ] [91])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":77 522 {*ashldi3_1}
     (nil))
(insn 38 37 39 5 (set (reg/f:DI 0 ax [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 yMove+0 S8 A64])) "test1.c":77 81 {*movdi_internal}
     (nil))
(insn 39 38 40 5 (parallel [
            (set (reg/f:DI 0 ax [orig:93 _7 ] [93])
                (plus:DI (reg/f:DI 0 ax [113])
                    (reg:DI 1 dx [orig:92 _6 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":77 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [2 yMove+0 S8 A64])
            (reg:DI 1 dx [orig:92 _6 ] [92]))
        (nil)))
(insn 40 39 44 5 (set (reg:SI 1 dx [orig:94 _8 ] [94])
        (mem:SI (reg/f:DI 0 ax [orig:93 _7 ] [93]) [1 *_7+0 S4 A32])) "test1.c":77 82 {*movsi_internal}
     (nil))
(insn 44 40 45 5 (set (reg:SI 0 ax [117])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 y+0 S4 A32])) "test1.c":77 82 {*movsi_internal}
     (nil))
(insn 45 44 46 5 (parallel [
            (set (reg:SI 0 ax [116])
                (plus:SI (reg:SI 0 ax [117])
                    (reg:SI 1 dx [orig:94 _8 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":77 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:94 _8 ] [94])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [1 y+0 S4 A32]))
        (nil)))
(insn 46 45 47 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 next_y+0 S4 A32])
        (reg:SI 0 ax [116])) "test1.c":77 82 {*movsi_internal}
     (nil))
(insn 47 46 48 5 (set (reg:DI 1 dx [118])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 sol+0 S8 A64])) "test1.c":78 81 {*movdi_internal}
     (nil))
(insn 48 47 49 5 (set (reg:SI 2 cx [119])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 next_y+0 S4 A32])) "test1.c":78 82 {*movsi_internal}
     (nil))
(insn 49 48 51 5 (set (reg:SI 0 ax [120])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 next_x+0 S4 A32])) "test1.c":78 82 {*movsi_internal}
     (nil))
(insn 51 49 52 5 (set (reg:SI 4 si)
        (reg:SI 2 cx [119])) "test1.c":78 82 {*movsi_internal}
     (nil))
(insn 52 51 53 5 (set (reg:SI 5 di)
        (reg:SI 0 ax [120])) "test1.c":78 82 {*movsi_internal}
     (nil))
(call_insn 53 52 55 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("isSafe") [flags 0x3]  <function_decl 0x7fa2de77a000 isSafe>) [0 isSafe S1 A8])
            (const_int 0 [0]))) "test1.c":78 676 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 55 53 56 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:95 _9 ] [95])
            (const_int 0 [0]))) "test1.c":78 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 56 55 57 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 98)
            (pc))) "test1.c":78 627 {*jcc_1}
     (nil)
 -> 98)
;;  succ:       6 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 96 97 98 99 100 121 122 123 124 125 126 127 128 129 130 131
(note 57 56 58 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 6 (set (reg:SI 0 ax [121])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 next_x+0 S4 A32])) "test1.c":79 82 {*movsi_internal}
     (nil))
(insn 59 58 60 6 (set (reg:DI 0 ax [orig:96 _10 ] [96])
        (sign_extend:DI (reg:SI 0 ax [121]))) "test1.c":79 145 {*extendsidi2_rex64}
     (nil))
(insn 60 59 125 6 (parallel [
            (set (reg:DI 0 ax [orig:96 _10 ] [96])
                (ashift:DI (reg:DI 0 ax [orig:96 _10 ] [96])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":79 522 {*ashldi3_1}
     (nil))
(insn 125 60 61 6 (set (reg:DI 1 dx [orig:97 _11 ] [97])
        (reg:DI 0 ax [orig:96 _10 ] [96])) "test1.c":79 81 {*movdi_internal}
     (nil))
(insn 61 125 62 6 (set (reg/f:DI 0 ax [122])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 sol+0 S8 A64])) "test1.c":79 81 {*movdi_internal}
     (nil))
(insn 62 61 63 6 (parallel [
            (set (reg/f:DI 2 cx [orig:98 _12 ] [98])
                (plus:DI (reg:DI 1 dx [orig:97 _11 ] [97])
                    (reg/f:DI 0 ax [122])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":79 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [2 sol+0 S8 A64])
            (reg:DI 1 dx [orig:97 _11 ] [97]))
        (nil)))
(insn 63 62 64 6 (set (reg:SI 0 ax [124])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 next_y+0 S4 A32])) "test1.c":79 82 {*movsi_internal}
     (nil))
(insn 64 63 65 6 (set (reg:DI 0 ax [123])
        (sign_extend:DI (reg:SI 0 ax [124]))) "test1.c":79 145 {*extendsidi2_rex64}
     (nil))
(insn 65 64 66 6 (set (reg:SI 1 dx [125])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 movei+0 S4 A32])) "test1.c":79 82 {*movsi_internal}
     (nil))
(insn 66 65 67 6 (set (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [123])
                    (const_int 4 [0x4]))
                (reg/f:DI 2 cx [orig:98 _12 ] [98])) [1 *_12 S4 A32])
        (reg:SI 1 dx [125])) "test1.c":79 82 {*movsi_internal}
     (nil))
(insn 67 66 68 6 (set (reg:SI 0 ax [126])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 movei+0 S4 A32])) "test1.c":80 82 {*movsi_internal}
     (nil))
(insn 68 67 69 6 (parallel [
            (set (reg:SI 5 di [orig:99 _13 ] [99])
                (plus:SI (reg:SI 0 ax [126])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":80 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [1 movei+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 69 68 70 6 (set (reg:DI 37 r8 [127])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 yMove+0 S8 A64])) "test1.c":80 81 {*movdi_internal}
     (nil))
(insn 70 69 71 6 (set (reg:DI 2 cx [128])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 xMove+0 S8 A64])) "test1.c":80 81 {*movdi_internal}
     (nil))
(insn 71 70 72 6 (set (reg:DI 1 dx [129])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 sol+0 S8 A64])) "test1.c":80 81 {*movdi_internal}
     (nil))
(insn 72 71 73 6 (set (reg:SI 4 si [130])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 next_y+0 S4 A32])) "test1.c":80 82 {*movsi_internal}
     (nil))
(insn 73 72 74 6 (set (reg:SI 0 ax [131])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 next_x+0 S4 A32])) "test1.c":80 82 {*movsi_internal}
     (nil))
(insn 74 73 75 6 (set (reg:DI 38 r9)
        (reg:DI 37 r8 [127])) "test1.c":80 81 {*movdi_internal}
     (nil))
(insn 75 74 76 6 (set (reg:DI 37 r8)
        (reg:DI 2 cx [128])) "test1.c":80 81 {*movdi_internal}
     (nil))
(insn 76 75 77 6 (set (reg:DI 2 cx)
        (reg:DI 1 dx [129])) "test1.c":80 81 {*movdi_internal}
     (nil))
(insn 77 76 79 6 (set (reg:SI 1 dx)
        (reg:SI 5 di [orig:99 _13 ] [99])) "test1.c":80 82 {*movsi_internal}
     (nil))
(insn 79 77 80 6 (set (reg:SI 5 di)
        (reg:SI 0 ax [131])) "test1.c":80 82 {*movsi_internal}
     (nil))
(call_insn 80 79 82 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("solveKTUtil") [flags 0x3]  <function_decl 0x7fa2de775f00 solveKTUtil>) [0 solveKTUtil S1 A8])
            (const_int 0 [0]))) "test1.c":80 676 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 82 80 83 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:100 _14 ] [100])
            (const_int 1 [0x1]))) "test1.c":80 7 {*cmpsi_1}
     (nil))
(jump_insn 83 82 84 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 88)
            (pc))) "test1.c":80 627 {*jcc_1}
     (nil)
 -> 88)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 104
(note 84 83 85 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 121 7 (set (reg:SI 0 ax [orig:104 _19 ] [104])
        (const_int 1 [0x1])) "test1.c":83 82 {*movsi_internal}
     (nil))
(jump_insn 121 85 122 7 (set (pc)
        (label_ref 108)) "test1.c":83 659 {jump}
     (nil)
 -> 108)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104

(barrier 122 121 88)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 101 102 103 132 133 134 135
(code_label 88 122 89 8 23 (nil) [1 uses])
(note 89 88 90 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 8 (set (reg:SI 0 ax [132])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 next_x+0 S4 A32])) "test1.c":85 82 {*movsi_internal}
     (nil))
(insn 91 90 92 8 (set (reg:DI 0 ax [orig:101 _15 ] [101])
        (sign_extend:DI (reg:SI 0 ax [132]))) "test1.c":85 145 {*extendsidi2_rex64}
     (nil))
(insn 92 91 127 8 (parallel [
            (set (reg:DI 0 ax [orig:101 _15 ] [101])
                (ashift:DI (reg:DI 0 ax [orig:101 _15 ] [101])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":85 522 {*ashldi3_1}
     (nil))
(insn 127 92 93 8 (set (reg:DI 1 dx [orig:102 _16 ] [102])
        (reg:DI 0 ax [orig:101 _15 ] [101])) "test1.c":85 81 {*movdi_internal}
     (nil))
(insn 93 127 94 8 (set (reg/f:DI 0 ax [133])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 sol+0 S8 A64])) "test1.c":85 81 {*movdi_internal}
     (nil))
(insn 94 93 95 8 (parallel [
            (set (reg/f:DI 1 dx [orig:103 _17 ] [103])
                (plus:DI (reg:DI 1 dx [orig:102 _16 ] [102])
                    (reg/f:DI 0 ax [133])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":85 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [2 sol+0 S8 A64])
            (reg:DI 1 dx [orig:102 _16 ] [102]))
        (nil)))
(insn 95 94 96 8 (set (reg:SI 0 ax [135])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 next_y+0 S4 A32])) "test1.c":85 82 {*movsi_internal}
     (nil))
(insn 96 95 97 8 (set (reg:DI 0 ax [134])
        (sign_extend:DI (reg:SI 0 ax [135]))) "test1.c":85 145 {*extendsidi2_rex64}
     (nil))
(insn 97 96 98 8 (set (mem:SI (plus:DI (mult:DI (reg:DI 0 ax [134])
                    (const_int 4 [0x4]))
                (reg/f:DI 1 dx [orig:103 _17 ] [103])) [1 *_17 S4 A32])
        (const_int -1 [0xffffffffffffffff])) "test1.c":85 82 {*movsi_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       5
;;              8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 98 97 99 9 22 (nil) [1 uses])
(note 99 98 100 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [1 k+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [1 k+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":75 217 {*addsi_1}
     (nil))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 101 100 102 10 21 (nil) [1 uses])
(note 102 101 104 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 104 102 105 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 k+0 S4 A32])
            (const_int 7 [0x7]))) "test1.c":75 7 {*cmpsi_1}
     (nil))
(jump_insn 105 104 106 10 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 103)
            (pc))) "test1.c":75 627 {*jcc_1}
     (nil)
 -> 103)
;;  succ:       5
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 104
(note 106 105 107 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 107 106 108 11 (set (reg:SI 0 ax [orig:104 _19 ] [104])
        (const_int 0 [0])) "test1.c":89 82 {*movsi_internal}
     (nil))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 1, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;;              3 [100.0%] 
;;              7 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104
;; lr  def 	 0 [ax] 105
(code_label 108 107 109 12 20 (nil) [2 uses])
(note 109 108 114 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 114 109 115 12 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:105 <retval> ] [105])) "test1.c":90 82 {*movsi_internal}
     (nil))
(insn 115 114 123 12 (use (reg/i:SI 0 ax)) "test1.c":90 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 123 115 0 NOTE_INSN_DELETED)

;; Function main (main, funcdef_no=4, decl_uid=2297, cgraph_uid=4, symbol_order=4)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = -2
   Insn 7: point = 3, n_alt = 0
   Insn 6: point = 4, n_alt = 0
   Insn 5: point = 4, n_alt = 1
 r87: [2..3]
 r88: [0..1]
Compressing live ranges: from 4 to 4 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 10
changing reg in insn 10
changing reg in insn 14
deleting insn with uid = 10.
starting the processing of deferred insns
ending the processing of deferred insns


main

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 6 [bp] 7 [sp]
;;  ref usage 	r0={5d,4u} r1={2d} r2={2d} r4={2d} r5={2d} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{93d,10u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":97 84 {*movqi_internal}
     (nil))
(call_insn 6 5 7 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("solveKT") [flags 0x3]  <function_decl 0x7fa2de77a400 solveKT>) [0 solveKT S1 A8])
            (const_int 0 [0]))) "test1.c":97 676 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (nil)))
(insn 7 6 14 2 (set (reg:SI 0 ax [orig:87 _3 ] [87])
        (const_int 0 [0])) "test1.c":98 82 {*movsi_internal}
     (nil))
(insn 14 7 15 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:88 <retval> ] [88])) "test1.c":99 82 {*movsi_internal}
     (nil))
(insn 15 14 17 2 (use (reg/i:SI 0 ax)) "test1.c":99 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 17 15 0 NOTE_INSN_DELETED)
