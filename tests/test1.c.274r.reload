
;; Function hashComputeByHashFunc (hashComputeByHashFunc, funcdef_no=5, decl_uid=3222, cgraph_uid=5, symbol_order=8)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 14
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 16
	 Choosing alt 0 in insn 16:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 21:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 22:  (0) m  (1) re {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 23:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) qm {extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 38: point = 0, n_alt = -1
   Insn 37: point = 0, n_alt = -2
   Insn 33: point = 1, n_alt = -2
   Insn 30: point = 3, n_alt = 0
  BB 4
   Insn 28: point = 4, n_alt = -1
   Insn 27: point = 4, n_alt = 1
   Insn 25: point = 4, n_alt = 1
   Insn 24: point = 5, n_alt = 0
   Insn 23: point = 7, n_alt = 2
   Insn 22: point = 9, n_alt = 5
   Insn 21: point = 10, n_alt = 3
   Insn 20: point = 11, n_alt = 3
  BB 2
   Insn 40: point = 12, n_alt = -1
   Insn 6: point = 12, n_alt = 1
   Insn 2: point = 12, n_alt = 5
  BB 3
   Insn 17: point = 12, n_alt = 1
   Insn 16: point = 13, n_alt = 0
   Insn 15: point = 15, n_alt = 0
   Insn 14: point = 16, n_alt = 0
   Insn 13: point = 18, n_alt = -2
   Insn 12: point = 20, n_alt = 0
   Insn 11: point = 22, n_alt = -2
   Insn 10: point = 23, n_alt = 0
 r87: [14..16]
 r88: [14..15]
 r89: [8..11]
 r90: [6..7]
 r91: [2..3]
 r92: [0..1]
 r93: [17..23]
 r94: [21..22] [17..18]
 r95: [19..20]
 r96: [12..13]
 r97: [9..10]
 r98: [4..5]
Compressing live ranges: from 24 to 20 - 83%
Ranges after the compression:
 r87: [12..13]
 r88: [12..13]
 r89: [8..9]
 r90: [6..7]
 r91: [2..3]
 r92: [0..1]
 r93: [14..19]
 r94: [18..19] [14..15]
 r95: [16..17]
 r96: [10..11]
 r97: [8..9]
 r98: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 14
changing reg in insn 15
changing reg in insn 20
changing reg in insn 23
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 30
changing reg in insn 33
changing reg in insn 33
changing reg in insn 37
changing reg in insn 10
changing reg in insn 11
changing reg in insn 14
changing reg in insn 13
changing reg in insn 13
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 16
changing reg in insn 17
changing reg in insn 21
changing reg in insn 22
changing reg in insn 24
changing reg in insn 25
deleting insn with uid = 13.
deleting insn with uid = 33.
starting the processing of deferred insns
ending the processing of deferred insns


hashComputeByHashFunc

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={10d,11u} r1={4d,4u,1e} r2={1d} r4={1d} r5={1d,1u} r6={1d,15u} r7={1d,5u} r17={5d,1u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 74{35d,38u,1e} in 21{21 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 key+0 S8 A64])
        (reg:DI 5 di [ key ])) "test1.c":30 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 40 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 hash+0 S4 A32])
        (const_int 1 [0x1])) "test1.c":31 82 {*movsi_internal}
     (nil))
(jump_insn 40 6 41 2 (set (pc)
        (label_ref 18)) "test1.c":33 659 {jump}
     (nil)
 -> 18)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 41 40 26)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 93 94 95 96
(code_label 26 41 9 3 3 (nil) [1 uses])
(note 9 26 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg:SI 1 dx [93])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 hash+0 S4 A32])) "test1.c":35 82 {*movsi_internal}
     (nil))
(insn 11 10 12 3 (set (reg:SI 0 ax [94])
        (reg:SI 1 dx [93])) "test1.c":35 82 {*movsi_internal}
     (nil))
(insn 12 11 14 3 (parallel [
            (set (reg:SI 0 ax [95])
                (ashift:SI (reg:SI 0 ax [94])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":35 521 {*ashlsi3_1}
     (nil))
(insn 14 12 15 3 (parallel [
            (set (reg:SI 1 dx [orig:87 _1 ] [87])
                (plus:SI (reg:SI 1 dx [93])
                    (reg:SI 0 ax [94])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":35 217 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 1 dx [93])
            (const_int 33 [0x21]))
        (nil)))
(insn 15 14 16 3 (set (reg:SI 0 ax [orig:88 temp.0_2 ] [88])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 temp+0 S4 A32])) "test1.c":35 82 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (parallel [
            (set (reg:SI 0 ax [96])
                (plus:SI (reg:SI 0 ax [orig:88 temp.0_2 ] [88])
                    (reg:SI 1 dx [orig:87 _1 ] [87])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":35 217 {*addsi_1}
     (nil))
(insn 17 16 18 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 hash+0 S4 A32])
        (reg:SI 0 ax [96])) "test1.c":35 82 {*movsi_internal}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 97 98
(code_label 18 17 19 4 2 (nil) [1 uses])
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 4 (set (reg/f:DI 0 ax [orig:89 key.1_3 ] [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 key+0 S8 A64])) "test1.c":33 81 {*movdi_internal}
     (nil))
(insn 21 20 22 4 (parallel [
            (set (reg:DI 1 dx [97])
                (plus:DI (reg/f:DI 0 ax [orig:89 key.1_3 ] [89])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":33 218 {*adddi_1}
     (nil))
(insn 22 21 23 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 key+0 S8 A64])
        (reg:DI 1 dx [97])) "test1.c":33 81 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:QI 0 ax [orig:90 _4 ] [90])
        (mem:QI (reg/f:DI 0 ax [orig:89 key.1_3 ] [89]) [0 *key.1_3+0 S1 A8])) "test1.c":33 84 {*movqi_internal}
     (nil))
(insn 24 23 25 4 (set (reg:SI 0 ax [98])
        (sign_extend:SI (reg:QI 0 ax [orig:90 _4 ] [90]))) "test1.c":33 151 {extendqisi2}
     (nil))
(insn 25 24 27 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 temp+0 S4 A32])
        (reg:SI 0 ax [98])) "test1.c":33 82 {*movsi_internal}
     (nil))
(insn 27 25 28 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [1 temp+0 S4 A32])
            (const_int 0 [0]))) "test1.c":33 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 28 27 29 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 26)
            (pc))) "test1.c":33 627 {*jcc_1}
     (nil)
 -> 26)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 91 92
(note 29 28 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 37 5 (set (reg:SI 0 ax [orig:91 _12 ] [91])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 hash+0 S4 A32])) "test1.c":37 82 {*movsi_internal}
     (nil))
(insn 37 30 38 5 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:92 <retval> ] [92])) "test1.c":38 82 {*movsi_internal}
     (nil))
(insn 38 37 42 5 (use (reg/i:SI 0 ax)) "test1.c":38 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 42 38 0 NOTE_INSN_DELETED)

;; Function hashTableInsertFunc (hashTableInsertFunc, funcdef_no=6, decl_uid=3232, cgraph_uid=6, symbol_order=9)

      Creating newreg=161
Removing SCRATCH in insn #43 (nop 3)
rescanning insn with uid = 43.
      Creating newreg=162
Removing SCRATCH in insn #59 (nop 3)
rescanning insn with uid = 59.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 8:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 21:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 27:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 41:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=163 from oldreg=108, assigning class GENERAL_REGS to r163
   41: {r163:SI=r163:SI 0>>0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  127: r163:SI=r91:SI
    Inserting insn reload after:
  128: r108:SI=r163:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
            3 Matching alt: reject+=2
            3 Super set class reg: reject-=3
            3 Small class reload: reject+=3
            3 Non input pseudo reload: reject++
          alt=0,overall=15,losers=2,rld_nregs=1
            1 Small class reload: reject+=3
            3 Matching alt: reject+=2
            3 Super set class reg: reject-=3
            3 Small class reload: reject+=3
            3 Non input pseudo reload: reject++
            alt=0,overall=24,losers=3 -- refuse
	 Choosing alt 0 in insn 43:  (0) =d  (1) %a  (2) rm  (3) =1 {*umulsi3_highpart_1}
      Creating newreg=164 from oldreg=108, assigning class AREG to r164
   43: {r109:SI=trunc(zero_extend(r164:SI)*zero_extend(r110:SI) 0>>0x20);clobber r164:SI;clobber flags:CC;}
      REG_UNUSED r161:SI
      REG_DEAD r110:SI
      REG_DEAD r108:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  129: r164:SI=r108:SI

          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 44:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=165 from oldreg=109, assigning class GENERAL_REGS to r165
   44: {r165:SI=r165:SI 0>>0x7;clobber flags:CC;}
      REG_DEAD r109:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  130: r165:SI=r109:SI
    Inserting insn reload after:
  131: r111:SI=r165:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 47:  (0) r  (1) rm  (2) e {*mulsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 48:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=166 from oldreg=91, assigning class GENERAL_REGS to r166
   48: {r166:SI=r166:SI-r112:SI;clobber flags:CC;}
      REG_DEAD r112:SI
      REG_DEAD r91:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  132: r166:SI=r91:SI
    Inserting insn reload after:
  133: r114:SI=r166:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 55:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 57:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=167 from oldreg=118, assigning class GENERAL_REGS to r167
   57: {r167:SI=r167:SI 0>>0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  134: r167:SI=r117:SI
    Inserting insn reload after:
  135: r118:SI=r167:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
            3 Matching alt: reject+=2
            3 Super set class reg: reject-=3
            3 Small class reload: reject+=3
            3 Non input pseudo reload: reject++
          alt=0,overall=15,losers=2,rld_nregs=1
            1 Small class reload: reject+=3
            3 Matching alt: reject+=2
            3 Super set class reg: reject-=3
            3 Small class reload: reject+=3
            3 Non input pseudo reload: reject++
            alt=0,overall=24,losers=3 -- refuse
	 Choosing alt 0 in insn 59:  (0) =d  (1) %a  (2) rm  (3) =1 {*umulsi3_highpart_1}
      Creating newreg=168 from oldreg=118, assigning class AREG to r168
   59: {r119:SI=trunc(zero_extend(r168:SI)*zero_extend(r120:SI) 0>>0x20);clobber r168:SI;clobber flags:CC;}
      REG_UNUSED r162:SI
      REG_DEAD r120:SI
      REG_DEAD r118:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  136: r168:SI=r118:SI

          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 60:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=169 from oldreg=119, assigning class GENERAL_REGS to r169
   60: {r169:SI=r169:SI 0>>0x7;clobber flags:CC;}
      REG_DEAD r119:SI
      REG_UNUSED flags:CC
      REG_EQUAL udiv(r117:SI,0x186a0)
    Inserting insn reload before:
  137: r169:SI=r119:SI
    Inserting insn reload after:
  138: r116:SI=r169:SI

            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 61:  (0) r  (1) rm  (2) e {*mulsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 62:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=170 from oldreg=117, assigning class GENERAL_REGS to r170
   62: {r170:SI=r170:SI-r121:SI;clobber flags:CC;}
      REG_DEAD r121:SI
      REG_DEAD r117:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  139: r170:SI=r117:SI
    Inserting insn reload after:
  140: r122:SI=r170:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) m  (1) re {*movsi_internal}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 69:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 70
	 Choosing alt 0 in insn 70:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 72:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) r {*cmpdi_ccno_1}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 80:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 81
	 Choosing alt 0 in insn 81:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 83:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) rm  (1) re {*cmpsi_1}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 94:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 95
	 Choosing alt 0 in insn 95:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 97:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 98:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 100:  (0) m  (1) re {*movdi_internal}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 103:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 104:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 105
	 Choosing alt 0 in insn 105:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 107:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 109:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 113:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 115:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 119:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 120:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6

********** Pseudo live ranges #1: **********

  BB 6
   Insn 123: point = 0, n_alt = -1
   Insn 120: point = 0, n_alt = 1
   Insn 119: point = 1, n_alt = 4
   Insn 118: point = 2, n_alt = 1
   Insn 117: point = 4, n_alt = 0
   Insn 116: point = 6, n_alt = 0
   Insn 115: point = 7, n_alt = 3
   Insn 114: point = 9, n_alt = 0
   Insn 113: point = 11, n_alt = 4
   Insn 112: point = 12, n_alt = 1
   Insn 111: point = 14, n_alt = 0
   Insn 110: point = 16, n_alt = 0
   Insn 109: point = 17, n_alt = 5
   Insn 108: point = 18, n_alt = 3
   Insn 107: point = 19, n_alt = 4
   Insn 106: point = 20, n_alt = 1
   Insn 105: point = 22, n_alt = 0
   Insn 104: point = 24, n_alt = 1
   Insn 103: point = 26, n_alt = 1
   Insn 102: point = 28, n_alt = 0
   Insn 101: point = 29, n_alt = 3
   Insn 100: point = 30, n_alt = 5
   Insn 99: point = 31, n_alt = 3
   Insn 98: point = 32, n_alt = 3
   Insn 97: point = 34, n_alt = 4
   Insn 96: point = 35, n_alt = 1
   Insn 95: point = 37, n_alt = 0
   Insn 94: point = 39, n_alt = 1
   Insn 93: point = 41, n_alt = 1
   Insn 92: point = 43, n_alt = 0
   Insn 91: point = 44, n_alt = 3
  BB 4
   Insn 75: point = 45, n_alt = -1
   Insn 74: point = 45, n_alt = 0
   Insn 73: point = 46, n_alt = 3
   Insn 72: point = 48, n_alt = 4
   Insn 71: point = 49, n_alt = 1
   Insn 70: point = 51, n_alt = 0
   Insn 69: point = 53, n_alt = 1
   Insn 68: point = 55, n_alt = 1
   Insn 67: point = 57, n_alt = 0
   Insn 66: point = 58, n_alt = 3
  BB 2
   Insn 124: point = 59, n_alt = -1
   Insn 51: point = 59, n_alt = 1
   Insn 50: point = 60, n_alt = 0
   Insn 49: point = 61, n_alt = 1
   Insn 133: point = 62, n_alt = -2
	Hard reg 0 is preferable by r166 with profit 1
   Insn 48: point = 64, n_alt = 0
   Insn 132: point = 65, n_alt = -2
	Hard reg 0 is preferable by r166 with profit 1
	Hard reg 2 is preferable by r166 with profit 1
   Insn 47: point = 67, n_alt = 1
   Insn 46: point = 69, n_alt = 0
   Insn 45: point = 70, n_alt = 1
   Insn 131: point = 71, n_alt = -2
	Hard reg 0 is preferable by r165 with profit 1
   Insn 44: point = 73, n_alt = 0
   Insn 130: point = 73, n_alt = -2
	Hard reg 0 is preferable by r165 with profit 1
	Hard reg 1 is preferable by r165 with profit 1
   Insn 43: point = 75, n_alt = 0
   Insn 129: point = 77, n_alt = -2
	Hard reg 0 is preferable by r164 with profit 1
   Insn 42: point = 79, n_alt = 0
   Insn 128: point = 80, n_alt = -2
	Hard reg 0 is preferable by r163 with profit 1
   Insn 41: point = 82, n_alt = 0
   Insn 127: point = 82, n_alt = -2
   Insn 40: point = 83, n_alt = -2
   Insn 39: point = 84, n_alt = 0
   Insn 38: point = 84, n_alt = -2
   Insn 37: point = 85, n_alt = 3
   Insn 36: point = 86, n_alt = 1
   Insn 35: point = 87, n_alt = 0
   Insn 34: point = 88, n_alt = 3
   Insn 33: point = 89, n_alt = 0
   Insn 32: point = 89, n_alt = -2
   Insn 31: point = 90, n_alt = -2
   Insn 30: point = 91, n_alt = 3
   Insn 29: point = 92, n_alt = 3
   Insn 28: point = 94, n_alt = 3
   Insn 27: point = 95, n_alt = 5
   Insn 26: point = 96, n_alt = 3
   Insn 25: point = 97, n_alt = -2
   Insn 24: point = 99, n_alt = -2
   Insn 23: point = 100, n_alt = 0
   Insn 22: point = 100, n_alt = -2
   Insn 21: point = 101, n_alt = 0
   Insn 20: point = 103, n_alt = -2
   Insn 19: point = 104, n_alt = 0
   Insn 18: point = 104, n_alt = -2
   Insn 17: point = 105, n_alt = 3
   Insn 16: point = 106, n_alt = 0
   Insn 15: point = 106, n_alt = -2
   Insn 14: point = 107, n_alt = 0
   Insn 13: point = 107, n_alt = 2
   Insn 12: point = 107, n_alt = 3
   Insn 11: point = 108, n_alt = 5
   Insn 10: point = 109, n_alt = -2
   Insn 9: point = 110, n_alt = 0
   Insn 8: point = 110, n_alt = 2
   Insn 4: point = 110, n_alt = 1
   Insn 3: point = 110, n_alt = 1
   Insn 2: point = 110, n_alt = 5
  BB 3
   Insn 63: point = 110, n_alt = 1
   Insn 140: point = 111, n_alt = -2
	Hard reg 0 is preferable by r170 with profit 1
   Insn 62: point = 113, n_alt = 0
   Insn 139: point = 114, n_alt = -2
	Hard reg 0 is preferable by r170 with profit 1
	Hard reg 2 is preferable by r170 with profit 1
   Insn 61: point = 116, n_alt = 1
   Insn 138: point = 118, n_alt = -2
	Hard reg 0 is preferable by r169 with profit 1
   Insn 60: point = 120, n_alt = 0
   Insn 137: point = 120, n_alt = -2
	Hard reg 0 is preferable by r169 with profit 1
	Hard reg 1 is preferable by r169 with profit 1
   Insn 59: point = 122, n_alt = 0
   Insn 136: point = 124, n_alt = -2
	Hard reg 0 is preferable by r168 with profit 1
   Insn 58: point = 126, n_alt = 0
   Insn 135: point = 127, n_alt = -2
	Hard reg 0 is preferable by r167 with profit 1
   Insn 57: point = 129, n_alt = 0
   Insn 134: point = 129, n_alt = -2
   Insn 56: point = 130, n_alt = 0
   Insn 55: point = 131, n_alt = 1
  BB 5
   Insn 88: point = 131, n_alt = -1
   Insn 87: point = 131, n_alt = 0
   Insn 85: point = 132, n_alt = 0
   Insn 84: point = 134, n_alt = 3
   Insn 83: point = 136, n_alt = 4
   Insn 82: point = 137, n_alt = 1
   Insn 81: point = 139, n_alt = 0
   Insn 80: point = 141, n_alt = 1
   Insn 79: point = 143, n_alt = 1
   Insn 78: point = 145, n_alt = 0
   Insn 77: point = 146, n_alt = 3
 r87: [102..103]
 r88: [100..101]
 r89: [95..97]
 r90: [89..92]
 r91: [66..83]
 r92: [45..46]
 r93: [133..134]
 r94: [131..132]
 r95: [30..32]
 r96: [8..9]
 r97: [0..7]
 r98: [108..109]
 r99: [106..107]
 r100: [104..105]
 r101: [98..99]
 r102: [95..96]
 r103: [93..94]
 r104: [90..91]
 r105: [86..88]
 r106: [86..87]
 r107: [84..85]
 r108: [78..80]
 r109: [74..75]
 r110: [76..79]
 r111: [70..71]
 r112: [64..67]
 r113: [68..69]
 r114: [61..62]
 r115: [59..60]
 r116: [117..118]
 r117: [115..130]
 r118: [125..127]
 r119: [121..122]
 r120: [123..126]
 r121: [113..116]
 r122: [110..111]
 r123: [52..58]
 r124: [54..55]
 r125: [56..57]
 r126: [52..53]
 r127: [50..51]
 r128: [47..49]
 r129: [47..48]
 r130: [140..146]
 r131: [142..143]
 r132: [144..145]
 r133: [140..141]
 r134: [138..139]
 r135: [135..137]
 r136: [135..136]
 r137: [38..44]
 r138: [40..41]
 r139: [42..43]
 r140: [38..39]
 r141: [36..37]
 r142: [33..35]
 r143: [33..34]
 r144: [30..31]
 r145: [23..29]
 r146: [25..26]
 r147: [27..28]
 r148: [23..24]
 r149: [21..22]
 r150: [17..20]
 r151: [17..19]
 r152: [17..18]
 r153: [13..14]
 r154: [15..16]
 r155: [10..12]
 r156: [10..11]
 r157: [3..4]
 r158: [5..6]
 r159: [0..2]
 r160: [0..1]
 r163: [81..82]
 r164: [75..77]
 r165: [72..73]
 r166: [63..65]
 r167: [128..129]
 r168: [122..124]
 r169: [119..120]
 r170: [112..114]
Compressing live ranges: from 147 to 124 - 84%
Ranges after the compression:
 r87: [84..85]
 r88: [82..83]
 r89: [78..79]
 r90: [74..75]
 r91: [54..69]
 r92: [36..37]
 r93: [112..113]
 r94: [110..111]
 r95: [24..25]
 r96: [6..7]
 r97: [0..5]
 r98: [90..91]
 r99: [88..89]
 r100: [86..87]
 r101: [80..81]
 r102: [78..79]
 r103: [76..77]
 r104: [74..75]
 r105: [72..73]
 r106: [72..73]
 r107: [70..71]
 r108: [66..67]
 r109: [62..63]
 r110: [64..67]
 r111: [58..59]
 r112: [52..55]
 r113: [56..57]
 r114: [50..51]
 r115: [48..49]
 r116: [98..99]
 r117: [96..109]
 r118: [106..107]
 r119: [102..103]
 r120: [104..107]
 r121: [94..97]
 r122: [92..93]
 r123: [42..47]
 r124: [44..45]
 r125: [46..47]
 r126: [42..43]
 r127: [40..41]
 r128: [38..39]
 r129: [38..39]
 r130: [118..123]
 r131: [120..121]
 r132: [122..123]
 r133: [118..119]
 r134: [116..117]
 r135: [114..115]
 r136: [114..115]
 r137: [30..35]
 r138: [32..33]
 r139: [34..35]
 r140: [30..31]
 r141: [28..29]
 r142: [26..27]
 r143: [26..27]
 r144: [24..25]
 r145: [18..23]
 r146: [20..21]
 r147: [22..23]
 r148: [18..19]
 r149: [16..17]
 r150: [14..15]
 r151: [14..15]
 r152: [14..15]
 r153: [10..11]
 r154: [12..13]
 r155: [8..9]
 r156: [8..9]
 r157: [2..3]
 r158: [4..5]
 r159: [0..1]
 r160: [0..1]
 r163: [68..69]
 r164: [63..65]
 r165: [60..61]
 r166: [52..53]
 r167: [108..109]
 r168: [103..105]
 r169: [100..101]
 r170: [94..95]

********** Assignment #1: **********

	 Assigning to 164 (cl=AREG, orig=108, freq=2, tfirst=164, tfreq=2)...
	   Assign 0 to reload r164 (freq=2)
	 Assigning to 168 (cl=AREG, orig=118, freq=2, tfirst=168, tfreq=2)...
	   Assign 0 to reload r168 (freq=2)
	 Assigning to 163 (cl=GENERAL_REGS, orig=108, freq=3, tfirst=163, tfreq=3)...
	   Assign 0 to reload r163 (freq=3)
	 Assigning to 165 (cl=GENERAL_REGS, orig=109, freq=3, tfirst=165, tfreq=3)...
	   Assign 0 to reload r165 (freq=3)
	 Assigning to 166 (cl=GENERAL_REGS, orig=91, freq=3, tfirst=166, tfreq=3)...
	   Assign 2 to reload r166 (freq=3)
	 Assigning to 167 (cl=GENERAL_REGS, orig=118, freq=3, tfirst=167, tfreq=3)...
	   Assign 0 to reload r167 (freq=3)
	 Assigning to 169 (cl=GENERAL_REGS, orig=119, freq=3, tfirst=169, tfreq=3)...
	   Assign 0 to reload r169 (freq=3)
	 Assigning to 170 (cl=GENERAL_REGS, orig=117, freq=3, tfirst=170, tfreq=3)...
	   Assign 2 to reload r170 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 25
changing reg in insn 27
changing reg in insn 29
changing reg in insn 32
changing reg in insn 40
changing reg in insn 73
changing reg in insn 74
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 87
changing reg in insn 98
changing reg in insn 100
changing reg in insn 114
changing reg in insn 115
changing reg in insn 115
changing reg in insn 120
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 34
changing reg in insn 36
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 43
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 47
changing reg in insn 48
changing reg in insn 46
changing reg in insn 47
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 61
changing reg in insn 56
changing reg in insn 60
changing reg in insn 59
changing reg in insn 58
changing reg in insn 59
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 66
changing reg in insn 68
changing reg in insn 69
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 71
changing reg in insn 73
changing reg in insn 72
changing reg in insn 73
changing reg in insn 77
changing reg in insn 79
changing reg in insn 80
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 84
changing reg in insn 83
changing reg in insn 84
changing reg in insn 91
changing reg in insn 93
changing reg in insn 94
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 98
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 106
changing reg in insn 109
changing reg in insn 107
changing reg in insn 109
changing reg in insn 108
changing reg in insn 109
changing reg in insn 111
changing reg in insn 112
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 114
changing reg in insn 113
changing reg in insn 114
changing reg in insn 117
changing reg in insn 118
changing reg in insn 116
changing reg in insn 117
changing reg in insn 118
changing reg in insn 120
changing reg in insn 119
changing reg in insn 120
deleting insn with uid = 10.
deleting insn with uid = 20.
deleting insn with uid = 24.
deleting insn with uid = 128.
deleting insn with uid = 129.
deleting insn with uid = 131.
deleting insn with uid = 132.
deleting insn with uid = 135.
deleting insn with uid = 136.
deleting insn with uid = 138.
deleting insn with uid = 139.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 39.


hashTableInsertFunc

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={54d,49u} r1={34d,28u} r2={13d,8u,1e} r4={9d,3u} r5={13d,7u} r6={1d,39u} r7={1d,12u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r17={35d,2u} r18={6d} r19={6d} r20={1d,1u} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={7d} r38={7d} r39={6d} r40={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} 
;;    total ref usage 717{567d,149u,1e} in 112{106 regular + 6 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 key+0 S8 A64])
        (reg:DI 5 di [ key ])) "test1.c":42 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [1 value+0 S4 A32])
        (reg:SI 4 si [ value ])) "test1.c":42 82 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [1 index+0 S4 A32])
        (reg:SI 1 dx [ index ])) "test1.c":42 82 {*movsi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:DI 5 di)
        (const_int 24 [0x18])) "test1.c":44 81 {*movdi_internal}
     (nil))
(call_insn 9 8 11 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fa517d22300 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) "test1.c":44 676 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 9 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 NewNode+0 S8 A64])
        (reg/f:DI 0 ax [98])) "test1.c":44 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 0 ax [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 NewNode+0 S8 A64])) "test1.c":45 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 1 dx)
        (const_int 24 [0x18])) "test1.c":45 81 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:SI 4 si)
        (const_int 0 [0])) "test1.c":45 82 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [99])) "test1.c":45 81 {*movdi_internal}
     (nil))
(call_insn 16 15 17 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memset") [flags 0x41]  <function_decl 0x7fa517cf6f00 memset>) [0 __builtin_memset S1 A8])
            (const_int 0 [0]))) "test1.c":45 676 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 17 16 18 2 (set (reg:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 key+0 S8 A64])) "test1.c":46 81 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [100])) "test1.c":46 81 {*movdi_internal}
     (nil))
(call_insn/i 19 18 21 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7fa517cf9700 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) "test1.c":46 676 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 21 19 22 2 (parallel [
            (set (reg:DI 0 ax [orig:88 _2 ] [88])
                (plus:DI (reg:DI 0 ax [orig:87 _1 ] [87])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":46 218 {*adddi_1}
     (nil))
(insn 22 21 23 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:88 _2 ] [88])) "test1.c":46 81 {*movdi_internal}
     (nil))
(call_insn 23 22 25 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fa517d22300 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) "test1.c":46 676 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 25 23 26 2 (set (reg/f:DI 1 dx [orig:89 _3 ] [89])
        (reg/f:DI 0 ax [101])) "test1.c":46 81 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (set (reg/f:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 NewNode+0 S8 A64])) "test1.c":46 81 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (set (mem/f:DI (reg/f:DI 0 ax [102]) [3 NewNode_15->Key+0 S8 A64])
        (reg/f:DI 1 dx [orig:89 _3 ] [89])) "test1.c":46 81 {*movdi_internal}
     (nil))
(insn 28 27 29 2 (set (reg/f:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 NewNode+0 S8 A64])) "test1.c":47 81 {*movdi_internal}
     (nil))
(insn 29 28 30 2 (set (reg/f:DI 0 ax [orig:90 _4 ] [90])
        (mem/f:DI (reg/f:DI 0 ax [103]) [3 NewNode_15->Key+0 S8 A64])) "test1.c":47 81 {*movdi_internal}
     (nil))
(insn 30 29 31 2 (set (reg:DI 1 dx [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 key+0 S8 A64])) "test1.c":47 81 {*movdi_internal}
     (nil))
(insn 31 30 32 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [104])) "test1.c":47 81 {*movdi_internal}
     (nil))
(insn 32 31 33 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:90 _4 ] [90])) "test1.c":47 81 {*movdi_internal}
     (nil))
(call_insn 33 32 34 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7fa517cf7f00 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) "test1.c":47 676 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 34 33 35 2 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 NewNode+0 S8 A64])) "test1.c":48 81 {*movdi_internal}
     (nil))
(insn 35 34 36 2 (set (reg:SI 1 dx [106])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [1 value+0 S4 A32])) "test1.c":48 82 {*movsi_internal}
     (nil))
(insn 36 35 37 2 (set (mem:SI (plus:DI (reg/f:DI 0 ax [105])
                (const_int 8 [0x8])) [1 NewNode_15->Value+0 S4 A64])
        (reg:SI 1 dx [106])) "test1.c":48 82 {*movsi_internal}
     (nil))
(insn 37 36 38 2 (set (reg:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 key+0 S8 A64])) "test1.c":50 81 {*movdi_internal}
     (nil))
(insn 38 37 39 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [107])) "test1.c":50 81 {*movdi_internal}
     (nil))
(call_insn 39 38 40 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("hashComputeByHashFunc") [flags 0x3]  <function_decl 0x7fa517a72a00 hashComputeByHashFunc>) [0 hashComputeByHashFunc S1 A8])
            (const_int 0 [0]))) "test1.c":50 676 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 40 39 127 2 (set (reg:SI 2 cx [orig:91 _5 ] [91])
        (reg:SI 0 ax)) "test1.c":50 82 {*movsi_internal}
     (nil))
(insn 127 40 41 2 (set (reg:SI 0 ax [108])
        (reg:SI 2 cx [orig:91 _5 ] [91])) "test1.c":50 82 {*movsi_internal}
     (nil))
(insn 41 127 42 2 (parallel [
            (set (reg:SI 0 ax [108])
                (lshiftrt:SI (reg:SI 0 ax [108])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":50 554 {*lshrsi3_1}
     (nil))
(insn 42 41 43 2 (set (reg:SI 1 dx [110])
        (const_int 175921861 [0xa7c5ac5])) "test1.c":50 82 {*movsi_internal}
     (nil))
(insn 43 42 130 2 (parallel [
            (set (reg:SI 1 dx [109])
                (truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (reg:SI 0 ax [108]))
                            (zero_extend:DI (reg:SI 1 dx [110])))
                        (const_int 32 [0x20]))))
            (clobber (reg:SI 0 ax [108]))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":50 366 {*umulsi3_highpart_1}
     (nil))
(insn 130 43 44 2 (set (reg:SI 0 ax [109])
        (reg:SI 1 dx [109])) "test1.c":50 82 {*movsi_internal}
     (nil))
(insn 44 130 45 2 (parallel [
            (set (reg:SI 0 ax [109])
                (lshiftrt:SI (reg:SI 0 ax [109])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":50 554 {*lshrsi3_1}
     (nil))
(insn 45 44 46 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 pos+0 S4 A32])
        (reg:SI 0 ax [111])) "test1.c":50 82 {*movsi_internal}
     (nil))
(insn 46 45 47 2 (set (reg:SI 0 ax [113])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 pos+0 S4 A32])) "test1.c":50 82 {*movsi_internal}
     (nil))
(insn 47 46 48 2 (parallel [
            (set (reg:SI 0 ax [112])
                (mult:SI (reg:SI 0 ax [113])
                    (const_int 100000 [0x186a0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":50 338 {*mulsi3_1}
     (nil))
(insn 48 47 133 2 (parallel [
            (set (reg:SI 2 cx [orig:91 _5 ] [91])
                (minus:SI (reg:SI 2 cx [orig:91 _5 ] [91])
                    (reg:SI 0 ax [112])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":50 273 {*subsi_1}
     (nil))
(insn 133 48 49 2 (set (reg:SI 0 ax [114])
        (reg:SI 2 cx [orig:91 _5 ] [91])) "test1.c":50 82 {*movsi_internal}
     (nil))
(insn 49 133 50 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 pos+0 S4 A32])
        (reg:SI 0 ax [114])) "test1.c":50 82 {*movsi_internal}
     (nil))
(insn 50 49 51 2 (set (reg:SI 0 ax [115])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 pos+0 S4 A32])) "test1.c":51 82 {*movsi_internal}
     (nil))
(insn 51 50 124 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 poscheck+0 S4 A32])
        (reg:SI 0 ax [115])) "test1.c":51 82 {*movsi_internal}
     (nil))
(jump_insn 124 51 125 2 (set (pc)
        (label_ref 64)) "test1.c":53 659 {jump}
     (nil)
 -> 64)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 125 124 86)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 116 117 118 119 120 121 122
(code_label 86 125 54 3 8 (nil) [1 uses])
(note 54 86 55 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [1 poscheck+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [1 poscheck+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":55 217 {*addsi_1}
     (nil))
(insn 56 55 134 3 (set (reg:SI 2 cx [117])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 poscheck+0 S4 A32])) "test1.c":56 82 {*movsi_internal}
     (nil))
(insn 134 56 57 3 (set (reg:SI 0 ax [118])
        (reg:SI 2 cx [117])) "test1.c":56 82 {*movsi_internal}
     (nil))
(insn 57 134 58 3 (parallel [
            (set (reg:SI 0 ax [118])
                (lshiftrt:SI (reg:SI 0 ax [118])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":56 554 {*lshrsi3_1}
     (nil))
(insn 58 57 59 3 (set (reg:SI 1 dx [120])
        (const_int 175921861 [0xa7c5ac5])) "test1.c":56 82 {*movsi_internal}
     (nil))
(insn 59 58 137 3 (parallel [
            (set (reg:SI 1 dx [119])
                (truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (reg:SI 0 ax [118]))
                            (zero_extend:DI (reg:SI 1 dx [120])))
                        (const_int 32 [0x20]))))
            (clobber (reg:SI 0 ax [118]))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":56 366 {*umulsi3_highpart_1}
     (nil))
(insn 137 59 60 3 (set (reg:SI 0 ax [119])
        (reg:SI 1 dx [119])) "test1.c":56 82 {*movsi_internal}
     (nil))
(insn 60 137 61 3 (parallel [
            (set (reg:SI 0 ax [119])
                (lshiftrt:SI (reg:SI 0 ax [119])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":56 554 {*lshrsi3_1}
     (expr_list:REG_EQUAL (udiv:SI (reg:SI 2 cx [117])
            (const_int 100000 [0x186a0]))
        (nil)))
(insn 61 60 62 3 (parallel [
            (set (reg:SI 0 ax [121])
                (mult:SI (reg:SI 0 ax [116])
                    (const_int 100000 [0x186a0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":56 338 {*mulsi3_1}
     (nil))
(insn 62 61 140 3 (parallel [
            (set (reg:SI 2 cx [117])
                (minus:SI (reg:SI 2 cx [117])
                    (reg:SI 0 ax [121])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":56 273 {*subsi_1}
     (nil))
(insn 140 62 63 3 (set (reg:SI 0 ax [122])
        (reg:SI 2 cx [117])) "test1.c":56 82 {*movsi_internal}
     (nil))
(insn 63 140 64 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 poscheck+0 S4 A32])
        (reg:SI 0 ax [122])) "test1.c":56 82 {*movsi_internal}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 92 123 124 125 126 127 128 129
(code_label 64 63 65 4 6 (nil) [1 uses])
(note 65 64 66 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 4 (set (reg:DI 0 ax [123])
        (zero_extend:DI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 poscheck+0 S4 A32]))) "test1.c":53 131 {*zero_extendsidi2}
     (nil))
(insn 67 66 68 4 (set (reg:SI 1 dx [125])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [1 index+0 S4 A32])) "test1.c":53 82 {*movsi_internal}
     (nil))
(insn 68 67 69 4 (set (reg:DI 1 dx [124])
        (sign_extend:DI (reg:SI 1 dx [125]))) "test1.c":53 145 {*extendsidi2_rex64}
     (nil))
(insn 69 68 70 4 (parallel [
            (set (reg:DI 1 dx [126])
                (mult:DI (reg:DI 1 dx [124])
                    (const_int 100000 [0x186a0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":53 339 {*muldi3_1}
     (nil))
(insn 70 69 71 4 (parallel [
            (set (reg:DI 0 ax [127])
                (plus:DI (reg:DI 0 ax [123])
                    (reg:DI 1 dx [126])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":53 218 {*adddi_1}
     (nil))
(insn 71 70 72 4 (parallel [
            (set (reg:DI 1 dx [128])
                (ashift:DI (reg:DI 0 ax [127])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":53 522 {*ashldi3_1}
     (nil))
(insn 72 71 73 4 (set (reg:DI 0 ax [129])
        (symbol_ref:DI ("hashTable") [flags 0x2]  <var_decl 0x7fa517a76000 hashTable>)) "test1.c":53 81 {*movdi_internal}
     (nil))
(insn 73 72 74 4 (set (reg/f:DI 0 ax [orig:92 _6 ] [92])
        (mem/f:DI (plus:DI (reg:DI 1 dx [128])
                (reg:DI 0 ax [129])) [2 hashTable S8 A64])) "test1.c":53 81 {*movdi_internal}
     (nil))
(insn 74 73 75 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:92 _6 ] [92])
            (const_int 0 [0]))) "test1.c":53 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 75 74 76 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 89)
            (pc))) "test1.c":53 627 {*jcc_1}
     (nil)
 -> 89)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 93 94 130 131 132 133 134 135 136
(note 76 75 77 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 5 (set (reg:DI 0 ax [130])
        (zero_extend:DI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 poscheck+0 S4 A32]))) "test1.c":53 131 {*zero_extendsidi2}
     (nil))
(insn 78 77 79 5 (set (reg:SI 1 dx [132])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [1 index+0 S4 A32])) "test1.c":53 82 {*movsi_internal}
     (nil))
(insn 79 78 80 5 (set (reg:DI 1 dx [131])
        (sign_extend:DI (reg:SI 1 dx [132]))) "test1.c":53 145 {*extendsidi2_rex64}
     (nil))
(insn 80 79 81 5 (parallel [
            (set (reg:DI 1 dx [133])
                (mult:DI (reg:DI 1 dx [131])
                    (const_int 100000 [0x186a0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":53 339 {*muldi3_1}
     (nil))
(insn 81 80 82 5 (parallel [
            (set (reg:DI 0 ax [134])
                (plus:DI (reg:DI 0 ax [130])
                    (reg:DI 1 dx [133])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":53 218 {*adddi_1}
     (nil))
(insn 82 81 83 5 (parallel [
            (set (reg:DI 1 dx [135])
                (ashift:DI (reg:DI 0 ax [134])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":53 522 {*ashldi3_1}
     (nil))
(insn 83 82 84 5 (set (reg:DI 0 ax [136])
        (symbol_ref:DI ("hashTable") [flags 0x2]  <var_decl 0x7fa517a76000 hashTable>)) "test1.c":53 81 {*movdi_internal}
     (nil))
(insn 84 83 85 5 (set (reg/f:DI 0 ax [orig:93 _7 ] [93])
        (mem/f:DI (plus:DI (reg:DI 1 dx [135])
                (reg:DI 0 ax [136])) [2 hashTable S8 A64])) "test1.c":53 81 {*movdi_internal}
     (nil))
(insn 85 84 87 5 (set (reg:SI 0 ax [orig:94 _8 ] [94])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:93 _7 ] [93])
                (const_int 8 [0x8])) [1 _7->Value+0 S4 A64])) "test1.c":53 82 {*movsi_internal}
     (nil))
(insn 87 85 88 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:94 _8 ] [94])
            (const_int -1 [0xffffffffffffffff]))) "test1.c":53 7 {*cmpsi_1}
     (nil))
(jump_insn 88 87 89 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 86)
            (pc))) "test1.c":53 627 {*jcc_1}
     (nil)
 -> 86)
;;  succ:       3
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 95 96 97 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160
(code_label 89 88 90 6 7 (nil) [1 uses])
(note 90 89 91 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 92 6 (set (reg:DI 0 ax [137])
        (zero_extend:DI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 pos+0 S4 A32]))) "test1.c":58 131 {*zero_extendsidi2}
     (nil))
(insn 92 91 93 6 (set (reg:SI 1 dx [139])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [1 index+0 S4 A32])) "test1.c":58 82 {*movsi_internal}
     (nil))
(insn 93 92 94 6 (set (reg:DI 1 dx [138])
        (sign_extend:DI (reg:SI 1 dx [139]))) "test1.c":58 145 {*extendsidi2_rex64}
     (nil))
(insn 94 93 95 6 (parallel [
            (set (reg:DI 1 dx [140])
                (mult:DI (reg:DI 1 dx [138])
                    (const_int 100000 [0x186a0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":58 339 {*muldi3_1}
     (nil))
(insn 95 94 96 6 (parallel [
            (set (reg:DI 0 ax [141])
                (plus:DI (reg:DI 0 ax [137])
                    (reg:DI 1 dx [140])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":58 218 {*adddi_1}
     (nil))
(insn 96 95 97 6 (parallel [
            (set (reg:DI 1 dx [142])
                (ashift:DI (reg:DI 0 ax [141])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":58 522 {*ashldi3_1}
     (nil))
(insn 97 96 98 6 (set (reg:DI 0 ax [143])
        (symbol_ref:DI ("hashTable") [flags 0x2]  <var_decl 0x7fa517a76000 hashTable>)) "test1.c":58 81 {*movdi_internal}
     (nil))
(insn 98 97 99 6 (set (reg/f:DI 1 dx [orig:95 _9 ] [95])
        (mem/f:DI (plus:DI (reg:DI 1 dx [142])
                (reg:DI 0 ax [143])) [2 hashTable S8 A64])) "test1.c":58 81 {*movdi_internal}
     (nil))
(insn 99 98 100 6 (set (reg/f:DI 0 ax [144])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 NewNode+0 S8 A64])) "test1.c":58 81 {*movdi_internal}
     (nil))
(insn 100 99 101 6 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [144])
                (const_int 16 [0x10])) [2 NewNode_15->pNext+0 S8 A64])
        (reg/f:DI 1 dx [orig:95 _9 ] [95])) "test1.c":58 81 {*movdi_internal}
     (nil))
(insn 101 100 102 6 (set (reg:DI 0 ax [145])
        (zero_extend:DI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 pos+0 S4 A32]))) "test1.c":59 131 {*zero_extendsidi2}
     (nil))
(insn 102 101 103 6 (set (reg:SI 1 dx [147])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [1 index+0 S4 A32])) "test1.c":59 82 {*movsi_internal}
     (nil))
(insn 103 102 104 6 (set (reg:DI 1 dx [146])
        (sign_extend:DI (reg:SI 1 dx [147]))) "test1.c":59 145 {*extendsidi2_rex64}
     (nil))
(insn 104 103 105 6 (parallel [
            (set (reg:DI 1 dx [148])
                (mult:DI (reg:DI 1 dx [146])
                    (const_int 100000 [0x186a0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":59 339 {*muldi3_1}
     (nil))
(insn 105 104 106 6 (parallel [
            (set (reg:DI 0 ax [149])
                (plus:DI (reg:DI 0 ax [145])
                    (reg:DI 1 dx [148])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":59 218 {*adddi_1}
     (nil))
(insn 106 105 107 6 (parallel [
            (set (reg:DI 2 cx [150])
                (ashift:DI (reg:DI 0 ax [149])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":59 522 {*ashldi3_1}
     (nil))
(insn 107 106 108 6 (set (reg:DI 0 ax [151])
        (symbol_ref:DI ("hashTable") [flags 0x2]  <var_decl 0x7fa517a76000 hashTable>)) "test1.c":59 81 {*movdi_internal}
     (nil))
(insn 108 107 109 6 (set (reg/f:DI 1 dx [152])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 NewNode+0 S8 A64])) "test1.c":59 81 {*movdi_internal}
     (nil))
(insn 109 108 110 6 (set (mem/f:DI (plus:DI (reg:DI 2 cx [150])
                (reg:DI 0 ax [151])) [2 hashTable S8 A64])
        (reg/f:DI 1 dx [152])) "test1.c":59 81 {*movdi_internal}
     (nil))
(insn 110 109 111 6 (set (reg:SI 0 ax [154])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [1 index+0 S4 A32])) "test1.c":61 82 {*movsi_internal}
     (nil))
(insn 111 110 112 6 (set (reg:DI 0 ax [153])
        (sign_extend:DI (reg:SI 0 ax [154]))) "test1.c":61 145 {*extendsidi2_rex64}
     (nil))
(insn 112 111 113 6 (parallel [
            (set (reg:DI 1 dx [155])
                (ashift:DI (reg:DI 0 ax [153])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":61 522 {*ashldi3_1}
     (nil))
(insn 113 112 114 6 (set (reg:DI 0 ax [156])
        (symbol_ref:DI ("hash_size") [flags 0x2]  <var_decl 0x7fa517daaf30 hash_size>)) "test1.c":61 81 {*movdi_internal}
     (nil))
(insn 114 113 115 6 (set (reg:SI 0 ax [orig:96 _10 ] [96])
        (mem:SI (plus:DI (reg:DI 1 dx [155])
                (reg:DI 0 ax [156])) [1 hash_size S4 A32])) "test1.c":61 82 {*movsi_internal}
     (nil))
(insn 115 114 116 6 (parallel [
            (set (reg:SI 2 cx [orig:97 _11 ] [97])
                (plus:SI (reg:SI 0 ax [orig:96 _10 ] [96])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":61 217 {*addsi_1}
     (nil))
(insn 116 115 117 6 (set (reg:SI 0 ax [158])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [1 index+0 S4 A32])) "test1.c":61 82 {*movsi_internal}
     (nil))
(insn 117 116 118 6 (set (reg:DI 0 ax [157])
        (sign_extend:DI (reg:SI 0 ax [158]))) "test1.c":61 145 {*extendsidi2_rex64}
     (nil))
(insn 118 117 119 6 (parallel [
            (set (reg:DI 1 dx [159])
                (ashift:DI (reg:DI 0 ax [157])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":61 522 {*ashldi3_1}
     (nil))
(insn 119 118 120 6 (set (reg:DI 0 ax [160])
        (symbol_ref:DI ("hash_size") [flags 0x2]  <var_decl 0x7fa517daaf30 hash_size>)) "test1.c":61 81 {*movdi_internal}
     (nil))
(insn 120 119 123 6 (set (mem:SI (plus:DI (reg:DI 1 dx [159])
                (reg:DI 0 ax [160])) [1 hash_size S4 A32])
        (reg:SI 2 cx [orig:97 _11 ] [97])) "test1.c":61 82 {*movsi_internal}
     (nil))
(insn 123 120 126 6 (const_int 0 [0]) "test1.c":62 694 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 126 123 0 NOTE_INSN_DELETED)

;; Function hashTableLookupFunc (hashTableLookupFunc, funcdef_no=7, decl_uid=3242, cgraph_uid=7, symbol_order=10)

      Creating newreg=121
Removing SCRATCH in insn #13 (nop 3)
rescanning insn with uid = 13.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 11:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=122 from oldreg=94, assigning class GENERAL_REGS to r122
   11: {r122:SI=r122:SI 0>>0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
   83: r122:SI=r87:SI
    Inserting insn reload after:
   84: r94:SI=r122:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
            3 Matching alt: reject+=2
            3 Super set class reg: reject-=3
            3 Small class reload: reject+=3
            3 Non input pseudo reload: reject++
          alt=0,overall=15,losers=2,rld_nregs=1
            1 Small class reload: reject+=3
            3 Matching alt: reject+=2
            3 Super set class reg: reject-=3
            3 Small class reload: reject+=3
            3 Non input pseudo reload: reject++
            alt=0,overall=24,losers=3 -- refuse
	 Choosing alt 0 in insn 13:  (0) =d  (1) %a  (2) rm  (3) =1 {*umulsi3_highpart_1}
      Creating newreg=123 from oldreg=94, assigning class AREG to r123
   13: {r95:SI=trunc(zero_extend(r123:SI)*zero_extend(r96:SI) 0>>0x20);clobber r123:SI;clobber flags:CC;}
      REG_UNUSED r121:SI
      REG_DEAD r96:SI
      REG_DEAD r94:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   85: r123:SI=r94:SI

          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 14:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=124 from oldreg=95, assigning class GENERAL_REGS to r124
   14: {r124:SI=r124:SI 0>>0x7;clobber flags:CC;}
      REG_DEAD r95:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   86: r124:SI=r95:SI
    Inserting insn reload after:
   87: r97:SI=r124:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 17:  (0) r  (1) rm  (2) e {*mulsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 18:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=125 from oldreg=87, assigning class GENERAL_REGS to r125
   18: {r125:SI=r125:SI-r98:SI;clobber flags:CC;}
      REG_DEAD r98:SI
      REG_DEAD r87:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   88: r125:SI=r87:SI
    Inserting insn reload after:
   89: r100:SI=r125:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) m  (1) re {*movsi_internal}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 23:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 24
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 26:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) r {*cmpdi_ccno_1}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 34:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 35
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 37:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 39:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 59:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 60:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) ?mr {*cmpdi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 68:  (0) r  (1) Z {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9

********** Pseudo live ranges #1: **********

  BB 9
   Insn 76: point = 0, n_alt = -1
   Insn 75: point = 0, n_alt = -2
   Insn 71: point = 1, n_alt = -2
  BB 5
   Insn 80: point = 4, n_alt = -1
   Insn 53: point = 4, n_alt = 3
  BB 8
   Insn 68: point = 5, n_alt = 2
  BB 7
   Insn 65: point = 6, n_alt = -1
   Insn 64: point = 6, n_alt = 1
  BB 3
   Insn 78: point = 6, n_alt = -1
   Insn 39: point = 6, n_alt = 5
   Insn 38: point = 7, n_alt = 3
   Insn 37: point = 9, n_alt = 4
   Insn 36: point = 10, n_alt = 1
   Insn 35: point = 12, n_alt = 0
   Insn 34: point = 14, n_alt = 1
   Insn 33: point = 16, n_alt = 1
   Insn 32: point = 18, n_alt = 0
   Insn 31: point = 19, n_alt = 3
  BB 6
   Insn 60: point = 20, n_alt = 5
   Insn 59: point = 21, n_alt = 3
   Insn 58: point = 23, n_alt = 3
  BB 4
   Insn 51: point = 24, n_alt = -1
   Insn 50: point = 24, n_alt = 0
   Insn 49: point = 25, n_alt = -2
   Insn 48: point = 26, n_alt = 0
   Insn 47: point = 26, n_alt = -2
   Insn 46: point = 27, n_alt = -2
   Insn 45: point = 28, n_alt = 3
   Insn 44: point = 29, n_alt = 3
   Insn 43: point = 31, n_alt = 3
  BB 2
   Insn 29: point = 32, n_alt = -1
   Insn 28: point = 32, n_alt = 0
   Insn 27: point = 33, n_alt = 3
   Insn 26: point = 35, n_alt = 4
   Insn 25: point = 36, n_alt = 1
   Insn 24: point = 38, n_alt = 0
   Insn 23: point = 40, n_alt = 1
   Insn 22: point = 42, n_alt = 1
   Insn 21: point = 44, n_alt = 0
   Insn 20: point = 45, n_alt = 3
   Insn 19: point = 46, n_alt = 1
   Insn 89: point = 47, n_alt = -2
	Hard reg 0 is preferable by r125 with profit 1
   Insn 18: point = 49, n_alt = 0
   Insn 88: point = 50, n_alt = -2
	Hard reg 0 is preferable by r125 with profit 1
	Hard reg 2 is preferable by r125 with profit 1
   Insn 17: point = 52, n_alt = 1
   Insn 16: point = 54, n_alt = 0
   Insn 15: point = 55, n_alt = 1
   Insn 87: point = 56, n_alt = -2
	Hard reg 0 is preferable by r124 with profit 1
   Insn 14: point = 58, n_alt = 0
   Insn 86: point = 58, n_alt = -2
	Hard reg 0 is preferable by r124 with profit 1
	Hard reg 1 is preferable by r124 with profit 1
   Insn 13: point = 60, n_alt = 0
   Insn 85: point = 62, n_alt = -2
	Hard reg 0 is preferable by r123 with profit 1
   Insn 12: point = 64, n_alt = 0
   Insn 84: point = 65, n_alt = -2
	Hard reg 0 is preferable by r122 with profit 1
   Insn 11: point = 67, n_alt = 0
   Insn 83: point = 67, n_alt = -2
   Insn 10: point = 68, n_alt = -2
   Insn 9: point = 69, n_alt = 0
   Insn 8: point = 69, n_alt = -2
   Insn 7: point = 70, n_alt = 3
   Insn 3: point = 71, n_alt = 1
   Insn 2: point = 71, n_alt = 5
 r87: [51..68]
 r88: [32..33]
 r89: [27..29]
 r90: [24..25]
 r91: [2..5]
 r92: [0..1]
 r93: [69..70]
 r94: [63..65]
 r95: [59..60]
 r96: [61..64]
 r97: [55..56]
 r98: [49..52]
 r99: [53..54]
 r100: [46..47]
 r101: [39..45]
 r102: [41..42]
 r103: [43..44]
 r104: [39..40]
 r105: [37..38]
 r106: [34..36]
 r107: [34..35]
 r108: [13..19]
 r109: [15..16]
 r110: [17..18]
 r111: [13..14]
 r112: [11..12]
 r113: [8..10]
 r114: [8..9]
 r115: [6..7]
 r116: [30..31]
 r117: [26..28]
 r118: [22..23]
 r119: [20..21]
 r122: [66..67]
 r123: [60..62]
 r124: [57..58]
 r125: [48..50]
Compressing live ranges: from 71 to 60 - 84%
Ranges after the compression:
 r87: [42..57]
 r88: [26..27]
 r89: [22..23]
 r90: [20..21]
 r91: [2..3]
 r92: [0..1]
 r93: [58..59]
 r94: [54..55]
 r95: [50..51]
 r96: [52..55]
 r97: [46..47]
 r98: [40..43]
 r99: [44..45]
 r100: [38..39]
 r101: [32..37]
 r102: [34..35]
 r103: [36..37]
 r104: [32..33]
 r105: [30..31]
 r106: [28..29]
 r107: [28..29]
 r108: [10..15]
 r109: [12..13]
 r110: [14..15]
 r111: [10..11]
 r112: [8..9]
 r113: [6..7]
 r114: [6..7]
 r115: [4..5]
 r116: [24..25]
 r117: [22..23]
 r118: [18..19]
 r119: [16..17]
 r122: [56..57]
 r123: [51..53]
 r124: [48..49]
 r125: [40..41]

********** Assignment #1: **********

	 Assigning to 123 (cl=AREG, orig=94, freq=2, tfirst=123, tfreq=2)...
	   Assign 0 to reload r123 (freq=2)
	 Assigning to 122 (cl=GENERAL_REGS, orig=94, freq=3, tfirst=122, tfreq=3)...
	   Assign 0 to reload r122 (freq=3)
	 Assigning to 124 (cl=GENERAL_REGS, orig=95, freq=3, tfirst=124, tfreq=3)...
	   Assign 0 to reload r124 (freq=3)
	 Assigning to 125 (cl=GENERAL_REGS, orig=87, freq=3, tfirst=125, tfreq=3)...
	   Assign 2 to reload r125 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 10
changing reg in insn 27
changing reg in insn 28
changing reg in insn 44
changing reg in insn 46
changing reg in insn 49
changing reg in insn 50
changing reg in insn 68
changing reg in insn 53
changing reg in insn 71
changing reg in insn 71
changing reg in insn 75
changing reg in insn 7
changing reg in insn 8
changing reg in insn 13
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 16
changing reg in insn 17
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
changing reg in insn 23
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 27
changing reg in insn 26
changing reg in insn 27
changing reg in insn 31
changing reg in insn 33
changing reg in insn 34
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 38
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 47
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
deleting insn with uid = 84.
deleting insn with uid = 85.
deleting insn with uid = 87.
deleting insn with uid = 88.
deleting insn with uid = 49.
deleting insn with uid = 71.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 48.


hashTableLookupFunc

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={27d,25u} r1={14d,11u} r2={5d,3u} r4={4d,2u} r5={5d,3u} r6={1d,26u} r7={1d,11u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={16d,3u} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 301{216d,85u,0e} in 56{54 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 key+0 S8 A64])
        (reg:DI 5 di [ key ])) "test1.c":65 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 index+0 S4 A32])
        (reg:SI 4 si [ index ])) "test1.c":65 82 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 key+0 S8 A64])) "test1.c":66 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [93])) "test1.c":66 81 {*movdi_internal}
     (nil))
(call_insn 9 8 10 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("hashComputeByHashFunc") [flags 0x3]  <function_decl 0x7fa517a72a00 hashComputeByHashFunc>) [0 hashComputeByHashFunc S1 A8])
            (const_int 0 [0]))) "test1.c":66 676 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 10 9 83 2 (set (reg:SI 2 cx [orig:87 _1 ] [87])
        (reg:SI 0 ax)) "test1.c":66 82 {*movsi_internal}
     (nil))
(insn 83 10 11 2 (set (reg:SI 0 ax [94])
        (reg:SI 2 cx [orig:87 _1 ] [87])) "test1.c":66 82 {*movsi_internal}
     (nil))
(insn 11 83 12 2 (parallel [
            (set (reg:SI 0 ax [94])
                (lshiftrt:SI (reg:SI 0 ax [94])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":66 554 {*lshrsi3_1}
     (nil))
(insn 12 11 13 2 (set (reg:SI 1 dx [96])
        (const_int 175921861 [0xa7c5ac5])) "test1.c":66 82 {*movsi_internal}
     (nil))
(insn 13 12 86 2 (parallel [
            (set (reg:SI 1 dx [95])
                (truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (reg:SI 0 ax [94]))
                            (zero_extend:DI (reg:SI 1 dx [96])))
                        (const_int 32 [0x20]))))
            (clobber (reg:SI 0 ax [94]))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":66 366 {*umulsi3_highpart_1}
     (nil))
(insn 86 13 14 2 (set (reg:SI 0 ax [95])
        (reg:SI 1 dx [95])) "test1.c":66 82 {*movsi_internal}
     (nil))
(insn 14 86 15 2 (parallel [
            (set (reg:SI 0 ax [95])
                (lshiftrt:SI (reg:SI 0 ax [95])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":66 554 {*lshrsi3_1}
     (nil))
(insn 15 14 16 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 pos+0 S4 A32])
        (reg:SI 0 ax [97])) "test1.c":66 82 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:SI 0 ax [99])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 pos+0 S4 A32])) "test1.c":66 82 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (parallel [
            (set (reg:SI 0 ax [98])
                (mult:SI (reg:SI 0 ax [99])
                    (const_int 100000 [0x186a0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":66 338 {*mulsi3_1}
     (nil))
(insn 18 17 89 2 (parallel [
            (set (reg:SI 2 cx [orig:87 _1 ] [87])
                (minus:SI (reg:SI 2 cx [orig:87 _1 ] [87])
                    (reg:SI 0 ax [98])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":66 273 {*subsi_1}
     (nil))
(insn 89 18 19 2 (set (reg:SI 0 ax [100])
        (reg:SI 2 cx [orig:87 _1 ] [87])) "test1.c":66 82 {*movsi_internal}
     (nil))
(insn 19 89 20 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 pos+0 S4 A32])
        (reg:SI 0 ax [100])) "test1.c":66 82 {*movsi_internal}
     (nil))
(insn 20 19 21 2 (set (reg:DI 0 ax [101])
        (zero_extend:DI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [1 pos+0 S4 A32]))) "test1.c":68 131 {*zero_extendsidi2}
     (nil))
(insn 21 20 22 2 (set (reg:SI 1 dx [103])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 index+0 S4 A32])) "test1.c":68 82 {*movsi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:DI 1 dx [102])
        (sign_extend:DI (reg:SI 1 dx [103]))) "test1.c":68 145 {*extendsidi2_rex64}
     (nil))
(insn 23 22 24 2 (parallel [
            (set (reg:DI 1 dx [104])
                (mult:DI (reg:DI 1 dx [102])
                    (const_int 100000 [0x186a0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":68 339 {*muldi3_1}
     (nil))
(insn 24 23 25 2 (parallel [
            (set (reg:DI 0 ax [105])
                (plus:DI (reg:DI 0 ax [101])
                    (reg:DI 1 dx [104])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":68 218 {*adddi_1}
     (nil))
(insn 25 24 26 2 (parallel [
            (set (reg:DI 1 dx [106])
                (ashift:DI (reg:DI 0 ax [105])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":68 522 {*ashldi3_1}
     (nil))
(insn 26 25 27 2 (set (reg:DI 0 ax [107])
        (symbol_ref:DI ("hashTable") [flags 0x2]  <var_decl 0x7fa517a76000 hashTable>)) "test1.c":68 81 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
        (mem/f:DI (plus:DI (reg:DI 1 dx [106])
                (reg:DI 0 ax [107])) [2 hashTable S8 A64])) "test1.c":68 81 {*movdi_internal}
     (nil))
(insn 28 27 29 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:88 _2 ] [88])
            (const_int 0 [0]))) "test1.c":68 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 29 28 30 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 66)
            (pc))) "test1.c":68 627 {*jcc_1}
     (nil)
 -> 66)
;;  succ:       3 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 108 109 110 111 112 113 114 115
(note 30 29 31 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 3 (set (reg:DI 0 ax [108])
        (zero_extend:DI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [1 pos+0 S4 A32]))) "test1.c":70 131 {*zero_extendsidi2}
     (nil))
(insn 32 31 33 3 (set (reg:SI 1 dx [110])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 index+0 S4 A32])) "test1.c":70 82 {*movsi_internal}
     (nil))
(insn 33 32 34 3 (set (reg:DI 1 dx [109])
        (sign_extend:DI (reg:SI 1 dx [110]))) "test1.c":70 145 {*extendsidi2_rex64}
     (nil))
(insn 34 33 35 3 (parallel [
            (set (reg:DI 1 dx [111])
                (mult:DI (reg:DI 1 dx [109])
                    (const_int 100000 [0x186a0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":70 339 {*muldi3_1}
     (nil))
(insn 35 34 36 3 (parallel [
            (set (reg:DI 0 ax [112])
                (plus:DI (reg:DI 0 ax [108])
                    (reg:DI 1 dx [111])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":70 218 {*adddi_1}
     (nil))
(insn 36 35 37 3 (parallel [
            (set (reg:DI 1 dx [113])
                (ashift:DI (reg:DI 0 ax [112])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":70 522 {*ashldi3_1}
     (nil))
(insn 37 36 38 3 (set (reg:DI 0 ax [114])
        (symbol_ref:DI ("hashTable") [flags 0x2]  <var_decl 0x7fa517a76000 hashTable>)) "test1.c":70 81 {*movdi_internal}
     (nil))
(insn 38 37 39 3 (set (reg/f:DI 0 ax [115])
        (mem/f:DI (plus:DI (reg:DI 1 dx [113])
                (reg:DI 0 ax [114])) [2 hashTable S8 A64])) "test1.c":70 81 {*movdi_internal}
     (nil))
(insn 39 38 78 3 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 pHead+0 S8 A64])
        (reg/f:DI 0 ax [115])) "test1.c":70 81 {*movdi_internal}
     (nil))
(jump_insn 78 39 79 3 (set (pc)
        (label_ref 61)) "test1.c":71 659 {jump}
     (nil)
 -> 61)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 79 78 63)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 116 117
(code_label 63 79 42 4 14 (nil) [1 uses])
(note 42 63 43 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 44 4 (set (reg/f:DI 0 ax [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 pHead+0 S8 A64])) "test1.c":73 81 {*movdi_internal}
     (nil))
(insn 44 43 45 4 (set (reg/f:DI 1 dx [orig:89 _3 ] [89])
        (mem/f:DI (reg/f:DI 0 ax [116]) [3 pHead_5->Key+0 S8 A64])) "test1.c":73 81 {*movdi_internal}
     (nil))
(insn 45 44 46 4 (set (reg:DI 0 ax [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 key+0 S8 A64])) "test1.c":73 81 {*movdi_internal}
     (nil))
(insn 46 45 47 4 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:89 _3 ] [89])) "test1.c":73 81 {*movdi_internal}
     (nil))
(insn 47 46 48 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [117])) "test1.c":73 81 {*movdi_internal}
     (nil))
(call_insn/i 48 47 50 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7fa517cf7d00 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) "test1.c":73 676 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 50 48 51 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:90 _4 ] [90])
            (const_int 0 [0]))) "test1.c":73 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 51 50 52 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 56)
            (pc))) "test1.c":73 627 {*jcc_1}
     (nil)
 -> 56)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 91
(note 52 51 53 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 80 5 (set (reg/f:DI 0 ax [orig:91 _6 ] [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 pHead+0 S8 A64])) "test1.c":75 81 {*movdi_internal}
     (nil))
(jump_insn 80 53 81 5 (set (pc)
        (label_ref 69)) "test1.c":75 659 {jump}
     (nil)
 -> 69)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91

(barrier 81 80 56)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 118 119
(code_label 56 81 57 6 12 (nil) [1 uses])
(note 57 56 58 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 6 (set (reg/f:DI 0 ax [118])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 pHead+0 S8 A64])) "test1.c":77 81 {*movdi_internal}
     (nil))
(insn 59 58 60 6 (set (reg/f:DI 0 ax [119])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [118])
                (const_int 16 [0x10])) [2 pHead_5->pNext+0 S8 A64])) "test1.c":77 81 {*movdi_internal}
     (nil))
(insn 60 59 61 6 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 pHead+0 S8 A64])
        (reg/f:DI 0 ax [119])) "test1.c":77 81 {*movdi_internal}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 61 60 62 7 11 (nil) [1 uses])
(note 62 61 64 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 64 62 65 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [2 pHead+0 S8 A64])
            (const_int 0 [0]))) "test1.c":71 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 65 64 66 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 63)
            (pc))) "test1.c":71 627 {*jcc_1}
     (nil)
 -> 63)
;;  succ:       4
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       2
;;              7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 91
(code_label 66 65 67 8 10 (nil) [1 uses])
(note 67 66 68 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 8 (set (reg/f:DI 0 ax [orig:91 _6 ] [91])
        (const_int 0 [0])) "test1.c":80 81 {*movdi_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 1, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              5 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91
;; lr  def 	 0 [ax] 92
(code_label 69 68 70 9 13 (nil) [1 uses])
(note 70 69 75 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 75 70 76 9 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:92 <retval> ] [92])) "test1.c":81 81 {*movdi_internal}
     (nil))
(insn 76 75 82 9 (use (reg/i:DI 0 ax)) "test1.c":81 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 82 76 0 NOTE_INSN_DELETED)

;; Function hashTablePrintFunc (hashTablePrintFunc, funcdef_no=8, decl_uid=3250, cgraph_uid=8, symbol_order=11)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 16:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 17
	 Choosing alt 0 in insn 17:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 19:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 28:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 29
	 Choosing alt 0 in insn 29:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 31:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 33:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 43:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 48:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) ?mr {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 58:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) rm  (1) re {*cmpsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9

********** Pseudo live ranges #1: **********

  BB 9
   Insn 67: point = 0, n_alt = -1
  BB 8
   Insn 63: point = 0, n_alt = -1
   Insn 62: point = 0, n_alt = 0
  BB 2
   Insn 68: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = 4
   Insn 6: point = 0, n_alt = 1
   Insn 2: point = 0, n_alt = 1
  BB 7
   Insn 58: point = 0, n_alt = 1
  BB 6
   Insn 55: point = 0, n_alt = -1
   Insn 54: point = 0, n_alt = 1
  BB 4
   Insn 70: point = 0, n_alt = -1
   Insn 33: point = 0, n_alt = 5
   Insn 32: point = 1, n_alt = 3
   Insn 31: point = 3, n_alt = 4
   Insn 30: point = 4, n_alt = 1
   Insn 29: point = 6, n_alt = 0
   Insn 28: point = 8, n_alt = 1
   Insn 27: point = 10, n_alt = 1
   Insn 26: point = 12, n_alt = 0
   Insn 25: point = 13, n_alt = 0
   Insn 24: point = 15, n_alt = 0
  BB 5
   Insn 50: point = 16, n_alt = 0
   Insn 49: point = 16, n_alt = 0
   Insn 48: point = 16, n_alt = 5
   Insn 47: point = 17, n_alt = 3
   Insn 46: point = 19, n_alt = 3
   Insn 45: point = 20, n_alt = 0
   Insn 44: point = 20, n_alt = 1
   Insn 43: point = 20, n_alt = 4
   Insn 42: point = 20, n_alt = -2
   Insn 41: point = 21, n_alt = -2
   Insn 40: point = 22, n_alt = 3
   Insn 39: point = 24, n_alt = 3
   Insn 38: point = 25, n_alt = 0
   Insn 37: point = 27, n_alt = 3
  BB 3
   Insn 22: point = 28, n_alt = -1
   Insn 21: point = 28, n_alt = 0
   Insn 20: point = 29, n_alt = 3
   Insn 19: point = 31, n_alt = 4
   Insn 18: point = 32, n_alt = 1
   Insn 17: point = 34, n_alt = 0
   Insn 16: point = 36, n_alt = 1
   Insn 15: point = 38, n_alt = 1
   Insn 14: point = 40, n_alt = 0
   Insn 13: point = 41, n_alt = 0
   Insn 12: point = 43, n_alt = 0
 r87: [28..29]
 r88: [21..25]
 r89: [20..22]
 r90: [35..41]
 r91: [42..43]
 r92: [37..38]
 r93: [39..40]
 r94: [35..36]
 r95: [33..34]
 r96: [30..32]
 r97: [30..31]
 r98: [7..13]
 r99: [14..15]
 r100: [9..10]
 r101: [11..12]
 r102: [7..8]
 r103: [5..6]
 r104: [2..4]
 r105: [2..3]
 r106: [0..1]
 r107: [26..27]
 r108: [23..24]
 r109: [18..19]
 r110: [16..17]
Compressing live ranges: from 44 to 38 - 86%
Ranges after the compression:
 r87: [24..25]
 r88: [18..21]
 r89: [18..19]
 r90: [30..35]
 r91: [36..37]
 r92: [32..33]
 r93: [34..35]
 r94: [30..31]
 r95: [28..29]
 r96: [26..27]
 r97: [26..27]
 r98: [6..11]
 r99: [12..13]
 r100: [8..9]
 r101: [10..11]
 r102: [6..7]
 r103: [4..5]
 r104: [2..3]
 r105: [2..3]
 r106: [0..1]
 r107: [22..23]
 r108: [20..21]
 r109: [16..17]
 r110: [14..15]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 20
changing reg in insn 21
changing reg in insn 38
changing reg in insn 41
changing reg in insn 40
changing reg in insn 42
changing reg in insn 13
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 20
changing reg in insn 19
changing reg in insn 20
changing reg in insn 25
changing reg in insn 24
changing reg in insn 25
changing reg in insn 27
changing reg in insn 28
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 32
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
deleting insn with uid = 41.
starting the processing of deferred insns
ending the processing of deferred insns


hashTablePrintFunc

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={20d,16u} r1={13d,9u} r2={4d} r4={5d,1u} r5={7d,4u} r6={1d,24u} r7={1d,12u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={13d,3u} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 343{273d,70u,0e} in 46{43 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 index+0 S4 A32])
        (reg:SI 5 di [ index ])) "test1.c":84 82 {*movsi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 0 [0])) "test1.c":85 82 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fa517acfab0 *.LC0>)) "test1.c":87 81 {*movdi_internal}
     (nil))
(call_insn 8 7 68 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fa517d00600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":87 676 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 68 8 69 2 (set (pc)
        (label_ref 59)) "test1.c":88 659 {jump}
     (nil)
 -> 59)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 69 68 61)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       8
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 90 91 92 93 94 95 96 97
(code_label 61 69 11 3 20 (nil) [1 uses])
(note 11 61 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg:SI 0 ax [91])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "test1.c":90 82 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (set (reg:DI 0 ax [90])
        (sign_extend:DI (reg:SI 0 ax [91]))) "test1.c":90 145 {*extendsidi2_rex64}
     (nil))
(insn 14 13 15 3 (set (reg:SI 1 dx [93])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 index+0 S4 A32])) "test1.c":90 82 {*movsi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:DI 1 dx [92])
        (sign_extend:DI (reg:SI 1 dx [93]))) "test1.c":90 145 {*extendsidi2_rex64}
     (nil))
(insn 16 15 17 3 (parallel [
            (set (reg:DI 1 dx [94])
                (mult:DI (reg:DI 1 dx [92])
                    (const_int 100000 [0x186a0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":90 339 {*muldi3_1}
     (nil))
(insn 17 16 18 3 (parallel [
            (set (reg:DI 0 ax [95])
                (plus:DI (reg:DI 0 ax [90])
                    (reg:DI 1 dx [94])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":90 218 {*adddi_1}
     (nil))
(insn 18 17 19 3 (parallel [
            (set (reg:DI 1 dx [96])
                (ashift:DI (reg:DI 0 ax [95])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":90 522 {*ashldi3_1}
     (nil))
(insn 19 18 20 3 (set (reg:DI 0 ax [97])
        (symbol_ref:DI ("hashTable") [flags 0x2]  <var_decl 0x7fa517a76000 hashTable>)) "test1.c":90 81 {*movdi_internal}
     (nil))
(insn 20 19 21 3 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f:DI (plus:DI (reg:DI 1 dx [96])
                (reg:DI 0 ax [97])) [2 hashTable S8 A64])) "test1.c":90 81 {*movdi_internal}
     (nil))
(insn 21 20 22 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:87 _1 ] [87])
            (const_int 0 [0]))) "test1.c":90 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 22 21 23 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 56)
            (pc))) "test1.c":90 627 {*jcc_1}
     (nil)
 -> 56)
;;  succ:       4 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98 99 100 101 102 103 104 105 106
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 4 (set (reg:SI 0 ax [99])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "test1.c":92 82 {*movsi_internal}
     (nil))
(insn 25 24 26 4 (set (reg:DI 0 ax [98])
        (sign_extend:DI (reg:SI 0 ax [99]))) "test1.c":92 145 {*extendsidi2_rex64}
     (nil))
(insn 26 25 27 4 (set (reg:SI 1 dx [101])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 index+0 S4 A32])) "test1.c":92 82 {*movsi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:DI 1 dx [100])
        (sign_extend:DI (reg:SI 1 dx [101]))) "test1.c":92 145 {*extendsidi2_rex64}
     (nil))
(insn 28 27 29 4 (parallel [
            (set (reg:DI 1 dx [102])
                (mult:DI (reg:DI 1 dx [100])
                    (const_int 100000 [0x186a0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":92 339 {*muldi3_1}
     (nil))
(insn 29 28 30 4 (parallel [
            (set (reg:DI 0 ax [103])
                (plus:DI (reg:DI 0 ax [98])
                    (reg:DI 1 dx [102])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":92 218 {*adddi_1}
     (nil))
(insn 30 29 31 4 (parallel [
            (set (reg:DI 1 dx [104])
                (ashift:DI (reg:DI 0 ax [103])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":92 522 {*ashldi3_1}
     (nil))
(insn 31 30 32 4 (set (reg:DI 0 ax [105])
        (symbol_ref:DI ("hashTable") [flags 0x2]  <var_decl 0x7fa517a76000 hashTable>)) "test1.c":92 81 {*movdi_internal}
     (nil))
(insn 32 31 33 4 (set (reg/f:DI 0 ax [106])
        (mem/f:DI (plus:DI (reg:DI 1 dx [104])
                (reg:DI 0 ax [105])) [2 hashTable S8 A64])) "test1.c":92 81 {*movdi_internal}
     (nil))
(insn 33 32 70 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 pHead+0 S8 A64])
        (reg/f:DI 0 ax [106])) "test1.c":92 81 {*movdi_internal}
     (nil))
(jump_insn 70 33 71 4 (set (pc)
        (label_ref 51)) "test1.c":93 659 {jump}
     (nil)
 -> 51)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 71 70 53)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 89 107 108 109 110
(code_label 53 71 36 5 19 (nil) [1 uses])
(note 36 53 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 5 (set (reg/f:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 pHead+0 S8 A64])) "test1.c":95 81 {*movdi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:SI 1 dx [orig:88 _2 ] [88])
        (mem:SI (plus:DI (reg/f:DI 0 ax [107])
                (const_int 8 [0x8])) [1 pHead_5->Value+0 S4 A64])) "test1.c":95 82 {*movsi_internal}
     (nil))
(insn 39 38 40 5 (set (reg/f:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 pHead+0 S8 A64])) "test1.c":95 81 {*movdi_internal}
     (nil))
(insn 40 39 42 5 (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
        (mem/f:DI (reg/f:DI 0 ax [108]) [3 pHead_5->Key+0 S8 A64])) "test1.c":95 81 {*movdi_internal}
     (nil))
(insn 42 40 43 5 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:89 _3 ] [89])) "test1.c":95 81 {*movdi_internal}
     (nil))
(insn 43 42 44 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fa517acfb40 *.LC1>)) "test1.c":95 81 {*movdi_internal}
     (nil))
(insn 44 43 45 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":95 84 {*movqi_internal}
     (nil))
(call_insn 45 44 46 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fa517cfff00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":95 676 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 46 45 47 5 (set (reg/f:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 pHead+0 S8 A64])) "test1.c":96 81 {*movdi_internal}
     (nil))
(insn 47 46 48 5 (set (reg/f:DI 0 ax [110])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [109])
                (const_int 16 [0x10])) [2 pHead_5->pNext+0 S8 A64])) "test1.c":96 81 {*movdi_internal}
     (nil))
(insn 48 47 49 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 pHead+0 S8 A64])
        (reg/f:DI 0 ax [110])) "test1.c":96 81 {*movdi_internal}
     (nil))
(insn 49 48 50 5 (set (reg:SI 5 di)
        (const_int 10 [0xa])) "test1.c":97 82 {*movsi_internal}
     (nil))
(call_insn 50 49 51 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7fa517d00200 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) "test1.c":97 676 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 51 50 52 6 18 (nil) [1 uses])
(note 52 51 54 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 54 52 55 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [2 pHead+0 S8 A64])
            (const_int 0 [0]))) "test1.c":93 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 55 54 56 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 53)
            (pc))) "test1.c":93 627 {*jcc_1}
     (nil)
 -> 53)
;;  succ:       5
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 56 55 57 7 17 (nil) [1 uses])
(note 57 56 58 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":100 217 {*addsi_1}
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 59 58 60 8 16 (nil) [1 uses])
(note 60 59 62 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 62 60 63 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int 99999 [0x1869f]))) "test1.c":88 7 {*cmpsi_1}
     (nil))
(jump_insn 63 62 64 8 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 61)
            (pc))) "test1.c":88 627 {*jcc_1}
     (nil)
 -> 61)
;;  succ:       3
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 1, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 64 63 67 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 67 64 72 9 (const_int 0 [0]) "test1.c":102 694 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 72 67 0 NOTE_INSN_DELETED)

;; Function rmPunct2LowerFunc (rmPunct2LowerFunc, funcdef_no=9, decl_uid=3261, cgraph_uid=9, symbol_order=12)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) qm {zero_extendqidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 21
	 Choosing alt 0 in insn 21:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 22:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 24:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 32:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) qm {zero_extendqidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 36
	 Choosing alt 0 in insn 36:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 37:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 39:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 44:  (0) rm  (1) 0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 53:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) qm {zero_extendqidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 57
	 Choosing alt 0 in insn 57:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 58:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 60:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 65:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 72:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 73:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 75:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 76:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) r  (1) rm {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 85:  (0) rm  (1) 0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 86:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 92:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 93:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 94:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 95:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 96:  (0) m  (1) re {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 97:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 98:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 102:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 108:  (0) m  (1) qn {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12

********** Pseudo live ranges #1: **********

  BB 12
   Insn 111: point = 0, n_alt = -1
   Insn 108: point = 0, n_alt = 6
   Insn 107: point = 1, n_alt = 3
  BB 11
   Insn 105: point = 2, n_alt = -1
   Insn 104: point = 2, n_alt = 0
   Insn 102: point = 3, n_alt = 2
   Insn 101: point = 5, n_alt = 3
  BB 9
   Insn 118: point = 6, n_alt = -1
   Insn 86: point = 6, n_alt = 1
   Insn 85: point = 6, n_alt = 1
  BB 7
   Insn 116: point = 6, n_alt = -1
   Insn 76: point = 6, n_alt = 1
   Insn 75: point = 6, n_alt = 6
   Insn 74: point = 7, n_alt = 0
   Insn 73: point = 9, n_alt = 5
   Insn 72: point = 10, n_alt = 3
   Insn 71: point = 11, n_alt = 3
   Insn 70: point = 12, n_alt = -2
   Insn 69: point = 13, n_alt = 0
   Insn 68: point = 13, n_alt = -2
   Insn 67: point = 14, n_alt = 0
   Insn 66: point = 16, n_alt = -2
   Insn 65: point = 18, n_alt = 2
   Insn 64: point = 20, n_alt = 3
  BB 5
   Insn 114: point = 21, n_alt = -1
   Insn 44: point = 21, n_alt = 1
  BB 2
   Insn 112: point = 21, n_alt = -1
   Insn 9: point = 21, n_alt = 5
   Insn 8: point = 22, n_alt = 3
   Insn 7: point = 23, n_alt = 5
   Insn 6: point = 24, n_alt = 3
   Insn 2: point = 25, n_alt = 5
  BB 10
   Insn 98: point = 25, n_alt = 6
   Insn 97: point = 26, n_alt = 2
   Insn 96: point = 28, n_alt = 5
   Insn 95: point = 29, n_alt = 3
   Insn 94: point = 30, n_alt = 3
   Insn 93: point = 31, n_alt = 5
   Insn 92: point = 32, n_alt = 3
   Insn 91: point = 33, n_alt = 3
  BB 8
   Insn 83: point = 34, n_alt = -1
   Insn 82: point = 34, n_alt = 1
   Insn 81: point = 35, n_alt = 3
  BB 6
   Insn 62: point = 36, n_alt = -1
   Insn 61: point = 36, n_alt = 0
   Insn 60: point = 37, n_alt = 0
   Insn 59: point = 39, n_alt = 0
   Insn 58: point = 41, n_alt = 2
   Insn 57: point = 43, n_alt = 0
   Insn 56: point = 45, n_alt = 0
   Insn 55: point = 47, n_alt = 0
   Insn 54: point = 49, n_alt = -2
   Insn 53: point = 51, n_alt = 2
   Insn 52: point = 53, n_alt = 3
   Insn 51: point = 54, n_alt = 3
   Insn 50: point = 56, n_alt = -2
   Insn 49: point = 57, n_alt = 0
  BB 4
   Insn 41: point = 57, n_alt = -1
   Insn 40: point = 57, n_alt = 0
   Insn 39: point = 58, n_alt = 0
   Insn 38: point = 60, n_alt = 0
   Insn 37: point = 62, n_alt = 2
   Insn 36: point = 64, n_alt = 0
   Insn 35: point = 66, n_alt = 0
   Insn 34: point = 68, n_alt = 0
   Insn 33: point = 70, n_alt = -2
   Insn 32: point = 72, n_alt = 2
   Insn 31: point = 74, n_alt = 3
   Insn 30: point = 75, n_alt = 3
   Insn 29: point = 77, n_alt = -2
   Insn 28: point = 78, n_alt = 0
  BB 3
   Insn 26: point = 78, n_alt = -1
   Insn 25: point = 78, n_alt = 0
   Insn 24: point = 79, n_alt = 0
   Insn 23: point = 81, n_alt = 0
   Insn 22: point = 83, n_alt = 2
   Insn 21: point = 85, n_alt = 0
   Insn 20: point = 87, n_alt = 0
   Insn 19: point = 89, n_alt = 0
   Insn 18: point = 91, n_alt = -2
   Insn 17: point = 93, n_alt = 2
   Insn 16: point = 95, n_alt = 3
   Insn 15: point = 96, n_alt = 3
   Insn 14: point = 98, n_alt = -2
   Insn 13: point = 99, n_alt = 0
 r87: [97..98]
 r88: [86..96]
 r89: [92..93]
 r90: [90..91]
 r91: [88..89]
 r92: [86..87]
 r93: [84..85]
 r94: [82..83]
 r95: [80..81]
 r96: [78..79]
 r97: [76..77]
 r98: [65..75]
 r99: [71..72]
 r100: [69..70]
 r101: [67..68]
 r102: [65..66]
 r103: [63..64]
 r104: [61..62]
 r105: [59..60]
 r106: [57..58]
 r107: [55..56]
 r108: [44..54]
 r109: [50..51]
 r110: [48..49]
 r111: [46..47]
 r112: [44..45]
 r113: [42..43]
 r114: [40..41]
 r115: [38..39]
 r116: [36..37]
 r117: [17..18]
 r118: [15..16]
 r119: [13..14]
 r120: [8..12]
 r121: [6..11]
 r122: [6..7]
 r123: [27..33]
 r124: [25..30]
 r125: [25..26]
 r126: [2..3]
 r127: [23..24]
 r128: [21..22]
 r129: [94..95]
 r130: [73..74]
 r131: [52..53]
 r132: [19..20]
 r133: [9..10]
 r134: [34..35]
 r135: [31..32]
 r136: [28..29]
 r137: [4..5]
 r138: [0..1]
Compressing live ranges: from 99 to 90 - 90%
Ranges after the compression:
 r87: [88..89]
 r88: [78..87]
 r89: [84..85]
 r90: [82..83]
 r91: [80..81]
 r92: [78..79]
 r93: [76..77]
 r94: [74..75]
 r95: [72..73]
 r96: [70..71]
 r97: [68..69]
 r98: [58..67]
 r99: [64..65]
 r100: [62..63]
 r101: [60..61]
 r102: [58..59]
 r103: [56..57]
 r104: [54..55]
 r105: [52..53]
 r106: [50..51]
 r107: [48..49]
 r108: [38..47]
 r109: [44..45]
 r110: [42..43]
 r111: [40..41]
 r112: [38..39]
 r113: [36..37]
 r114: [34..35]
 r115: [32..33]
 r116: [30..31]
 r117: [14..15]
 r118: [12..13]
 r119: [10..11]
 r120: [8..9]
 r121: [6..9]
 r122: [6..7]
 r123: [24..27]
 r124: [22..25]
 r125: [22..23]
 r126: [2..3]
 r127: [20..21]
 r128: [18..19]
 r129: [86..87]
 r130: [66..67]
 r131: [46..47]
 r132: [16..17]
 r133: [8..9]
 r134: [28..29]
 r135: [26..27]
 r136: [24..25]
 r137: [4..5]
 r138: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 53
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 70
changing reg in insn 71
changing reg in insn 75
changing reg in insn 72
changing reg in insn 74
changing reg in insn 75
changing reg in insn 91
changing reg in insn 97
changing reg in insn 92
changing reg in insn 94
changing reg in insn 98
changing reg in insn 95
changing reg in insn 97
changing reg in insn 98
changing reg in insn 102
changing reg in insn 104
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 16
changing reg in insn 17
changing reg in insn 31
changing reg in insn 32
changing reg in insn 52
changing reg in insn 53
changing reg in insn 64
changing reg in insn 65
changing reg in insn 72
changing reg in insn 73
changing reg in insn 81
changing reg in insn 82
changing reg in insn 92
changing reg in insn 93
changing reg in insn 95
changing reg in insn 96
changing reg in insn 101
changing reg in insn 102
changing reg in insn 107
changing reg in insn 108
deleting insn with uid = 14.
deleting insn with uid = 18.
deleting insn with uid = 29.
deleting insn with uid = 33.
deleting insn with uid = 50.
deleting insn with uid = 54.
deleting insn with uid = 66.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 49.
verify found no changes in insn with uid = 69.


rmPunct2LowerFunc

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={41d,42u} r1={12d,8u} r2={7d,2u} r4={5d} r5={6d,2u} r6={1d,39u} r7={1d,16u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={25d,5u} r18={4d} r19={4d} r20={1d,1u} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 488{373d,115u,0e} in 78{74 regular + 4 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 127 128
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 p+0 S8 A64])
        (reg:DI 5 di [ p ])) "test1.c":106 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [127])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 p+0 S8 A64])) "test1.c":107 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 src+0 S8 A64])
        (reg/f:DI 0 ax [127])) "test1.c":107 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 0 ax [128])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 p+0 S8 A64])) "test1.c":107 81 {*movdi_internal}
     (nil))
(insn 9 8 112 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 dst+0 S8 A64])
        (reg/f:DI 0 ax [128])) "test1.c":107 81 {*movdi_internal}
     (nil))
(jump_insn 112 9 113 2 (set (pc)
        (label_ref 99)) "test1.c":108 659 {jump}
     (nil)
 -> 99)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 113 112 103)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       11
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95 96 129
(code_label 103 113 12 3 27 (nil) [1 uses])
(note 12 103 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(call_insn/u 13 12 15 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__ctype_b_loc") [flags 0x41]  <function_decl 0x7fa517e09400 __ctype_b_loc>) [0 __ctype_b_loc S1 A8])
            (const_int 0 [0]))) "test1.c":110 676 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 15 13 16 3 (set (reg/f:DI 1 dx [orig:88 _2 ] [88])
        (mem/f:DI (reg/f:DI 0 ax [orig:87 _1 ] [87]) [5 *_1+0 S8 A64])) "test1.c":110 81 {*movdi_internal}
     (nil))
(insn 16 15 17 3 (set (reg/f:DI 0 ax [129])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 src+0 S8 A64])) "test1.c":110 81 {*movdi_internal}
     (nil))
(insn 17 16 19 3 (set (reg:QI 0 ax [orig:89 _3 ] [89])
        (mem:QI (reg/f:DI 0 ax [129]) [0 *src_41+0 S1 A8])) "test1.c":110 84 {*movqi_internal}
     (nil))
(insn 19 17 20 3 (set (reg:DI 0 ax [orig:91 _5 ] [91])
        (zero_extend:DI (reg:QI 0 ax [orig:90 _4 ] [90]))) "test1.c":110 132 {zero_extendqidi2}
     (nil))
(insn 20 19 21 3 (parallel [
            (set (reg:DI 0 ax [orig:92 _6 ] [92])
                (ashift:DI (reg:DI 0 ax [orig:91 _5 ] [91])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":110 522 {*ashldi3_1}
     (nil))
(insn 21 20 22 3 (parallel [
            (set (reg/f:DI 0 ax [orig:93 _7 ] [93])
                (plus:DI (reg:DI 0 ax [orig:92 _6 ] [92])
                    (reg/f:DI 1 dx [orig:88 _2 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":110 218 {*adddi_1}
     (nil))
(insn 22 21 23 3 (set (reg:HI 0 ax [orig:94 _8 ] [94])
        (mem:HI (reg/f:DI 0 ax [orig:93 _7 ] [93]) [6 *_7+0 S2 A16])) "test1.c":110 83 {*movhi_internal}
     (nil))
(insn 23 22 24 3 (set (reg:SI 0 ax [orig:95 _9 ] [95])
        (zero_extend:SI (reg:HI 0 ax [orig:94 _8 ] [94]))) "test1.c":110 137 {*zero_extendhisi2}
     (nil))
(insn 24 23 25 3 (parallel [
            (set (reg:SI 0 ax [orig:96 _10 ] [96])
                (and:SI (reg:SI 0 ax [orig:95 _9 ] [95])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":110 401 {*andsi_1}
     (nil))
(insn 25 24 26 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:96 _10 ] [96])
            (const_int 0 [0]))) "test1.c":110 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 26 25 27 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 42)
            (pc))) "test1.c":110 627 {*jcc_1}
     (nil)
 -> 42)
;;  succ:       5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 97 98 99 100 101 102 103 104 105 106 130
(note 27 26 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn/u 28 27 30 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__ctype_b_loc") [flags 0x41]  <function_decl 0x7fa517e09400 __ctype_b_loc>) [0 __ctype_b_loc S1 A8])
            (const_int 0 [0]))) "test1.c":110 676 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 30 28 31 4 (set (reg/f:DI 1 dx [orig:98 _12 ] [98])
        (mem/f:DI (reg/f:DI 0 ax [orig:97 _11 ] [97]) [5 *_11+0 S8 A64])) "test1.c":110 81 {*movdi_internal}
     (nil))
(insn 31 30 32 4 (set (reg/f:DI 0 ax [130])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 src+0 S8 A64])) "test1.c":110 81 {*movdi_internal}
     (nil))
(insn 32 31 34 4 (set (reg:QI 0 ax [orig:99 _13 ] [99])
        (mem:QI (reg/f:DI 0 ax [130]) [0 *src_41+0 S1 A8])) "test1.c":110 84 {*movqi_internal}
     (nil))
(insn 34 32 35 4 (set (reg:DI 0 ax [orig:101 _15 ] [101])
        (zero_extend:DI (reg:QI 0 ax [orig:100 _14 ] [100]))) "test1.c":110 132 {zero_extendqidi2}
     (nil))
(insn 35 34 36 4 (parallel [
            (set (reg:DI 0 ax [orig:102 _16 ] [102])
                (ashift:DI (reg:DI 0 ax [orig:101 _15 ] [101])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":110 522 {*ashldi3_1}
     (nil))
(insn 36 35 37 4 (parallel [
            (set (reg/f:DI 0 ax [orig:103 _17 ] [103])
                (plus:DI (reg:DI 0 ax [orig:102 _16 ] [102])
                    (reg/f:DI 1 dx [orig:98 _12 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":110 218 {*adddi_1}
     (nil))
(insn 37 36 38 4 (set (reg:HI 0 ax [orig:104 _18 ] [104])
        (mem:HI (reg/f:DI 0 ax [orig:103 _17 ] [103]) [6 *_17+0 S2 A16])) "test1.c":110 83 {*movhi_internal}
     (nil))
(insn 38 37 39 4 (set (reg:SI 0 ax [orig:105 _19 ] [105])
        (zero_extend:SI (reg:HI 0 ax [orig:104 _18 ] [104]))) "test1.c":110 137 {*zero_extendhisi2}
     (nil))
(insn 39 38 40 4 (parallel [
            (set (reg:SI 0 ax [orig:106 _20 ] [106])
                (and:SI (reg:SI 0 ax [orig:105 _19 ] [105])
                    (const_int 2048 [0x800])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":110 401 {*andsi_1}
     (nil))
(insn 40 39 41 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:106 _20 ] [106])
            (const_int 0 [0]))) "test1.c":110 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 41 40 42 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 47)
            (pc))) "test1.c":110 627 {*jcc_1}
     (nil)
 -> 47)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 42 41 43 5 23 (nil) [1 uses])
(note 43 42 44 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 114 5 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [3 src+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":112 218 {*adddi_1}
     (nil))
(jump_insn 114 44 115 5 (set (pc)
        (label_ref 99)) "test1.c":112 659 {jump}
     (nil)
 -> 99)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 115 114 47)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 107 108 109 110 111 112 113 114 115 116 131
(code_label 47 115 48 6 24 (nil) [1 uses])
(note 48 47 49 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(call_insn/u 49 48 51 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__ctype_b_loc") [flags 0x41]  <function_decl 0x7fa517e09400 __ctype_b_loc>) [0 __ctype_b_loc S1 A8])
            (const_int 0 [0]))) "test1.c":114 676 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 51 49 52 6 (set (reg/f:DI 1 dx [orig:108 _22 ] [108])
        (mem/f:DI (reg/f:DI 0 ax [orig:107 _21 ] [107]) [5 *_21+0 S8 A64])) "test1.c":114 81 {*movdi_internal}
     (nil))
(insn 52 51 53 6 (set (reg/f:DI 0 ax [131])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 src+0 S8 A64])) "test1.c":114 81 {*movdi_internal}
     (nil))
(insn 53 52 55 6 (set (reg:QI 0 ax [orig:109 _23 ] [109])
        (mem:QI (reg/f:DI 0 ax [131]) [0 *src_41+0 S1 A8])) "test1.c":114 84 {*movqi_internal}
     (nil))
(insn 55 53 56 6 (set (reg:DI 0 ax [orig:111 _25 ] [111])
        (zero_extend:DI (reg:QI 0 ax [orig:110 _24 ] [110]))) "test1.c":114 132 {zero_extendqidi2}
     (nil))
(insn 56 55 57 6 (parallel [
            (set (reg:DI 0 ax [orig:112 _26 ] [112])
                (ashift:DI (reg:DI 0 ax [orig:111 _25 ] [111])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":114 522 {*ashldi3_1}
     (nil))
(insn 57 56 58 6 (parallel [
            (set (reg/f:DI 0 ax [orig:113 _27 ] [113])
                (plus:DI (reg:DI 0 ax [orig:112 _26 ] [112])
                    (reg/f:DI 1 dx [orig:108 _22 ] [108])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":114 218 {*adddi_1}
     (nil))
(insn 58 57 59 6 (set (reg:HI 0 ax [orig:114 _28 ] [114])
        (mem:HI (reg/f:DI 0 ax [orig:113 _27 ] [113]) [6 *_27+0 S2 A16])) "test1.c":114 83 {*movhi_internal}
     (nil))
(insn 59 58 60 6 (set (reg:SI 0 ax [orig:115 _29 ] [115])
        (zero_extend:SI (reg:HI 0 ax [orig:114 _28 ] [114]))) "test1.c":114 137 {*zero_extendhisi2}
     (nil))
(insn 60 59 61 6 (parallel [
            (set (reg:SI 0 ax [orig:116 _30 ] [116])
                (and:SI (reg:SI 0 ax [orig:115 _29 ] [115])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":114 401 {*andsi_1}
     (nil))
(insn 61 60 62 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:116 _30 ] [116])
            (const_int 0 [0]))) "test1.c":114 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 62 61 63 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 79)
            (pc))) "test1.c":114 627 {*jcc_1}
     (nil)
 -> 79)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 117 118 119 120 121 122 132 133
(note 63 62 64 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 7 (set (reg/f:DI 0 ax [132])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 src+0 S8 A64])) "test1.c":116 81 {*movdi_internal}
     (nil))
(insn 65 64 67 7 (set (reg:QI 0 ax [orig:117 _31 ] [117])
        (mem:QI (reg/f:DI 0 ax [132]) [0 *src_41+0 S1 A8])) "test1.c":116 84 {*movqi_internal}
     (nil))
(insn 67 65 68 7 (set (reg:SI 0 ax [orig:119 _33 ] [119])
        (zero_extend:SI (reg:QI 0 ax [orig:118 _32 ] [118]))) "test1.c":116 136 {*zero_extendqisi2}
     (nil))
(insn 68 67 69 7 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:119 _33 ] [119])) "test1.c":116 82 {*movsi_internal}
     (nil))
(call_insn/i 69 68 70 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x7fa517d08d00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) "test1.c":116 676 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 70 69 71 7 (set (reg:SI 2 cx [orig:120 _34 ] [120])
        (reg:SI 0 ax)) "test1.c":116 82 {*movsi_internal}
     (nil))
(insn 71 70 72 7 (set (reg/f:DI 0 ax [orig:121 dst.2_35 ] [121])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 dst+0 S8 A64])) "test1.c":116 81 {*movdi_internal}
     (nil))
(insn 72 71 73 7 (parallel [
            (set (reg:DI 1 dx [133])
                (plus:DI (reg/f:DI 0 ax [orig:121 dst.2_35 ] [121])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":116 218 {*adddi_1}
     (nil))
(insn 73 72 74 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 dst+0 S8 A64])
        (reg:DI 1 dx [133])) "test1.c":116 81 {*movdi_internal}
     (nil))
(insn 74 73 75 7 (set (reg:QI 1 dx [orig:122 _36 ] [122])
        (reg:QI 2 cx [orig:120 _34 ] [120])) "test1.c":116 84 {*movqi_internal}
     (nil))
(insn 75 74 76 7 (set (mem:QI (reg/f:DI 0 ax [orig:121 dst.2_35 ] [121]) [0 *dst.2_35+0 S1 A8])
        (reg:QI 1 dx [orig:122 _36 ] [122])) "test1.c":116 84 {*movqi_internal}
     (nil))
(insn 76 75 116 7 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [3 src+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":117 218 {*adddi_1}
     (nil))
(jump_insn 116 76 117 7 (set (pc)
        (label_ref 99)) 659 {jump}
     (nil)
 -> 99)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 117 116 79)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 134
(code_label 79 117 80 8 25 (nil) [1 uses])
(note 80 79 81 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 82 8 (set (reg/f:DI 0 ax [134])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 src+0 S8 A64])) "test1.c":119 81 {*movdi_internal}
     (nil))
(insn 82 81 83 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [134])
            (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [3 dst+0 S8 A64]))) "test1.c":119 8 {*cmpdi_1}
     (nil))
(jump_insn 83 82 84 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 89)
            (pc))) "test1.c":119 627 {*jcc_1}
     (nil)
 -> 89)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 84 83 85 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 86 9 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [3 src+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":121 218 {*adddi_1}
     (nil))
(insn 86 85 118 9 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [3 dst+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [3 dst+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":122 218 {*adddi_1}
     (nil))
(jump_insn 118 86 119 9 (set (pc)
        (label_ref 99)) 659 {jump}
     (nil)
 -> 99)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 119 118 89)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 123 124 125 135 136
(code_label 89 119 90 10 26 (nil) [1 uses])
(note 90 89 91 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 92 10 (set (reg/f:DI 1 dx [orig:123 src.3_37 ] [123])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 src+0 S8 A64])) "test1.c":126 81 {*movdi_internal}
     (nil))
(insn 92 91 93 10 (parallel [
            (set (reg:DI 0 ax [135])
                (plus:DI (reg/f:DI 1 dx [orig:123 src.3_37 ] [123])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":126 218 {*adddi_1}
     (nil))
(insn 93 92 94 10 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 src+0 S8 A64])
        (reg:DI 0 ax [135])) "test1.c":126 81 {*movdi_internal}
     (nil))
(insn 94 93 95 10 (set (reg/f:DI 0 ax [orig:124 dst.4_38 ] [124])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 dst+0 S8 A64])) "test1.c":126 81 {*movdi_internal}
     (nil))
(insn 95 94 96 10 (parallel [
            (set (reg:DI 2 cx [136])
                (plus:DI (reg/f:DI 0 ax [orig:124 dst.4_38 ] [124])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":126 218 {*adddi_1}
     (nil))
(insn 96 95 97 10 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 dst+0 S8 A64])
        (reg:DI 2 cx [136])) "test1.c":126 81 {*movdi_internal}
     (nil))
(insn 97 96 98 10 (set (reg:QI 1 dx [orig:125 _39 ] [125])
        (mem:QI (reg/f:DI 1 dx [orig:123 src.3_37 ] [123]) [0 *src.3_37+0 S1 A8])) "test1.c":126 84 {*movqi_internal}
     (nil))
(insn 98 97 99 10 (set (mem:QI (reg/f:DI 0 ax [orig:124 dst.4_38 ] [124]) [0 *dst.4_38+0 S1 A8])
        (reg:QI 1 dx [orig:125 _39 ] [125])) "test1.c":126 84 {*movqi_internal}
     (nil))
;;  succ:       11 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;;              5 [100.0%] 
;;              7 [100.0%] 
;;              9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 126 137
(code_label 99 98 100 11 22 (nil) [4 uses])
(note 100 99 101 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 101 100 102 11 (set (reg/f:DI 0 ax [137])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 src+0 S8 A64])) "test1.c":108 81 {*movdi_internal}
     (nil))
(insn 102 101 104 11 (set (reg:QI 0 ax [orig:126 _40 ] [126])
        (mem:QI (reg/f:DI 0 ax [137]) [0 *src_41+0 S1 A8])) "test1.c":108 84 {*movqi_internal}
     (nil))
(insn 104 102 105 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:126 _40 ] [126])
            (const_int 0 [0]))) "test1.c":108 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 105 104 106 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 103)
            (pc))) "test1.c":108 627 {*jcc_1}
     (nil)
 -> 103)
;;  succ:       3
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 1, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 138
(note 106 105 107 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 107 106 108 12 (set (reg/f:DI 0 ax [138])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 dst+0 S8 A64])) "test1.c":129 81 {*movdi_internal}
     (nil))
(insn 108 107 111 12 (set (mem:QI (reg/f:DI 0 ax [138]) [0 *dst_42+0 S1 A8])
        (const_int 0 [0])) "test1.c":129 84 {*movqi_internal}
     (nil))
(insn 111 108 120 12 (const_int 0 [0]) "test1.c":130 694 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 120 111 0 NOTE_INSN_DELETED)

;; Function readFunc (readFunc, funcdef_no=10, decl_uid=3270, cgraph_uid=10, symbol_order=13)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=1040, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=1024, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 16:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 26:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 31:  (0) r  (1) rm  (2) e {*muldi3_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 32:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 34:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 40:  (0) r  (1) rm  (2) e {*muldi3_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 41:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 46:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=113 from oldreg=105, assigning class CREG to r113
      Creating newreg=114 from oldreg=107, assigning class DIREG to r114
   46: {r113:DI=unspec[[r114:DI],r109:QI,0x1,r113:DI] 25;clobber r114:DI;clobber flags:CC;}
      REG_DEAD r109:QI
      REG_DEAD r108:DI
      REG_DEAD r107:DI
      REG_UNUSED r107:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   78: r113:DI=r108:DI
   80: r114:DI=r107:DI
    Inserting insn reload after:
   79: r105:DI=r113:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 48:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 50
	 Choosing alt 0 in insn 50:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) m  (1) rn {*movhi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 54:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 57:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
  BB 3
   Insn 73: point = 0, n_alt = -1
   Insn 18: point = 0, n_alt = 0
   Insn 17: point = 0, n_alt = 1
   Insn 16: point = 0, n_alt = 4
  BB 7
   Insn 68: point = 0, n_alt = 0
   Insn 67: point = 0, n_alt = -2
   Insn 66: point = 1, n_alt = 3
  BB 6
   Insn 64: point = 2, n_alt = -1
   Insn 63: point = 2, n_alt = 0
   Insn 61: point = 3, n_alt = -2
   Insn 60: point = 4, n_alt = 0
   Insn 59: point = 4, n_alt = 1
   Insn 58: point = 4, n_alt = -2
   Insn 57: point = 5, n_alt = 4
   Insn 56: point = 5, n_alt = -2
   Insn 55: point = 6, n_alt = 3
   Insn 54: point = 7, n_alt = 3
  BB 4
   Insn 75: point = 8, n_alt = -1
  BB 2
   Insn 14: point = 8, n_alt = -1
   Insn 13: point = 8, n_alt = 1
   Insn 12: point = 8, n_alt = 5
   Insn 11: point = 9, n_alt = -2
   Insn 10: point = 10, n_alt = 0
   Insn 9: point = 10, n_alt = -2
   Insn 8: point = 11, n_alt = 4
   Insn 7: point = 11, n_alt = 3
   Insn 3: point = 12, n_alt = 1
   Insn 2: point = 12, n_alt = 5
  BB 5
   Insn 51: point = 12, n_alt = 3
   Insn 50: point = 13, n_alt = 0
   Insn 48: point = 15, n_alt = 0
   Insn 47: point = 17, n_alt = 0
   Insn 79: point = 19, n_alt = -2
	Hard reg 0 is preferable by r113 with profit 1
   Insn 46: point = 21, n_alt = 0
   Insn 80: point = 23, n_alt = -2
	Hard reg 4 is preferable by r114 with profit 1
   Insn 78: point = 25, n_alt = -2
	Hard reg 0 is preferable by r113 with profit 1
	Hard reg 2 is preferable by r113 with profit 1
   Insn 45: point = 27, n_alt = 1
   Insn 44: point = 28, n_alt = -2
   Insn 43: point = 30, n_alt = 3
   Insn 49: point = 31, n_alt = -2
   Insn 42: point = 32, n_alt = 0
   Insn 41: point = 34, n_alt = 4
   Insn 40: point = 35, n_alt = 1
   Insn 39: point = 37, n_alt = 0
   Insn 38: point = 39, n_alt = 0
   Insn 37: point = 40, n_alt = 0
   Insn 36: point = 40, n_alt = -2
   Insn 35: point = 41, n_alt = -2
   Insn 34: point = 42, n_alt = 3
   Insn 33: point = 43, n_alt = 0
   Insn 32: point = 45, n_alt = 4
   Insn 31: point = 46, n_alt = 1
   Insn 30: point = 48, n_alt = 0
   Insn 29: point = 50, n_alt = 0
   Insn 28: point = 51, n_alt = 0
   Insn 27: point = 51, n_alt = -2
   Insn 26: point = 52, n_alt = 3
 r87: [40..43]
 r88: [14..32]
 r89: [2..3]
 r90: [14..15]
 r91: [12..13]
 r92: [10..11]
 r93: [8..9]
 r94: [51..52]
 r95: [47..48]
 r96: [49..50]
 r97: [44..46]
 r98: [44..45]
 r99: [41..42]
 r100: [36..37]
 r101: [38..39]
 r102: [33..35]
 r103: [33..34]
 r104: [29..31]
 r105: [18..19]
 r106: [16..17]
 r107: [24..28]
 r108: [26..30]
 r109: [22..27]
 r110: [5..7]
 r111: [4..6]
 r112: [0..1]
 r113: [20..25]
 r114: [21..23]
Compressing live ranges: from 53 to 42 - 79%
Ranges after the compression:
 r87: [32..33]
 r88: [12..25]
 r89: [2..3]
 r90: [12..13]
 r91: [10..11]
 r92: [8..9]
 r93: [6..7]
 r94: [40..41]
 r95: [36..37]
 r96: [38..39]
 r97: [34..35]
 r98: [34..35]
 r99: [32..33]
 r100: [28..29]
 r101: [30..31]
 r102: [26..27]
 r103: [26..27]
 r104: [24..25]
 r105: [16..17]
 r106: [14..15]
 r107: [20..23]
 r108: [22..25]
 r109: [18..23]
 r110: [4..5]
 r111: [4..5]
 r112: [0..1]
 r113: [18..21]
 r114: [18..19]

********** Assignment #1: **********

	 Assigning to 113 (cl=CREG, orig=105, freq=3, tfirst=113, tfreq=3)...
	   Assign 2 to reload r113 (freq=3)
	 Assigning to 114 (cl=DIREG, orig=107, freq=2, tfirst=114, tfreq=2)...
	   Assign 5 to reload r114 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=1040, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=1024, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 33
changing reg in insn 36
changing reg in insn 42
changing reg in insn 49
changing reg in insn 61
changing reg in insn 63
changing reg in insn 48
changing reg in insn 50
changing reg in insn 51
changing reg in insn 7
changing reg in insn 9
changing reg in insn 11
changing reg in insn 12
changing reg in insn 26
changing reg in insn 27
changing reg in insn 30
changing reg in insn 31
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 33
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 39
changing reg in insn 40
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 42
changing reg in insn 41
changing reg in insn 42
changing reg in insn 49
changing reg in insn 44
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 44
changing reg in insn 43
changing reg in insn 45
changing reg in insn 46
changing reg in insn 54
changing reg in insn 56
changing reg in insn 55
changing reg in insn 58
changing reg in insn 66
changing reg in insn 67
deleting insn with uid = 11.
deleting insn with uid = 78.
deleting insn with uid = 56.
deleting insn with uid = 61.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 60.
verify found no changes in insn with uid = 68.


readFunc

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={26d,21u} r1={12d,6u} r2={9d,2u} r4={11d,5u} r5={15d,8u} r6={1d,20u} r7={1d,14u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r17={18d,2u} r18={6d} r19={6d} r20={1d,1u} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={7d} r38={7d} r39={6d} r40={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} 
;;    total ref usage 579{500d,79u,0e} in 53{47 regular + 6 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 92 93
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -1016 [0xfffffffffffffc08])) [3 filename+0 S8 A64])
        (reg:DI 5 di [ filename ])) "test1.c":134 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -1020 [0xfffffffffffffc04])) [1 index+0 S4 A32])
        (reg:SI 4 si [ index ])) "test1.c":134 82 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -1016 [0xfffffffffffffc08])) [3 filename+0 S8 A64])) "test1.c":135 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fa517adce10 *.LC2>)) "test1.c":135 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [92])) "test1.c":135 81 {*movdi_internal}
     (nil))
(call_insn 10 9 12 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7fa517dd2a00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) "test1.c":135 676 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 12 10 13 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [7 fp+0 S8 A64])
        (reg:DI 0 ax [93])) "test1.c":135 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [7 fp+0 S8 A64])
            (const_int 0 [0]))) "test1.c":137 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 14 13 15 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "test1.c":137 627 {*jcc_1}
     (nil)
 -> 21)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 15 14 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7fa517adcea0 *.LC3>)) "test1.c":139 81 {*movdi_internal}
     (nil))
(insn 17 16 18 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":139 84 {*movqi_internal}
     (nil))
(call_insn 18 17 73 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fa517cfff00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":139 676 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(jump_insn 73 18 74 3 (set (pc)
        (label_ref 71)) 659 {jump}
     (nil)
 -> 71)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 74 73 21)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 21 74 22 4 29 (nil) [1 uses])
(note 22 21 75 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 75 22 76 4 (set (pc)
        (label_ref 52)) "test1.c":143 659 {jump}
     (nil)
 -> 52)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 76 75 62)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 90 91 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109
(code_label 62 76 25 5 32 (nil) [1 uses])
(note 25 62 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 5 (parallel [
            (set (reg:DI 0 ax [94])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -1008 [0xfffffffffffffc10])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":145 218 {*adddi_1}
     (nil))
(insn 27 26 28 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [94])) "test1.c":145 81 {*movdi_internal}
     (nil))
(call_insn 28 27 29 5 (call (mem:QI (symbol_ref:DI ("rmPunct2LowerFunc") [flags 0x3]  <function_decl 0x7fa517a7c200 rmPunct2LowerFunc>) [0 rmPunct2LowerFunc S1 A8])
        (const_int 0 [0])) "test1.c":145 665 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 29 28 30 5 (set (reg:SI 0 ax [96])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -1020 [0xfffffffffffffc04])) [1 index+0 S4 A32])) "test1.c":146 82 {*movsi_internal}
     (nil))
(insn 30 29 31 5 (set (reg:DI 0 ax [95])
        (sign_extend:DI (reg:SI 0 ax [96]))) "test1.c":146 145 {*extendsidi2_rex64}
     (nil))
(insn 31 30 32 5 (parallel [
            (set (reg:DI 1 dx [97])
                (mult:DI (reg:DI 0 ax [95])
                    (const_int 5000000 [0x4c4b40])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":146 339 {*muldi3_1}
     (nil))
(insn 32 31 33 5 (set (reg:DI 0 ax [98])
        (symbol_ref:DI ("text") [flags 0x2]  <var_decl 0x7fa517daaea0 text>)) "test1.c":146 81 {*movdi_internal}
     (nil))
(insn 33 32 34 5 (parallel [
            (set (reg/f:DI 1 dx [orig:87 _1 ] [87])
                (plus:DI (reg:DI 1 dx [97])
                    (reg:DI 0 ax [98])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":146 218 {*adddi_1}
     (nil))
(insn 34 33 35 5 (parallel [
            (set (reg:DI 0 ax [99])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -1008 [0xfffffffffffffc10])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":146 218 {*adddi_1}
     (nil))
(insn 35 34 36 5 (set (reg:DI 4 si)
        (reg:DI 0 ax [99])) "test1.c":146 81 {*movdi_internal}
     (nil))
(insn 36 35 37 5 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:87 _1 ] [87])) "test1.c":146 81 {*movdi_internal}
     (nil))
(call_insn 37 36 38 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcat") [flags 0x41]  <function_decl 0x7fa517cf7900 strcat>) [0 __builtin_strcat S1 A8])
            (const_int 0 [0]))) "test1.c":146 676 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 38 37 39 5 (set (reg:SI 0 ax [101])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -1020 [0xfffffffffffffc04])) [1 index+0 S4 A32])) "test1.c":147 82 {*movsi_internal}
     (nil))
(insn 39 38 40 5 (set (reg:DI 0 ax [100])
        (sign_extend:DI (reg:SI 0 ax [101]))) "test1.c":147 145 {*extendsidi2_rex64}
     (nil))
(insn 40 39 41 5 (parallel [
            (set (reg:DI 1 dx [102])
                (mult:DI (reg:DI 0 ax [100])
                    (const_int 5000000 [0x4c4b40])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":147 339 {*muldi3_1}
     (nil))
(insn 41 40 42 5 (set (reg:DI 0 ax [103])
        (symbol_ref:DI ("text") [flags 0x2]  <var_decl 0x7fa517daaea0 text>)) "test1.c":147 81 {*movdi_internal}
     (nil))
(insn 42 41 49 5 (parallel [
            (set (reg/f:DI 1 dx [orig:88 _2 ] [88])
                (plus:DI (reg:DI 1 dx [102])
                    (reg:DI 0 ax [103])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":147 218 {*adddi_1}
     (nil))
(insn 49 42 43 5 (set (reg:DI 0 ax [104])
        (reg/f:DI 1 dx [orig:88 _2 ] [88])) "test1.c":147 81 {*movdi_internal}
     (nil))
(insn 43 49 44 5 (set (reg:DI 2 cx [108])
        (const_int -1 [0xffffffffffffffff])) "test1.c":147 81 {*movdi_internal}
     (nil))
(insn 44 43 45 5 (set (reg:DI 4 si [107])
        (reg:DI 0 ax [104])) "test1.c":147 81 {*movdi_internal}
     (nil))
(insn 45 44 80 5 (set (reg:QI 0 ax [109])
        (const_int 0 [0])) "test1.c":147 84 {*movqi_internal}
     (nil))
(insn 80 45 46 5 (set (reg:DI 5 di [107])
        (reg:DI 4 si [107])) "test1.c":147 81 {*movdi_internal}
     (nil))
(insn 46 80 79 5 (parallel [
            (set (reg:DI 2 cx [105])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [107]) [0  A8])
                        (reg:QI 0 ax [109])
                        (const_int 1 [0x1])
                        (reg:DI 2 cx [105])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [107]))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":147 968 {*strlenqi_1}
     (nil))
(insn 79 46 47 5 (set (reg:DI 0 ax [105])
        (reg:DI 2 cx [105])) "test1.c":147 81 {*movdi_internal}
     (nil))
(insn 47 79 48 5 (set (reg:DI 0 ax [106])
        (not:DI (reg:DI 0 ax [105]))) "test1.c":147 505 {*one_cmpldi2_1}
     (nil))
(insn 48 47 50 5 (parallel [
            (set (reg:DI 0 ax [orig:90 _16 ] [90])
                (plus:DI (reg:DI 0 ax [106])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":147 218 {*adddi_1}
     (nil))
(insn 50 48 51 5 (parallel [
            (set (reg/f:DI 0 ax [orig:91 _17 ] [91])
                (plus:DI (reg:DI 0 ax [orig:90 _16 ] [90])
                    (reg/f:DI 1 dx [orig:88 _2 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":147 218 {*adddi_1}
     (nil))
(insn 51 50 52 5 (set (mem:HI (reg/f:DI 0 ax [orig:91 _17 ] [91]) [0 MEM[(void *)_17]+0 S2 A8])
        (const_int 32 [0x20])) "test1.c":147 83 {*movhi_internal}
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 110 111
(code_label 52 51 53 6 31 (nil) [1 uses])
(note 53 52 54 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 6 (parallel [
            (set (reg:DI 1 dx [110])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -1008 [0xfffffffffffffc10])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":143 218 {*adddi_1}
     (nil))
(insn 55 54 57 6 (set (reg:DI 0 ax [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [7 fp+0 S8 A64])) "test1.c":143 81 {*movdi_internal}
     (nil))
(insn 57 55 58 6 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7fa517adcf30 *.LC4>)) "test1.c":143 81 {*movdi_internal}
     (nil))
(insn 58 57 59 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [111])) "test1.c":143 81 {*movdi_internal}
     (nil))
(insn 59 58 60 6 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":143 84 {*movqi_internal}
     (nil))
(call_insn 60 59 63 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_fscanf") [flags 0x41]  <function_decl 0x7fa517cff900 fscanf>) [0 __builtin_fscanf S1 A8])
            (const_int 0 [0]))) "test1.c":143 676 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 63 60 64 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:89 _3 ] [89])
            (const_int 1 [0x1]))) "test1.c":143 7 {*cmpsi_1}
     (nil))
(jump_insn 64 63 65 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 62)
            (pc))) "test1.c":143 627 {*jcc_1}
     (nil)
 -> 62)
;;  succ:       5
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 112
(note 65 64 66 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 7 (set (reg:DI 0 ax [112])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [7 fp+0 S8 A64])) "test1.c":149 81 {*movdi_internal}
     (nil))
(insn 67 66 68 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [112])) "test1.c":149 81 {*movdi_internal}
     (nil))
(call_insn 68 67 71 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7fa517dd2700 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) "test1.c":149 676 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              3 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 71 68 72 8 28 (nil) [1 uses])
(note 72 71 77 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 77 72 0 NOTE_INSN_DELETED)

;; Function mapperFunc (mapperFunc, funcdef_no=11, decl_uid=3278, cgraph_uid=11, symbol_order=14)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 8:  (0) r  (1) rm  (2) e {*muldi3_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 9:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 10
	 Choosing alt 0 in insn 10:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 45:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 49:  (0) r  (1) i {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 50:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 53:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) ?mr {*cmpdi_ccno_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 62: point = 0, n_alt = -1
  BB 7
   Insn 58: point = 0, n_alt = -1
   Insn 57: point = 0, n_alt = 1
  BB 2
   Insn 63: point = 0, n_alt = -1
   Insn 15: point = 0, n_alt = 5
   Insn 14: point = 1, n_alt = -2
   Insn 13: point = 2, n_alt = 0
   Insn 12: point = 2, n_alt = -2
   Insn 11: point = 3, n_alt = 4
   Insn 10: point = 3, n_alt = 0
   Insn 9: point = 5, n_alt = 4
   Insn 8: point = 6, n_alt = 1
   Insn 7: point = 8, n_alt = 0
   Insn 6: point = 10, n_alt = 0
   Insn 2: point = 11, n_alt = 1
  BB 6
   Insn 53: point = 11, n_alt = 5
   Insn 52: point = 12, n_alt = -2
   Insn 51: point = 13, n_alt = 0
   Insn 50: point = 13, n_alt = 2
   Insn 49: point = 13, n_alt = 4
  BB 4
   Insn 65: point = 13, n_alt = -1
   Insn 33: point = 13, n_alt = 0
   Insn 32: point = 13, n_alt = -2
   Insn 31: point = 14, n_alt = 0
   Insn 30: point = 14, n_alt = -2
   Insn 29: point = 15, n_alt = 3
   Insn 28: point = 16, n_alt = 0
  BB 5
   Insn 46: point = 17, n_alt = 1
   Insn 45: point = 18, n_alt = 0
   Insn 44: point = 20, n_alt = 0
   Insn 43: point = 21, n_alt = -2
   Insn 42: point = 22, n_alt = 0
   Insn 41: point = 22, n_alt = -2
   Insn 40: point = 23, n_alt = -2
   Insn 39: point = 24, n_alt = 3
   Insn 38: point = 25, n_alt = 0
  BB 3
   Insn 26: point = 26, n_alt = -1
   Insn 25: point = 26, n_alt = 0
   Insn 24: point = 27, n_alt = -2
   Insn 23: point = 28, n_alt = 0
   Insn 22: point = 28, n_alt = -2
   Insn 21: point = 29, n_alt = -2
   Insn 20: point = 30, n_alt = 3
   Insn 19: point = 31, n_alt = 0
 r87: [2..3]
 r88: [26..27]
 r89: [17..21]
 r90: [19..20]
 r91: [17..18]
 r92: [7..8]
 r93: [9..10]
 r94: [4..6]
 r95: [4..5]
 r96: [0..1]
 r97: [29..31]
 r98: [28..30]
 r99: [14..16]
 r100: [13..15]
 r101: [23..25]
 r102: [22..24]
 r103: [11..12]
Compressing live ranges: from 32 to 24 - 75%
Ranges after the compression:
 r87: [2..3]
 r88: [20..21]
 r89: [14..17]
 r90: [16..17]
 r91: [14..15]
 r92: [6..7]
 r93: [8..9]
 r94: [4..5]
 r95: [4..5]
 r96: [0..1]
 r97: [22..23]
 r98: [22..23]
 r99: [12..13]
 r100: [12..13]
 r101: [18..19]
 r102: [18..19]
 r103: [10..11]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 10
changing reg in insn 12
changing reg in insn 24
changing reg in insn 25
changing reg in insn 43
changing reg in insn 46
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 7
changing reg in insn 8
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 14
changing reg in insn 15
changing reg in insn 19
changing reg in insn 21
changing reg in insn 20
changing reg in insn 22
changing reg in insn 28
changing reg in insn 30
changing reg in insn 29
changing reg in insn 32
changing reg in insn 38
changing reg in insn 40
changing reg in insn 39
changing reg in insn 41
changing reg in insn 52
changing reg in insn 53
deleting insn with uid = 14.
deleting insn with uid = 24.
deleting insn with uid = 30.
deleting insn with uid = 43.
deleting insn with uid = 52.
starting the processing of deferred insns
ending the processing of deferred insns


mapperFunc

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={13d,12u} r1={12d,6u} r2={6d} r4={11d,5u} r5={11d,6u} r6={1d,19u} r7={1d,13u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={10d,2u} r18={5d} r19={5d} r20={1d,1u} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={6d} r38={6d} r39={5d} r40={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} 
;;    total ref usage 470{406d,64u,0e} in 39{34 regular + 5 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 92 93 94 95 96
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 index+0 S4 A32])
        (reg:SI 5 di [ index ])) "test1.c":155 82 {*movsi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 0 ax [93])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 index+0 S4 A32])) "test1.c":157 82 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 0 ax [92])
        (sign_extend:DI (reg:SI 0 ax [93]))) "test1.c":157 145 {*extendsidi2_rex64}
     (nil))
(insn 8 7 9 2 (parallel [
            (set (reg:DI 1 dx [94])
                (mult:DI (reg:DI 0 ax [92])
                    (const_int 5000000 [0x4c4b40])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":157 339 {*muldi3_1}
     (nil))
(insn 9 8 10 2 (set (reg:DI 0 ax [95])
        (symbol_ref:DI ("text") [flags 0x2]  <var_decl 0x7fa517daaea0 text>)) "test1.c":157 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (parallel [
            (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
                (plus:DI (reg:DI 0 ax [95])
                    (reg:DI 1 dx [94])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":157 218 {*adddi_1}
     (nil))
(insn 11 10 12 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7fa517aea630 *.LC5>)) "test1.c":157 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "test1.c":157 81 {*movdi_internal}
     (nil))
(call_insn 13 12 15 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7fa517dee000 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) "test1.c":157 676 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 15 13 63 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 nextWord+0 S8 A64])
        (reg:DI 0 ax [96])) "test1.c":157 81 {*movdi_internal}
     (nil))
(jump_insn 63 15 64 2 (set (pc)
        (label_ref 54)) "test1.c":158 659 {jump}
     (nil)
 -> 54)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 64 63 56)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 97 98
(code_label 56 64 18 3 37 (nil) [1 uses])
(note 18 56 19 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 3 (set (reg:SI 1 dx [97])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 index+0 S4 A32])) "test1.c":162 82 {*movsi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 nextWord+0 S8 A64])) "test1.c":162 81 {*movdi_internal}
     (nil))
(insn 21 20 22 3 (set (reg:SI 4 si)
        (reg:SI 1 dx [97])) "test1.c":162 82 {*movsi_internal}
     (nil))
(insn 22 21 23 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [98])) "test1.c":162 81 {*movdi_internal}
     (nil))
(call_insn 23 22 25 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("hashTableLookupFunc") [flags 0x3]  <function_decl 0x7fa517a72e00 hashTableLookupFunc>) [0 hashTableLookupFunc S1 A8])
            (const_int 0 [0]))) "test1.c":162 676 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 25 23 26 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:88 _2 ] [88])
            (const_int 0 [0]))) "test1.c":162 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 26 25 27 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) "test1.c":162 627 {*jcc_1}
     (nil)
 -> 36)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 99 100
(note 27 26 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 4 (set (reg:SI 1 dx [99])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 index+0 S4 A32])) "test1.c":164 82 {*movsi_internal}
     (nil))
(insn 29 28 31 4 (set (reg:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 nextWord+0 S8 A64])) "test1.c":164 81 {*movdi_internal}
     (nil))
(insn 31 29 32 4 (set (reg:SI 4 si)
        (const_int 1 [0x1])) "test1.c":164 82 {*movsi_internal}
     (nil))
(insn 32 31 33 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [100])) "test1.c":164 81 {*movdi_internal}
     (nil))
(call_insn 33 32 65 4 (call (mem:QI (symbol_ref:DI ("hashTableInsertFunc") [flags 0x3]  <function_decl 0x7fa517a72c00 hashTableInsertFunc>) [0 hashTableInsertFunc S1 A8])
        (const_int 0 [0])) "test1.c":164 665 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(jump_insn 65 33 66 4 (set (pc)
        (label_ref 47)) 659 {jump}
     (nil)
 -> 47)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 66 65 36)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 91 101 102
(code_label 36 66 37 5 35 (nil) [1 uses])
(note 37 36 38 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 5 (set (reg:SI 1 dx [101])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 index+0 S4 A32])) "test1.c":168 82 {*movsi_internal}
     (nil))
(insn 39 38 40 5 (set (reg:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 nextWord+0 S8 A64])) "test1.c":168 81 {*movdi_internal}
     (nil))
(insn 40 39 41 5 (set (reg:SI 4 si)
        (reg:SI 1 dx [101])) "test1.c":168 82 {*movsi_internal}
     (nil))
(insn 41 40 42 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [102])) "test1.c":168 81 {*movdi_internal}
     (nil))
(call_insn 42 41 44 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("hashTableLookupFunc") [flags 0x3]  <function_decl 0x7fa517a72e00 hashTableLookupFunc>) [0 hashTableLookupFunc S1 A8])
            (const_int 0 [0]))) "test1.c":168 676 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 44 42 45 5 (set (reg:SI 1 dx [orig:90 _4 ] [90])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:89 _3 ] [89])
                (const_int 8 [0x8])) [1 _3->Value+0 S4 A64])) "test1.c":168 82 {*movsi_internal}
     (nil))
(insn 45 44 46 5 (parallel [
            (set (reg:SI 1 dx [orig:91 _5 ] [91])
                (plus:SI (reg:SI 1 dx [orig:90 _4 ] [90])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":168 217 {*addsi_1}
     (nil))
(insn 46 45 47 5 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:89 _3 ] [89])
                (const_int 8 [0x8])) [1 _3->Value+0 S4 A64])
        (reg:SI 1 dx [orig:91 _5 ] [91])) "test1.c":168 82 {*movsi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 103
(code_label 47 46 48 6 36 (nil) [1 uses])
(note 48 47 49 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 6 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7fa517aea630 *.LC5>)) "test1.c":170 81 {*movdi_internal}
     (nil))
(insn 50 49 51 6 (set (reg:DI 5 di)
        (const_int 0 [0])) "test1.c":170 81 {*movdi_internal}
     (nil))
(call_insn 51 50 53 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7fa517dee000 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) "test1.c":170 676 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 53 51 54 6 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 nextWord+0 S8 A64])
        (reg:DI 0 ax [103])) "test1.c":170 81 {*movdi_internal}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 54 53 55 7 34 (nil) [1 uses])
(note 55 54 57 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 57 55 58 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [3 nextWord+0 S8 A64])
            (const_int 0 [0]))) "test1.c":158 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 58 57 59 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 56)
            (pc))) "test1.c":158 627 {*jcc_1}
     (nil)
 -> 56)
;;  succ:       3
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 59 58 62 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 62 59 67 8 (const_int 0 [0]) "test1.c":173 694 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 67 62 0 NOTE_INSN_DELETED)

;; Function reducerFunc (reducerFunc, funcdef_no=12, decl_uid=3285, cgraph_uid=12, symbol_order=15)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 18:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 19
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 30:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 31
	 Choosing alt 0 in insn 31:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 33:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 35:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 71
	 Choosing alt 0 in insn 71:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 77:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) ?mr {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 85:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 92:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 97:  (0) r  (1) rm {*cmpsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15

********** Pseudo live ranges #1: **********

  BB 15
   Insn 102: point = 0, n_alt = -1
  BB 14
   Insn 98: point = 0, n_alt = -1
   Insn 97: point = 0, n_alt = 1
   Insn 96: point = 1, n_alt = 0
  BB 2
   Insn 103: point = 2, n_alt = -1
   Insn 6: point = 2, n_alt = 1
   Insn 2: point = 2, n_alt = 1
  BB 13
   Insn 92: point = 2, n_alt = 1
  BB 12
   Insn 90: point = 2, n_alt = -1
   Insn 89: point = 2, n_alt = 0
  BB 3
   Insn 105: point = 2, n_alt = -1
   Insn 10: point = 2, n_alt = 1
  BB 11
   Insn 85: point = 2, n_alt = 1
  BB 10
   Insn 82: point = 2, n_alt = -1
   Insn 81: point = 2, n_alt = 1
  BB 5
   Insn 107: point = 2, n_alt = -1
   Insn 35: point = 2, n_alt = 5
   Insn 34: point = 3, n_alt = 3
   Insn 33: point = 5, n_alt = 4
   Insn 32: point = 6, n_alt = 1
   Insn 31: point = 8, n_alt = 0
   Insn 30: point = 10, n_alt = 1
   Insn 29: point = 12, n_alt = 1
   Insn 28: point = 14, n_alt = 0
   Insn 27: point = 15, n_alt = 0
   Insn 26: point = 17, n_alt = 0
  BB 9
   Insn 77: point = 18, n_alt = 5
   Insn 76: point = 19, n_alt = 3
   Insn 75: point = 21, n_alt = 3
  BB 7
   Insn 109: point = 22, n_alt = -1
   Insn 55: point = 22, n_alt = 0
   Insn 54: point = 22, n_alt = -2
   Insn 53: point = 23, n_alt = -2
   Insn 52: point = 24, n_alt = 0
   Insn 51: point = 24, n_alt = 3
   Insn 50: point = 26, n_alt = 3
   Insn 49: point = 27, n_alt = 0
   Insn 48: point = 29, n_alt = 3
  BB 8
   Insn 72: point = 30, n_alt = 1
   Insn 71: point = 31, n_alt = 0
   Insn 70: point = 33, n_alt = 0
   Insn 69: point = 34, n_alt = 0
   Insn 68: point = 35, n_alt = -2
   Insn 67: point = 36, n_alt = 0
   Insn 66: point = 36, n_alt = -2
   Insn 65: point = 37, n_alt = 0
   Insn 64: point = 37, n_alt = 3
   Insn 63: point = 39, n_alt = 3
   Insn 62: point = 40, n_alt = 1
   Insn 61: point = 41, n_alt = 0
   Insn 60: point = 43, n_alt = 3
  BB 6
   Insn 46: point = 44, n_alt = -1
   Insn 45: point = 44, n_alt = 0
   Insn 44: point = 45, n_alt = -2
   Insn 43: point = 46, n_alt = 0
   Insn 42: point = 46, n_alt = -2
   Insn 41: point = 47, n_alt = 0
   Insn 40: point = 47, n_alt = 3
   Insn 39: point = 49, n_alt = 3
  BB 4
   Insn 24: point = 50, n_alt = -1
   Insn 23: point = 50, n_alt = 0
   Insn 22: point = 51, n_alt = 3
   Insn 21: point = 53, n_alt = 4
   Insn 20: point = 54, n_alt = 1
   Insn 19: point = 56, n_alt = 0
   Insn 18: point = 58, n_alt = 1
   Insn 17: point = 60, n_alt = 1
   Insn 16: point = 62, n_alt = 0
   Insn 15: point = 63, n_alt = 0
   Insn 14: point = 65, n_alt = 0
 r87: [50..51]
 r88: [46..47]
 r89: [44..45]
 r90: [23..27]
 r91: [22..24]
 r92: [36..37]
 r93: [32..34]
 r94: [30..31]
 r95: [30..35]
 r96: [57..63]
 r97: [64..65]
 r98: [59..60]
 r99: [61..62]
 r100: [57..58]
 r101: [55..56]
 r102: [52..54]
 r103: [52..53]
 r104: [9..15]
 r105: [16..17]
 r106: [11..12]
 r107: [13..14]
 r108: [9..10]
 r109: [7..8]
 r110: [4..6]
 r111: [4..5]
 r112: [2..3]
 r113: [48..49]
 r114: [28..29]
 r115: [25..26]
 r116: [42..43]
 r117: [40..41]
 r118: [38..39]
 r119: [32..33]
 r120: [20..21]
 r121: [18..19]
 r122: [0..1]
Compressing live ranges: from 66 to 58 - 87%
Ranges after the compression:
 r87: [44..45]
 r88: [40..41]
 r89: [38..39]
 r90: [20..23]
 r91: [20..21]
 r92: [30..31]
 r93: [28..29]
 r94: [26..27]
 r95: [26..29]
 r96: [50..55]
 r97: [56..57]
 r98: [52..53]
 r99: [54..55]
 r100: [50..51]
 r101: [48..49]
 r102: [46..47]
 r103: [46..47]
 r104: [8..13]
 r105: [14..15]
 r106: [10..11]
 r107: [12..13]
 r108: [8..9]
 r109: [6..7]
 r110: [4..5]
 r111: [4..5]
 r112: [2..3]
 r113: [42..43]
 r114: [24..25]
 r115: [22..23]
 r116: [36..37]
 r117: [34..35]
 r118: [32..33]
 r119: [28..29]
 r120: [18..19]
 r121: [16..17]
 r122: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 22
changing reg in insn 23
changing reg in insn 40
changing reg in insn 42
changing reg in insn 44
changing reg in insn 45
changing reg in insn 49
changing reg in insn 53
changing reg in insn 51
changing reg in insn 54
changing reg in insn 64
changing reg in insn 66
changing reg in insn 69
changing reg in insn 71
changing reg in insn 71
changing reg in insn 72
changing reg in insn 68
changing reg in insn 72
changing reg in insn 69
changing reg in insn 15
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 22
changing reg in insn 21
changing reg in insn 22
changing reg in insn 27
changing reg in insn 26
changing reg in insn 27
changing reg in insn 29
changing reg in insn 30
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 34
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 39
changing reg in insn 40
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 70
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 77
changing reg in insn 96
changing reg in insn 97
deleting insn with uid = 44.
deleting insn with uid = 68.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 43.
verify found no changes in insn with uid = 55.
verify found no changes in insn with uid = 67.


reducerFunc

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={26d,25u} r1={15d,11u} r2={6d,2u,1e} r4={7d,3u} r5={7d,4u} r6={1d,40u} r7={1d,18u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={17d,5u} r18={3d} r19={3d} r20={1d,1u,1e} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 400{289d,109u,2e} in 68{65 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 reduceCount+0 S4 A32])
        (reg:SI 5 di [ reduceCount ])) "test1.c":176 82 {*movsi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 103 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 0 [0])) "test1.c":179 82 {*movsi_internal}
     (nil))
(jump_insn 103 6 104 2 (set (pc)
        (label_ref 93)) "test1.c":179 659 {jump}
     (nil)
 -> 93)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 104 103 95)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       14
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 95 104 9 3 47 (nil) [1 uses])
(note 9 95 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 105 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
        (const_int 0 [0])) "test1.c":181 82 {*movsi_internal}
     (nil))
(jump_insn 105 10 106 3 (set (pc)
        (label_ref 86)) "test1.c":181 659 {jump}
     (nil)
 -> 86)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 106 105 88)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       12
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 96 97 98 99 100 101 102 103
(code_label 88 106 13 4 46 (nil) [1 uses])
(note 13 88 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 4 (set (reg:SI 0 ax [97])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "test1.c":184 82 {*movsi_internal}
     (nil))
(insn 15 14 16 4 (set (reg:DI 0 ax [96])
        (sign_extend:DI (reg:SI 0 ax [97]))) "test1.c":184 145 {*extendsidi2_rex64}
     (nil))
(insn 16 15 17 4 (set (reg:SI 1 dx [99])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "test1.c":184 82 {*movsi_internal}
     (nil))
(insn 17 16 18 4 (set (reg:DI 1 dx [98])
        (sign_extend:DI (reg:SI 1 dx [99]))) "test1.c":184 145 {*extendsidi2_rex64}
     (nil))
(insn 18 17 19 4 (parallel [
            (set (reg:DI 1 dx [100])
                (mult:DI (reg:DI 1 dx [98])
                    (const_int 100000 [0x186a0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":184 339 {*muldi3_1}
     (nil))
(insn 19 18 20 4 (parallel [
            (set (reg:DI 0 ax [101])
                (plus:DI (reg:DI 0 ax [96])
                    (reg:DI 1 dx [100])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":184 218 {*adddi_1}
     (nil))
(insn 20 19 21 4 (parallel [
            (set (reg:DI 1 dx [102])
                (ashift:DI (reg:DI 0 ax [101])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":184 522 {*ashldi3_1}
     (nil))
(insn 21 20 22 4 (set (reg:DI 0 ax [103])
        (symbol_ref:DI ("hashTable") [flags 0x2]  <var_decl 0x7fa517a76000 hashTable>)) "test1.c":184 81 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f:DI (plus:DI (reg:DI 1 dx [102])
                (reg:DI 0 ax [103])) [2 hashTable S8 A64])) "test1.c":184 81 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:87 _1 ] [87])
            (const_int 0 [0]))) "test1.c":184 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 24 23 25 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 83)
            (pc))) "test1.c":184 627 {*jcc_1}
     (nil)
 -> 83)
;;  succ:       5 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 104 105 106 107 108 109 110 111 112
(note 25 24 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 5 (set (reg:SI 0 ax [105])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])) "test1.c":186 82 {*movsi_internal}
     (nil))
(insn 27 26 28 5 (set (reg:DI 0 ax [104])
        (sign_extend:DI (reg:SI 0 ax [105]))) "test1.c":186 145 {*extendsidi2_rex64}
     (nil))
(insn 28 27 29 5 (set (reg:SI 1 dx [107])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "test1.c":186 82 {*movsi_internal}
     (nil))
(insn 29 28 30 5 (set (reg:DI 1 dx [106])
        (sign_extend:DI (reg:SI 1 dx [107]))) "test1.c":186 145 {*extendsidi2_rex64}
     (nil))
(insn 30 29 31 5 (parallel [
            (set (reg:DI 1 dx [108])
                (mult:DI (reg:DI 1 dx [106])
                    (const_int 100000 [0x186a0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":186 339 {*muldi3_1}
     (nil))
(insn 31 30 32 5 (parallel [
            (set (reg:DI 0 ax [109])
                (plus:DI (reg:DI 0 ax [104])
                    (reg:DI 1 dx [108])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":186 218 {*adddi_1}
     (nil))
(insn 32 31 33 5 (parallel [
            (set (reg:DI 1 dx [110])
                (ashift:DI (reg:DI 0 ax [109])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":186 522 {*ashldi3_1}
     (nil))
(insn 33 32 34 5 (set (reg:DI 0 ax [111])
        (symbol_ref:DI ("hashTable") [flags 0x2]  <var_decl 0x7fa517a76000 hashTable>)) "test1.c":186 81 {*movdi_internal}
     (nil))
(insn 34 33 35 5 (set (reg/f:DI 0 ax [112])
        (mem/f:DI (plus:DI (reg:DI 1 dx [110])
                (reg:DI 0 ax [111])) [2 hashTable S8 A64])) "test1.c":186 81 {*movdi_internal}
     (nil))
(insn 35 34 107 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 pHead+0 S8 A64])
        (reg/f:DI 0 ax [112])) "test1.c":186 81 {*movdi_internal}
     (nil))
(jump_insn 107 35 108 5 (set (pc)
        (label_ref 78)) "test1.c":187 659 {jump}
     (nil)
 -> 78)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 108 107 80)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       10
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 89 113
(code_label 80 108 38 6 45 (nil) [1 uses])
(note 38 80 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 6 (set (reg/f:DI 0 ax [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 pHead+0 S8 A64])) "test1.c":189 81 {*movdi_internal}
     (nil))
(insn 40 39 41 6 (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
        (mem/f:DI (reg/f:DI 0 ax [113]) [3 pHead_11->Key+0 S8 A64])) "test1.c":189 81 {*movdi_internal}
     (nil))
(insn 41 40 42 6 (set (reg:SI 4 si)
        (const_int 100 [0x64])) "test1.c":189 82 {*movsi_internal}
     (nil))
(insn 42 41 43 6 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 _2 ] [88])) "test1.c":189 81 {*movdi_internal}
     (nil))
(call_insn 43 42 45 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("hashTableLookupFunc") [flags 0x3]  <function_decl 0x7fa517a72e00 hashTableLookupFunc>) [0 hashTableLookupFunc S1 A8])
            (const_int 0 [0]))) "test1.c":189 676 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 45 43 46 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:89 _3 ] [89])
            (const_int 0 [0]))) "test1.c":189 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 46 45 47 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 58)
            (pc))) "test1.c":189 627 {*jcc_1}
     (nil)
 -> 58)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 90 91 114 115
(note 47 46 48 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 7 (set (reg/f:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 pHead+0 S8 A64])) "test1.c":190 81 {*movdi_internal}
     (nil))
(insn 49 48 50 7 (set (reg:SI 2 cx [orig:90 _4 ] [90])
        (mem:SI (plus:DI (reg/f:DI 0 ax [114])
                (const_int 8 [0x8])) [1 pHead_11->Value+0 S4 A64])) "test1.c":190 82 {*movsi_internal}
     (nil))
(insn 50 49 51 7 (set (reg/f:DI 0 ax [115])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 pHead+0 S8 A64])) "test1.c":190 81 {*movdi_internal}
     (nil))
(insn 51 50 52 7 (set (reg/f:DI 0 ax [orig:91 _5 ] [91])
        (mem/f:DI (reg/f:DI 0 ax [115]) [3 pHead_11->Key+0 S8 A64])) "test1.c":190 81 {*movdi_internal}
     (nil))
(insn 52 51 53 7 (set (reg:SI 1 dx)
        (const_int 100 [0x64])) "test1.c":190 82 {*movsi_internal}
     (nil))
(insn 53 52 54 7 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:90 _4 ] [90])) "test1.c":190 82 {*movsi_internal}
     (nil))
(insn 54 53 55 7 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:91 _5 ] [91])) "test1.c":190 81 {*movdi_internal}
     (nil))
(call_insn 55 54 109 7 (call (mem:QI (symbol_ref:DI ("hashTableInsertFunc") [flags 0x3]  <function_decl 0x7fa517a72c00 hashTableInsertFunc>) [0 hashTableInsertFunc S1 A8])
        (const_int 0 [0])) "test1.c":190 665 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(jump_insn 109 55 110 7 (set (pc)
        (label_ref 73)) 659 {jump}
     (nil)
 -> 73)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 110 109 58)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 92 93 94 95 116 117 118 119
(code_label 58 110 59 8 43 (nil) [1 uses])
(note 59 58 60 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 8 (set (reg/f:DI 0 ax [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 pHead+0 S8 A64])) "test1.c":193 81 {*movdi_internal}
     (nil))
(insn 61 60 62 8 (set (reg:SI 0 ax [117])
        (mem:SI (plus:DI (reg/f:DI 0 ax [116])
                (const_int 8 [0x8])) [1 pHead_11->Value+0 S4 A64])) "test1.c":193 82 {*movsi_internal}
     (nil))
(insn 62 61 63 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 val+0 S4 A32])
        (reg:SI 0 ax [117])) "test1.c":193 82 {*movsi_internal}
     (nil))
(insn 63 62 64 8 (set (reg/f:DI 0 ax [118])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 pHead+0 S8 A64])) "test1.c":194 81 {*movdi_internal}
     (nil))
(insn 64 63 65 8 (set (reg/f:DI 0 ax [orig:92 _6 ] [92])
        (mem/f:DI (reg/f:DI 0 ax [118]) [3 pHead_11->Key+0 S8 A64])) "test1.c":194 81 {*movdi_internal}
     (nil))
(insn 65 64 66 8 (set (reg:SI 4 si)
        (const_int 100 [0x64])) "test1.c":194 82 {*movsi_internal}
     (nil))
(insn 66 65 67 8 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:92 _6 ] [92])) "test1.c":194 81 {*movdi_internal}
     (nil))
(call_insn 67 66 69 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("hashTableLookupFunc") [flags 0x3]  <function_decl 0x7fa517a72e00 hashTableLookupFunc>) [0 hashTableLookupFunc S1 A8])
            (const_int 0 [0]))) "test1.c":194 676 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 69 67 70 8 (set (reg:SI 2 cx [orig:93 _7 ] [93])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:95 _26 ] [95])
                (const_int 8 [0x8])) [1 _26->Value+0 S4 A64])) "test1.c":194 82 {*movsi_internal}
     (nil))
(insn 70 69 71 8 (set (reg:SI 1 dx [119])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 val+0 S4 A32])) "test1.c":194 82 {*movsi_internal}
     (nil))
(insn 71 70 72 8 (parallel [
            (set (reg:SI 1 dx [orig:94 _8 ] [94])
                (plus:SI (reg:SI 1 dx [119])
                    (reg:SI 2 cx [orig:93 _7 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":194 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 2 cx [orig:93 _7 ] [93])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [1 val+0 S4 A32]))
        (nil)))
(insn 72 71 73 8 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:95 _26 ] [95])
                (const_int 8 [0x8])) [1 _26->Value+0 S4 A64])
        (reg:SI 1 dx [orig:94 _8 ] [94])) "test1.c":194 82 {*movsi_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              7 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 120 121
(code_label 73 72 74 9 44 (nil) [1 uses])
(note 74 73 75 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 9 (set (reg/f:DI 0 ax [120])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 pHead+0 S8 A64])) "test1.c":196 81 {*movdi_internal}
     (nil))
(insn 76 75 77 9 (set (reg/f:DI 0 ax [121])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [120])
                (const_int 16 [0x10])) [2 pHead_11->pNext+0 S8 A64])) "test1.c":196 81 {*movdi_internal}
     (nil))
(insn 77 76 78 9 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 pHead+0 S8 A64])
        (reg/f:DI 0 ax [121])) "test1.c":196 81 {*movdi_internal}
     (nil))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              5 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 78 77 79 10 42 (nil) [1 uses])
(note 79 78 81 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 81 79 82 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [2 pHead+0 S8 A64])
            (const_int 0 [0]))) "test1.c":187 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 82 81 83 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 80)
            (pc))) "test1.c":187 627 {*jcc_1}
     (nil)
 -> 80)
;;  succ:       6
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       4
;;              10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 83 82 84 11 41 (nil) [1 uses])
(note 84 83 85 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 86 11 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":181 217 {*addsi_1}
     (nil))
;;  succ:       12 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 86 85 87 12 40 (nil) [1 uses])
(note 87 86 89 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 89 87 90 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [1 j+0 S4 A32])
            (const_int 99999 [0x1869f]))) "test1.c":181 7 {*cmpsi_1}
     (nil))
(jump_insn 90 89 91 12 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 88)
            (pc))) "test1.c":181 627 {*jcc_1}
     (nil)
 -> 88)
;;  succ:       4
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 91 90 92 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 92 91 93 13 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":179 217 {*addsi_1}
     (nil))
;;  succ:       14 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 122
(code_label 93 92 94 14 39 (nil) [1 uses])
(note 94 93 96 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 96 94 97 14 (set (reg:SI 0 ax [122])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "test1.c":179 82 {*movsi_internal}
     (nil))
(insn 97 96 98 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [122])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [1 reduceCount+0 S4 A32]))) "test1.c":179 7 {*cmpsi_1}
     (nil))
(jump_insn 98 97 99 14 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 95)
            (pc))) "test1.c":179 627 {*jcc_1}
     (nil)
 -> 95)
;;  succ:       3
;;              15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 1, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 99 98 102 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 102 99 111 15 (const_int 0 [0]) "test1.c":201 694 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 111 102 0 NOTE_INSN_DELETED)

;; Function writerFunc (writerFunc, funcdef_no=13, decl_uid=3301, cgraph_uid=13, symbol_order=16)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 8:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 9:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 20:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 27:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 29:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 31:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 42:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 48:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) ?mr {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 56:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) rm  (1) re {*cmpsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9

********** Pseudo live ranges #1: **********

  BB 9
   Insn 65: point = 0, n_alt = -1
  BB 8
   Insn 61: point = 0, n_alt = -1
   Insn 60: point = 0, n_alt = 0
  BB 2
   Insn 66: point = 0, n_alt = -1
   Insn 12: point = 0, n_alt = 1
   Insn 11: point = 0, n_alt = 0
   Insn 10: point = 0, n_alt = 4
   Insn 9: point = 0, n_alt = 2
   Insn 8: point = 0, n_alt = 2
   Insn 7: point = 0, n_alt = -2
   Insn 6: point = 1, n_alt = 3
   Insn 2: point = 2, n_alt = 5
  BB 7
   Insn 56: point = 2, n_alt = 1
  BB 6
   Insn 53: point = 2, n_alt = -1
   Insn 52: point = 2, n_alt = 1
  BB 4
   Insn 68: point = 2, n_alt = -1
   Insn 31: point = 2, n_alt = 5
   Insn 30: point = 3, n_alt = 3
   Insn 29: point = 5, n_alt = 4
   Insn 28: point = 6, n_alt = 1
   Insn 27: point = 8, n_alt = 0
   Insn 26: point = 10, n_alt = 0
   Insn 25: point = 12, n_alt = 0
  BB 5
   Insn 48: point = 13, n_alt = 5
   Insn 47: point = 14, n_alt = 3
   Insn 46: point = 16, n_alt = 3
   Insn 45: point = 17, n_alt = 0
   Insn 44: point = 17, n_alt = 1
   Insn 43: point = 17, n_alt = -2
   Insn 42: point = 18, n_alt = 4
   Insn 41: point = 18, n_alt = -2
   Insn 40: point = 19, n_alt = -2
   Insn 39: point = 20, n_alt = 3
   Insn 38: point = 21, n_alt = 3
   Insn 37: point = 23, n_alt = 3
   Insn 36: point = 24, n_alt = 0
   Insn 35: point = 26, n_alt = 3
  BB 3
   Insn 23: point = 27, n_alt = -1
   Insn 22: point = 27, n_alt = 0
   Insn 21: point = 28, n_alt = 3
   Insn 20: point = 30, n_alt = 4
   Insn 19: point = 31, n_alt = 1
   Insn 18: point = 33, n_alt = 0
   Insn 17: point = 35, n_alt = 0
   Insn 16: point = 37, n_alt = 0
 r87: [27..28]
 r88: [19..24]
 r89: [18..21]
 r90: [0..1]
 r91: [34..35]
 r92: [36..37]
 r93: [32..33]
 r94: [29..31]
 r95: [29..30]
 r96: [9..10]
 r97: [11..12]
 r98: [7..8]
 r99: [4..6]
 r100: [4..5]
 r101: [2..3]
 r102: [25..26]
 r103: [22..23]
 r104: [17..20]
 r105: [15..16]
 r106: [13..14]
Compressing live ranges: from 38 to 32 - 84%
Ranges after the compression:
 r87: [22..23]
 r88: [16..19]
 r89: [16..17]
 r90: [0..1]
 r91: [28..29]
 r92: [30..31]
 r93: [26..27]
 r94: [24..25]
 r95: [24..25]
 r96: [8..9]
 r97: [10..11]
 r98: [6..7]
 r99: [4..5]
 r100: [4..5]
 r101: [2..3]
 r102: [20..21]
 r103: [18..19]
 r104: [16..17]
 r105: [14..15]
 r106: [12..13]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 21
changing reg in insn 22
changing reg in insn 36
changing reg in insn 40
changing reg in insn 38
changing reg in insn 41
changing reg in insn 6
changing reg in insn 7
changing reg in insn 17
changing reg in insn 18
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 21
changing reg in insn 20
changing reg in insn 21
changing reg in insn 26
changing reg in insn 27
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 30
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 43
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
deleting insn with uid = 40.
deleting insn with uid = 41.
starting the processing of deferred insns
ending the processing of deferred insns


writerFunc

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={20d,17u} r1={7d,4u} r2={5d,2u} r4={5d,2u} r5={5d,3u} r6={1d,24u} r7={1d,11u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={10d,3u} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 264{197d,67u,0e} in 43{41 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 90
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [7 fp+0 S8 A64])
        (reg:DI 5 di [ fp ])) "test1.c":205 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [7 fp+0 S8 A64])) "test1.c":208 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 2 cx)
        (reg:DI 0 ax [90])) "test1.c":208 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 1 dx)
        (const_int 30 [0x1e])) "test1.c":208 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 4 si)
        (const_int 1 [0x1])) "test1.c":208 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7fa517af7bd0 *.LC6>)) "test1.c":208 81 {*movdi_internal}
     (nil))
(call_insn 11 10 12 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7fa517cffa00 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) "test1.c":208 676 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 12 11 66 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 0 [0])) "test1.c":211 82 {*movsi_internal}
     (nil))
(jump_insn 66 12 67 2 (set (pc)
        (label_ref 57)) "test1.c":211 659 {jump}
     (nil)
 -> 57)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 67 66 59)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       8
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 91 92 93 94 95
(code_label 59 67 15 3 53 (nil) [1 uses])
(note 15 59 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 3 (set (reg:SI 0 ax [92])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "test1.c":213 82 {*movsi_internal}
     (nil))
(insn 17 16 18 3 (set (reg:DI 0 ax [91])
        (sign_extend:DI (reg:SI 0 ax [92]))) "test1.c":213 145 {*extendsidi2_rex64}
     (nil))
(insn 18 17 19 3 (parallel [
            (set (reg:DI 0 ax [93])
                (plus:DI (reg:DI 0 ax [91])
                    (const_int 10000000 [0x989680])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":213 218 {*adddi_1}
     (nil))
(insn 19 18 20 3 (parallel [
            (set (reg:DI 1 dx [94])
                (ashift:DI (reg:DI 0 ax [93])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":213 522 {*ashldi3_1}
     (nil))
(insn 20 19 21 3 (set (reg:DI 0 ax [95])
        (symbol_ref:DI ("hashTable") [flags 0x2]  <var_decl 0x7fa517a76000 hashTable>)) "test1.c":213 81 {*movdi_internal}
     (nil))
(insn 21 20 22 3 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f:DI (plus:DI (reg:DI 1 dx [94])
                (reg:DI 0 ax [95])) [2 hashTable S8 A64])) "test1.c":213 81 {*movdi_internal}
     (nil))
(insn 22 21 23 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:87 _1 ] [87])
            (const_int 0 [0]))) "test1.c":213 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 23 22 24 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 54)
            (pc))) "test1.c":213 627 {*jcc_1}
     (nil)
 -> 54)
;;  succ:       4 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 96 97 98 99 100 101
(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 4 (set (reg:SI 0 ax [97])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "test1.c":215 82 {*movsi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:DI 0 ax [96])
        (sign_extend:DI (reg:SI 0 ax [97]))) "test1.c":215 145 {*extendsidi2_rex64}
     (nil))
(insn 27 26 28 4 (parallel [
            (set (reg:DI 0 ax [98])
                (plus:DI (reg:DI 0 ax [96])
                    (const_int 10000000 [0x989680])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":215 218 {*adddi_1}
     (nil))
(insn 28 27 29 4 (parallel [
            (set (reg:DI 1 dx [99])
                (ashift:DI (reg:DI 0 ax [98])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":215 522 {*ashldi3_1}
     (nil))
(insn 29 28 30 4 (set (reg:DI 0 ax [100])
        (symbol_ref:DI ("hashTable") [flags 0x2]  <var_decl 0x7fa517a76000 hashTable>)) "test1.c":215 81 {*movdi_internal}
     (nil))
(insn 30 29 31 4 (set (reg/f:DI 0 ax [101])
        (mem/f:DI (plus:DI (reg:DI 1 dx [99])
                (reg:DI 0 ax [100])) [2 hashTable S8 A64])) "test1.c":215 81 {*movdi_internal}
     (nil))
(insn 31 30 68 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 p+0 S8 A64])
        (reg/f:DI 0 ax [101])) "test1.c":215 81 {*movdi_internal}
     (nil))
(jump_insn 68 31 69 4 (set (pc)
        (label_ref 49)) "test1.c":216 659 {jump}
     (nil)
 -> 49)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 69 68 51)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 89 102 103 104 105 106
(code_label 51 69 34 5 52 (nil) [1 uses])
(note 34 51 35 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 5 (set (reg/f:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 p+0 S8 A64])) "test1.c":218 81 {*movdi_internal}
     (nil))
(insn 36 35 37 5 (set (reg:SI 2 cx [orig:88 _2 ] [88])
        (mem:SI (plus:DI (reg/f:DI 0 ax [102])
                (const_int 8 [0x8])) [1 p_5->Value+0 S4 A64])) "test1.c":218 82 {*movsi_internal}
     (nil))
(insn 37 36 38 5 (set (reg/f:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 p+0 S8 A64])) "test1.c":218 81 {*movdi_internal}
     (nil))
(insn 38 37 39 5 (set (reg/f:DI 1 dx [orig:89 _3 ] [89])
        (mem/f:DI (reg/f:DI 0 ax [103]) [3 p_5->Key+0 S8 A64])) "test1.c":218 81 {*movdi_internal}
     (nil))
(insn 39 38 42 5 (set (reg:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [7 fp+0 S8 A64])) "test1.c":218 81 {*movdi_internal}
     (nil))
(insn 42 39 43 5 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7fa517af7c60 *.LC7>)) "test1.c":218 81 {*movdi_internal}
     (nil))
(insn 43 42 44 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [104])) "test1.c":218 81 {*movdi_internal}
     (nil))
(insn 44 43 45 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":218 84 {*movqi_internal}
     (nil))
(call_insn 45 44 46 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7fa517cfe900 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) "test1.c":218 676 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
(insn 46 45 47 5 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 p+0 S8 A64])) "test1.c":219 81 {*movdi_internal}
     (nil))
(insn 47 46 48 5 (set (reg/f:DI 0 ax [106])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [105])
                (const_int 16 [0x10])) [2 p_5->pNext+0 S8 A64])) "test1.c":219 81 {*movdi_internal}
     (nil))
(insn 48 47 49 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 p+0 S8 A64])
        (reg/f:DI 0 ax [106])) "test1.c":219 81 {*movdi_internal}
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 49 48 50 6 51 (nil) [1 uses])
(note 50 49 52 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 52 50 53 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [2 p+0 S8 A64])
            (const_int 0 [0]))) "test1.c":216 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 53 52 54 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 51)
            (pc))) "test1.c":216 627 {*jcc_1}
     (nil)
 -> 51)
;;  succ:       5
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 54 53 55 7 50 (nil) [1 uses])
(note 55 54 56 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":211 217 {*addsi_1}
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 57 56 58 8 49 (nil) [1 uses])
(note 58 57 60 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 60 58 61 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int 99999 [0x1869f]))) "test1.c":211 7 {*cmpsi_1}
     (nil))
(jump_insn 61 60 62 8 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 59)
            (pc))) "test1.c":211 627 {*jcc_1}
     (nil)
 -> 59)
;;  succ:       3
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 1, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 62 61 65 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 65 62 70 9 (const_int 0 [0]) "test1.c":224 694 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 70 65 0 NOTE_INSN_DELETED)

;; Function main (main, funcdef_no=14, decl_uid=3311, cgraph_uid=14, symbol_order=17)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 24:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 28:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 29:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 39:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 54
	 Choosing alt 0 in insn 54:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 58:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 62:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 73:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (1) rBwBz {*call_value}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 79:  (0) v  (1) vm {movv2df_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) Yv  (1) Yv  (2) 0 {*absnegdf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 81:  (0) m  (1) v {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 90
	 Choosing alt 0 in insn 90:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 96:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 104:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 111:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 116:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 122:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 123:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 126:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 127:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 132:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 136:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 143:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 144:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 145
	 Choosing alt 0 in insn 145:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 146:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 147:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 148:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 155:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 156:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 157
	 Choosing alt 0 in insn 157:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 158:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 159:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 160:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 161:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 162:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 165:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 166:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 169:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 174:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 181:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 188:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 193:  (0) v  (1) m {*movdf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 194:  (0) x  (1) 0  (2) xm {*fop_df_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 195:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 196:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=157, assigning class NO_REGS to secondary r157
  197: r157:DF=r152:DF
      REG_DEAD r152:DF
    Inserting the sec. move after:
  250: xmm0:DF=r157:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=622,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 250:  (0) v  (1) m {*movdf_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 198:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 199:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 201:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 207:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 208:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 209
	 Choosing alt 0 in insn 209:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 210:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 213:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 217:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 220:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 222:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29

********** Pseudo live ranges #1: **********

  BB 29
   Insn 231: point = 0, n_alt = -1
   Insn 230: point = 0, n_alt = -2
   Insn 226: point = 1, n_alt = -2
  BB 6
   Insn 235: point = 4, n_alt = -1
   Insn 42: point = 4, n_alt = 0
   Insn 41: point = 5, n_alt = 0
   Insn 40: point = 5, n_alt = 1
   Insn 39: point = 5, n_alt = 4
  BB 28
   Insn 223: point = 5, n_alt = 0
   Insn 222: point = 6, n_alt = 0
   Insn 221: point = 6, n_alt = -2
   Insn 220: point = 7, n_alt = 3
  BB 27
   Insn 218: point = 8, n_alt = -1
   Insn 217: point = 8, n_alt = 0
  BB 25
   Insn 247: point = 8, n_alt = -1
   Insn 201: point = 8, n_alt = 1
   Insn 200: point = 8, n_alt = 0
   Insn 199: point = 8, n_alt = 1
   Insn 198: point = 8, n_alt = 4
   Insn 250: point = 8, n_alt = 14
	Hard reg 21 is preferable by r157 with profit 1
   Insn 197: point = 9, n_alt = -1
	Hard reg 21 is preferable by r157 with profit 1
	Hard reg 0 is preferable by r157 with profit 1
   Insn 196: point = 11, n_alt = 8
   Insn 195: point = 12, n_alt = 15
   Insn 194: point = 13, n_alt = 1
   Insn 193: point = 15, n_alt = 14
   Insn 192: point = 16, n_alt = -2
   Insn 191: point = 17, n_alt = 0
   Insn 190: point = 17, n_alt = 0
   Insn 189: point = 17, n_alt = -2
   Insn 188: point = 18, n_alt = 3
  BB 24
   Insn 186: point = 19, n_alt = -1
   Insn 185: point = 19, n_alt = 0
  BB 16
   Insn 243: point = 19, n_alt = -1
   Insn 132: point = 19, n_alt = 1
   Insn 131: point = 19, n_alt = 0
   Insn 130: point = 19, n_alt = 0
   Insn 129: point = 19, n_alt = 0
   Insn 128: point = 19, n_alt = -2
   Insn 127: point = 20, n_alt = 3
   Insn 126: point = 21, n_alt = 5
   Insn 125: point = 22, n_alt = -2
   Insn 124: point = 23, n_alt = 0
   Insn 123: point = 23, n_alt = 4
   Insn 122: point = 23, n_alt = 4
   Insn 121: point = 23, n_alt = 0
   Insn 120: point = 23, n_alt = -2
   Insn 119: point = 24, n_alt = 0
  BB 15
   Insn 117: point = 25, n_alt = -1
   Insn 116: point = 25, n_alt = 1
   Insn 115: point = 26, n_alt = 0
  BB 13
   Insn 241: point = 27, n_alt = -1
   Insn 104: point = 27, n_alt = 1
  BB 12
   Insn 102: point = 27, n_alt = -1
   Insn 101: point = 27, n_alt = 1
   Insn 100: point = 28, n_alt = 0
  BB 10
   Insn 239: point = 29, n_alt = -1
   Insn 82: point = 29, n_alt = 1
   Insn 81: point = 29, n_alt = 15
   Insn 80: point = 30, n_alt = 1
   Insn 79: point = 32, n_alt = 2
   Insn 78: point = 33, n_alt = -2
   Insn 77: point = 34, n_alt = 0
   Insn 76: point = 34, n_alt = 0
   Insn 75: point = 34, n_alt = 0
   Insn 74: point = 34, n_alt = 0
   Insn 73: point = 34, n_alt = 4
  BB 9
   Insn 71: point = 34, n_alt = -1
   Insn 70: point = 34, n_alt = 0
   Insn 68: point = 35, n_alt = -2
   Insn 67: point = 36, n_alt = 0
   Insn 66: point = 36, n_alt = -2
   Insn 65: point = 37, n_alt = 3
  BB 7
   Insn 237: point = 38, n_alt = -1
  BB 5
   Insn 37: point = 38, n_alt = -1
   Insn 36: point = 38, n_alt = 1
  BB 4
   Insn 34: point = 38, n_alt = -1
   Insn 33: point = 38, n_alt = 0
  BB 2
   Insn 233: point = 38, n_alt = -1
   Insn 15: point = 38, n_alt = 1
   Insn 14: point = 38, n_alt = 5
   Insn 13: point = 39, n_alt = -2
   Insn 12: point = 40, n_alt = 0
   Insn 11: point = 40, n_alt = 2
   Insn 10: point = 40, n_alt = 5
   Insn 9: point = 41, n_alt = -2
   Insn 8: point = 42, n_alt = 0
   Insn 7: point = 42, n_alt = 4
   Insn 6: point = 42, n_alt = 4
   Insn 5: point = 42, n_alt = 1
  BB 3
   Insn 29: point = 42, n_alt = 1
   Insn 28: point = 42, n_alt = 5
   Insn 27: point = 43, n_alt = -2
   Insn 26: point = 45, n_alt = -2
   Insn 25: point = 46, n_alt = 0
   Insn 24: point = 46, n_alt = 2
   Insn 23: point = 46, n_alt = 3
   Insn 22: point = 48, n_alt = 3
   Insn 21: point = 49, n_alt = 1
   Insn 20: point = 51, n_alt = 0
   Insn 19: point = 53, n_alt = 0
  BB 8
   Insn 62: point = 54, n_alt = 1
   Insn 61: point = 54, n_alt = 0
   Insn 60: point = 54, n_alt = 1
   Insn 59: point = 54, n_alt = -2
   Insn 58: point = 55, n_alt = 4
   Insn 57: point = 55, n_alt = -2
   Insn 56: point = 56, n_alt = 3
   Insn 55: point = 57, n_alt = 3
   Insn 54: point = 59, n_alt = 0
   Insn 53: point = 61, n_alt = 3
   Insn 52: point = 62, n_alt = 1
   Insn 51: point = 64, n_alt = 0
   Insn 50: point = 66, n_alt = 0
  BB 11
   Insn 96: point = 67, n_alt = 1
   Insn 95: point = 67, n_alt = 0
   Insn 94: point = 67, n_alt = -2
   Insn 93: point = 68, n_alt = -2
   Insn 92: point = 69, n_alt = 0
   Insn 91: point = 70, n_alt = 3
   Insn 90: point = 72, n_alt = 0
   Insn 89: point = 74, n_alt = 3
   Insn 88: point = 75, n_alt = 1
   Insn 87: point = 77, n_alt = 0
   Insn 86: point = 79, n_alt = 0
  BB 14
   Insn 111: point = 80, n_alt = 1
   Insn 110: point = 80, n_alt = 0
   Insn 109: point = 80, n_alt = -2
   Insn 108: point = 81, n_alt = 0
  BB 23
   Insn 181: point = 82, n_alt = 1
  BB 22
   Insn 179: point = 82, n_alt = -1
   Insn 178: point = 82, n_alt = 0
  BB 17
   Insn 245: point = 82, n_alt = -1
   Insn 136: point = 82, n_alt = 1
  BB 21
   Insn 174: point = 82, n_alt = 1
  BB 20
   Insn 171: point = 82, n_alt = 0
   Insn 170: point = 82, n_alt = -2
   Insn 169: point = 83, n_alt = 3
   Insn 168: point = 84, n_alt = 0
   Insn 167: point = 84, n_alt = -2
   Insn 166: point = 85, n_alt = 3
   Insn 165: point = 87, n_alt = 3
  BB 19
   Insn 163: point = 88, n_alt = -1
   Insn 162: point = 88, n_alt = 1
   Insn 161: point = 88, n_alt = 5
   Insn 160: point = 89, n_alt = 3
   Insn 159: point = 91, n_alt = 4
   Insn 158: point = 92, n_alt = 1
   Insn 157: point = 94, n_alt = 0
   Insn 156: point = 96, n_alt = 1
   Insn 155: point = 98, n_alt = 1
   Insn 154: point = 100, n_alt = 0
   Insn 153: point = 101, n_alt = 0
   Insn 152: point = 103, n_alt = 0
  BB 18
   Insn 150: point = 104, n_alt = -1
   Insn 149: point = 104, n_alt = 0
   Insn 148: point = 105, n_alt = 3
   Insn 147: point = 107, n_alt = 4
   Insn 146: point = 108, n_alt = 1
   Insn 145: point = 110, n_alt = 0
   Insn 144: point = 112, n_alt = 1
   Insn 143: point = 114, n_alt = 1
   Insn 142: point = 116, n_alt = 0
   Insn 141: point = 117, n_alt = 0
   Insn 140: point = 119, n_alt = 0
  BB 26
   Insn 213: point = 120, n_alt = 1
   Insn 212: point = 120, n_alt = 0
   Insn 211: point = 120, n_alt = -2
   Insn 210: point = 121, n_alt = 3
   Insn 209: point = 123, n_alt = 0
   Insn 208: point = 125, n_alt = 3
   Insn 207: point = 126, n_alt = 1
   Insn 206: point = 128, n_alt = 0
   Insn 205: point = 130, n_alt = 0
 r87: [50..51]
 r88: [47..49]
 r89: [42..46]
 r90: [42..43]
 r91: [63..64]
 r92: [60..62]
 r93: [58..59]
 r94: [55..57]
 r95: [34..35]
 r96: [31..33]
 r97: [76..77]
 r98: [73..75]
 r99: [71..72]
 r100: [67..70]
 r101: [104..105]
 r102: [84..85]
 r103: [14..16]
 r104: [127..128]
 r105: [124..126]
 r106: [122..123]
 r107: [120..121]
 r108: [2..5]
 r109: [0..1]
 r110: [40..41]
 r111: [38..39]
 r112: [52..53]
 r113: [47..48]
 r114: [44..45]
 r115: [65..66]
 r116: [60..61]
 r117: [54..56]
 r118: [36..37]
 r119: [29..30]
 r120: [31..32]
 r121: [78..79]
 r122: [73..74]
 r123: [68..69]
 r124: [27..28]
 r125: [80..81]
 r126: [25..26]
 r127: [23..24]
 r128: [21..22]
 r129: [19..20]
 r130: [111..117]
 r131: [118..119]
 r132: [113..114]
 r133: [115..116]
 r134: [111..112]
 r135: [109..110]
 r136: [106..108]
 r137: [106..107]
 r138: [95..101]
 r139: [102..103]
 r140: [97..98]
 r141: [99..100]
 r142: [95..96]
 r143: [93..94]
 r144: [90..92]
 r145: [90..91]
 r146: [88..89]
 r147: [86..87]
 r148: [82..83]
 r149: [17..18]
 r150: [12..13]
 r151: [14..15]
 r152: [10..11]
 r153: [129..130]
 r154: [124..125]
 r155: [6..7]
 r157: [8..9]
Compressing live ranges: from 131 to 114 - 87%
Ranges after the compression:
 r87: [44..45]
 r88: [42..43]
 r89: [38..41]
 r90: [38..39]
 r91: [54..55]
 r92: [52..53]
 r93: [50..51]
 r94: [48..49]
 r95: [30..31]
 r96: [28..29]
 r97: [64..65]
 r98: [62..63]
 r99: [60..61]
 r100: [58..59]
 r101: [90..91]
 r102: [72..73]
 r103: [12..13]
 r104: [110..111]
 r105: [108..109]
 r106: [106..107]
 r107: [104..105]
 r108: [2..3]
 r109: [0..1]
 r110: [36..37]
 r111: [34..35]
 r112: [46..47]
 r113: [42..43]
 r114: [40..41]
 r115: [56..57]
 r116: [52..53]
 r117: [48..49]
 r118: [32..33]
 r119: [26..27]
 r120: [28..29]
 r121: [66..67]
 r122: [62..63]
 r123: [58..59]
 r124: [24..25]
 r125: [68..69]
 r126: [22..23]
 r127: [20..21]
 r128: [18..19]
 r129: [16..17]
 r130: [96..101]
 r131: [102..103]
 r132: [98..99]
 r133: [100..101]
 r134: [96..97]
 r135: [94..95]
 r136: [92..93]
 r137: [92..93]
 r138: [82..87]
 r139: [88..89]
 r140: [84..85]
 r141: [86..87]
 r142: [82..83]
 r143: [80..81]
 r144: [78..79]
 r145: [78..79]
 r146: [76..77]
 r147: [74..75]
 r148: [70..71]
 r149: [14..15]
 r150: [10..11]
 r151: [12..13]
 r152: [8..9]
 r153: [112..113]
 r154: [108..109]
 r155: [4..5]
 r157: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
  Slot 0 regnos (width = 0):	 157
Changing spilled pseudos to memory in insn #197
Changing spilled pseudos to memory in insn #250
	   Spilling non-eliminable hard regs: 6

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 14 for insn #250
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 250:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 197:  (0) ?m  (1) rC {*movdf_internal}
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 23
changing reg in insn 23
changing reg in insn 23
changing reg in insn 28
changing reg in insn 27
changing reg in insn 28
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 57
changing reg in insn 68
changing reg in insn 70
changing reg in insn 78
changing reg in insn 80
changing reg in insn 80
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 90
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 94
changing reg in insn 148
changing reg in insn 149
changing reg in insn 166
changing reg in insn 167
changing reg in insn 192
changing reg in insn 194
changing reg in insn 206
changing reg in insn 207
changing reg in insn 207
changing reg in insn 209
changing reg in insn 209
changing reg in insn 210
changing reg in insn 210
changing reg in insn 211
changing reg in insn 223
changing reg in insn 42
changing reg in insn 226
changing reg in insn 226
changing reg in insn 230
changing reg in insn 9
changing reg in insn 10
changing reg in insn 13
changing reg in insn 14
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
changing reg in insn 23
changing reg in insn 26
changing reg in insn 27
changing reg in insn 50
changing reg in insn 51
changing reg in insn 53
changing reg in insn 56
changing reg in insn 59
changing reg in insn 65
changing reg in insn 66
changing reg in insn 80
changing reg in insn 81
changing reg in insn 79
changing reg in insn 80
changing reg in insn 86
changing reg in insn 87
changing reg in insn 89
changing reg in insn 92
changing reg in insn 93
changing reg in insn 100
changing reg in insn 101
changing reg in insn 108
changing reg in insn 109
changing reg in insn 115
changing reg in insn 116
changing reg in insn 119
changing reg in insn 120
changing reg in insn 125
changing reg in insn 126
changing reg in insn 127
changing reg in insn 128
changing reg in insn 141
changing reg in insn 140
changing reg in insn 141
changing reg in insn 143
changing reg in insn 144
changing reg in insn 142
changing reg in insn 143
changing reg in insn 144
changing reg in insn 145
changing reg in insn 146
changing reg in insn 146
changing reg in insn 148
changing reg in insn 147
changing reg in insn 148
changing reg in insn 153
changing reg in insn 152
changing reg in insn 153
changing reg in insn 155
changing reg in insn 156
changing reg in insn 154
changing reg in insn 155
changing reg in insn 156
changing reg in insn 157
changing reg in insn 158
changing reg in insn 158
changing reg in insn 160
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 161
changing reg in insn 165
changing reg in insn 166
changing reg in insn 169
changing reg in insn 170
changing reg in insn 188
changing reg in insn 189
changing reg in insn 194
changing reg in insn 195
changing reg in insn 193
changing reg in insn 194
changing reg in insn 196
changing reg in insn 197
changing reg in insn 205
changing reg in insn 206
changing reg in insn 208
changing reg in insn 220
changing reg in insn 221
deleting insn with uid = 9.
deleting insn with uid = 13.
deleting insn with uid = 26.
deleting insn with uid = 27.
deleting insn with uid = 57.
deleting insn with uid = 68.
deleting insn with uid = 125.
deleting insn with uid = 226.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 41.
verify found no changes in insn with uid = 61.
verify found no changes in insn with uid = 67.
verify found no changes in insn with uid = 74.
verify found no changes in insn with uid = 76.
verify found no changes in insn with uid = 77.
verify found no changes in insn with uid = 95.
verify found no changes in insn with uid = 110.
verify found no changes in insn with uid = 121.
verify found no changes in insn with uid = 124.
verify found no changes in insn with uid = 129.
verify found no changes in insn with uid = 131.
verify found no changes in insn with uid = 168.
verify found no changes in insn with uid = 171.
verify found no changes in insn with uid = 190.
verify found no changes in insn with uid = 191.
verify found no changes in insn with uid = 200.
verify found no changes in insn with uid = 212.
verify found no changes in insn with uid = 222.


main

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 22 [xmm1]
;;  ref usage 	r0={69d,51u} r1={37d,14u,4e} r2={23d} r3={1d,1u} r4={27d,4u} r5={43d,20u} r6={1d,92u} r7={1d,51u} r8={22d} r9={22d} r10={22d} r11={22d} r12={22d} r13={22d} r14={22d} r15={22d} r17={54d,10u} r18={22d} r19={22d} r20={1d,1u,4e} r21={28d,7u} r22={25d,2u,1e} r23={23d} r24={23d} r25={23d} r26={23d} r27={23d} r28={23d} r29={22d} r30={22d} r31={22d} r32={22d} r33={22d} r34={22d} r35={22d} r36={22d} r37={23d} r38={23d} r39={22d} r40={22d} r45={22d} r46={22d} r47={22d} r48={22d} r49={22d} r50={22d} r51={22d} r52={22d} r53={22d} r54={22d} r55={22d} r56={22d} r57={22d} r58={22d} r59={22d} r60={22d} r61={22d} r62={22d} r63={22d} r64={22d} r65={22d} r66={22d} r67={22d} r68={22d} r69={22d} r70={22d} r71={22d} r72={22d} r73={22d} r74={22d} r75={22d} r76={22d} r77={22d} r78={22d} r79={22d} r80={22d} 
;;    total ref usage 1988{1726d,253u,9e} in 165{143 regular + 22 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 110 111
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 file_num+0 S4 A32])
        (const_int 0 [0])) "test1.c":229 82 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fa517adce10 *.LC2>)) "test1.c":230 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7fa517afe6c0 *.LC8>)) "test1.c":230 81 {*movdi_internal}
     (nil))
(call_insn 8 7 10 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7fa517dd2a00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) "test1.c":230 676 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 10 8 11 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [7 read_filename+0 S8 A64])
        (reg:DI 0 ax [110])) "test1.c":230 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (const_int 800 [0x320])) "test1.c":231 81 {*movdi_internal}
     (nil))
(call_insn 12 11 14 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fa517d22300 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) "test1.c":231 676 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 14 12 15 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [8 filename_list_array+0 S8 A64])
        (reg/f:DI 0 ax [111])) "test1.c":231 81 {*movdi_internal}
     (nil))
(insn 15 14 233 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])
        (const_int 0 [0])) "test1.c":236 82 {*movsi_internal}
     (nil))
(jump_insn 233 15 234 2 (set (pc)
        (label_ref 30)) "test1.c":236 659 {jump}
     (nil)
 -> 30)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 234 233 32)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 112 113 114
(code_label 32 234 18 3 56 (nil) [1 uses])
(note 18 32 19 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 3 (set (reg:SI 0 ax [112])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])) "test1.c":238 82 {*movsi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:DI 0 ax [orig:87 _1 ] [87])
        (sign_extend:DI (reg:SI 0 ax [112]))) "test1.c":238 145 {*extendsidi2_rex64}
     (nil))
(insn 21 20 22 3 (parallel [
            (set (reg:DI 1 dx [orig:88 _2 ] [88])
                (ashift:DI (reg:DI 0 ax [orig:87 _1 ] [87])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":238 522 {*ashldi3_1}
     (nil))
(insn 22 21 23 3 (set (reg/f:DI 0 ax [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [8 filename_list_array+0 S8 A64])) "test1.c":238 81 {*movdi_internal}
     (nil))
(insn 23 22 24 3 (parallel [
            (set (reg/f:DI 3 bx [orig:89 _3 ] [89])
                (plus:DI (reg:DI 1 dx [orig:88 _2 ] [88])
                    (reg/f:DI 0 ax [113])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":238 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [8 filename_list_array+0 S8 A64])
            (reg:DI 1 dx [orig:88 _2 ] [88]))
        (nil)))
(insn 24 23 25 3 (set (reg:DI 5 di)
        (const_int 50 [0x32])) "test1.c":238 81 {*movdi_internal}
     (nil))
(call_insn 25 24 28 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fa517d22300 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) "test1.c":238 676 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 28 25 29 3 (set (mem/f:DI (reg/f:DI 3 bx [orig:89 _3 ] [89]) [3 *_3+0 S8 A64])
        (reg/f:DI 0 ax [orig:90 _4 ] [90])) "test1.c":238 81 {*movdi_internal}
     (nil))
(insn 29 28 30 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":236 217 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 30 29 31 4 55 (nil) [1 uses])
(note 31 30 33 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 33 31 34 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])
            (const_int 99 [0x63]))) "test1.c":236 7 {*cmpsi_1}
     (nil))
(jump_insn 34 33 35 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) "test1.c":236 627 {*jcc_1}
     (nil)
 -> 32)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 35 34 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [7 read_filename+0 S8 A64])
            (const_int 0 [0]))) "test1.c":241 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 37 36 38 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 45)
            (pc))) "test1.c":241 627 {*jcc_1}
     (nil)
 -> 45)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 108
(note 38 37 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 6 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7fa517afe750 *.LC9>)) "test1.c":243 81 {*movdi_internal}
     (nil))
(insn 40 39 41 6 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":243 84 {*movqi_internal}
     (nil))
(call_insn 41 40 42 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fa517cfff00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":243 676 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 42 41 235 6 (set (reg:SI 0 ax [orig:108 _29 ] [108])
        (const_int 0 [0])) "test1.c":244 82 {*movsi_internal}
     (nil))
(jump_insn 235 42 236 6 (set (pc)
        (label_ref 224)) "test1.c":244 659 {jump}
     (nil)
 -> 224)
;;  succ:       29 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 108

(barrier 236 235 45)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 45 236 46 7 57 (nil) [1 uses])
(note 46 45 237 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 237 46 238 7 (set (pc)
        (label_ref 63)) "test1.c":246 659 {jump}
     (nil)
 -> 63)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 238 237 69)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       9
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91 92 93 94 115 116 117
(code_label 69 238 49 8 60 (nil) [1 uses])
(note 49 69 50 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 8 (set (reg:SI 0 ax [115])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 file_num+0 S4 A32])) "test1.c":248 82 {*movsi_internal}
     (nil))
(insn 51 50 52 8 (set (reg:DI 0 ax [orig:91 _5 ] [91])
        (sign_extend:DI (reg:SI 0 ax [115]))) "test1.c":248 145 {*extendsidi2_rex64}
     (nil))
(insn 52 51 53 8 (parallel [
            (set (reg:DI 1 dx [orig:92 _6 ] [92])
                (ashift:DI (reg:DI 0 ax [orig:91 _5 ] [91])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":248 522 {*ashldi3_1}
     (nil))
(insn 53 52 54 8 (set (reg/f:DI 0 ax [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [8 filename_list_array+0 S8 A64])) "test1.c":248 81 {*movdi_internal}
     (nil))
(insn 54 53 55 8 (parallel [
            (set (reg/f:DI 0 ax [orig:93 _7 ] [93])
                (plus:DI (reg/f:DI 0 ax [116])
                    (reg:DI 1 dx [orig:92 _6 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":248 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [8 filename_list_array+0 S8 A64])
            (reg:DI 1 dx [orig:92 _6 ] [92]))
        (nil)))
(insn 55 54 56 8 (set (reg/f:DI 1 dx [orig:94 _8 ] [94])
        (mem/f:DI (reg/f:DI 0 ax [orig:93 _7 ] [93]) [3 *_7+0 S8 A64])) "test1.c":248 81 {*movdi_internal}
     (nil))
(insn 56 55 58 8 (set (reg:DI 0 ax [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [7 read_filename+0 S8 A64])) "test1.c":248 81 {*movdi_internal}
     (nil))
(insn 58 56 59 8 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7fa517afe7e0 *.LC10>)) "test1.c":248 81 {*movdi_internal}
     (nil))
(insn 59 58 60 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [117])) "test1.c":248 81 {*movdi_internal}
     (nil))
(insn 60 59 61 8 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":248 84 {*movqi_internal}
     (nil))
(call_insn 61 60 62 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_fscanf") [flags 0x41]  <function_decl 0x7fa517cff900 fscanf>) [0 __builtin_fscanf S1 A8])
            (const_int 0 [0]))) "test1.c":248 676 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 62 61 63 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [1 file_num+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [1 file_num+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":249 217 {*addsi_1}
     (nil))
;;  succ:       9 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU,DFS_BACK)
;;              7 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 95 118
(code_label 63 62 64 9 59 (nil) [1 uses])
(note 64 63 65 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 9 (set (reg:DI 0 ax [118])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [7 read_filename+0 S8 A64])) "test1.c":246 81 {*movdi_internal}
     (nil))
(insn 66 65 67 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [118])) "test1.c":246 81 {*movdi_internal}
     (nil))
(call_insn 67 66 70 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("feof") [flags 0x41]  <function_decl 0x7fa517de9100 feof>) [0 feof S1 A8])
            (const_int 0 [0]))) "test1.c":246 676 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 70 67 71 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:95 _9 ] [95])
            (const_int 0 [0]))) "test1.c":246 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 71 70 72 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 69)
            (pc))) "test1.c":246 627 {*jcc_1}
     (nil)
 -> 69)
;;  succ:       8
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 96 119 120
(note 72 71 73 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 73 72 74 10 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7fa517afe870 *.LC11>)) "test1.c":251 81 {*movdi_internal}
     (nil))
(call_insn 74 73 75 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fa517d00600 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test1.c":251 676 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 75 74 76 10 (set (reg:SI 5 di)
        (const_int 8 [0x8])) "test1.c":253 82 {*movsi_internal}
     (nil))
(call_insn 76 75 77 10 (call (mem:QI (symbol_ref:DI ("omp_set_num_threads") [flags 0x41]  <function_decl 0x7fa517a68100 omp_set_num_threads>) [0 omp_set_num_threads S1 A8])
        (const_int 0 [0])) "test1.c":253 665 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(call_insn 77 76 78 10 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("omp_get_wtime") [flags 0x41]  <function_decl 0x7fa517a6c700 omp_get_wtime>) [0 omp_get_wtime S1 A8])
            (const_int 0 [0]))) "test1.c":254 676 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 78 77 79 10 (set (reg:DF 22 xmm1 [orig:96 _10 ] [96])
        (reg:DF 21 xmm0)) "test1.c":254 126 {*movdf_internal}
     (nil))
(insn 79 78 80 10 (set (reg:V2DF 21 xmm0 [120])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC12") [flags 0x2]) [9  S16 A128])) "test1.c":254 1238 {movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF -0.0 [-0x0.0p+0])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 80 79 81 10 (parallel [
            (set (reg:DF 21 xmm0 [119])
                (neg:DF (reg:DF 22 xmm1 [orig:96 _10 ] [96])))
            (use (reg:V2DF 21 xmm0 [120]))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":254 481 {*absnegdf2}
     (expr_list:REG_EQUAL (neg:DF (reg:DF 22 xmm1 [orig:96 _10 ] [96]))
        (nil)))
(insn 81 80 82 10 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [9 time+0 S8 A64])
        (reg:DF 21 xmm0 [119])) "test1.c":254 126 {*movdf_internal}
     (nil))
(insn 82 81 239 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])
        (const_int 0 [0])) "test1.c":259 82 {*movsi_internal}
     (nil))
(jump_insn 239 82 240 10 (set (pc)
        (label_ref 97)) "test1.c":259 659 {jump}
     (nil)
 -> 97)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 240 239 99)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       12
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 97 98 99 100 121 122 123
(code_label 99 240 85 11 62 (nil) [1 uses])
(note 85 99 86 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 87 11 (set (reg:SI 0 ax [121])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])) "test1.c":263 82 {*movsi_internal}
     (nil))
(insn 87 86 88 11 (set (reg:DI 0 ax [orig:97 _11 ] [97])
        (sign_extend:DI (reg:SI 0 ax [121]))) "test1.c":263 145 {*extendsidi2_rex64}
     (nil))
(insn 88 87 89 11 (parallel [
            (set (reg:DI 1 dx [orig:98 _12 ] [98])
                (ashift:DI (reg:DI 0 ax [orig:97 _11 ] [97])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":263 522 {*ashldi3_1}
     (nil))
(insn 89 88 90 11 (set (reg/f:DI 0 ax [122])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [8 filename_list_array+0 S8 A64])) "test1.c":263 81 {*movdi_internal}
     (nil))
(insn 90 89 91 11 (parallel [
            (set (reg/f:DI 0 ax [orig:99 _13 ] [99])
                (plus:DI (reg/f:DI 0 ax [122])
                    (reg:DI 1 dx [orig:98 _12 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":263 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [8 filename_list_array+0 S8 A64])
            (reg:DI 1 dx [orig:98 _12 ] [98]))
        (nil)))
(insn 91 90 92 11 (set (reg/f:DI 0 ax [orig:100 _14 ] [100])
        (mem/f:DI (reg/f:DI 0 ax [orig:99 _13 ] [99]) [3 *_13+0 S8 A64])) "test1.c":263 81 {*movdi_internal}
     (nil))
(insn 92 91 93 11 (set (reg:SI 1 dx [123])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])) "test1.c":263 82 {*movsi_internal}
     (nil))
(insn 93 92 94 11 (set (reg:SI 4 si)
        (reg:SI 1 dx [123])) "test1.c":263 82 {*movsi_internal}
     (nil))
(insn 94 93 95 11 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:100 _14 ] [100])) "test1.c":263 81 {*movdi_internal}
     (nil))
(call_insn 95 94 96 11 (call (mem:QI (symbol_ref:DI ("readFunc") [flags 0x3]  <function_decl 0x7fa517a7c400 readFunc>) [0 readFunc S1 A8])
        (const_int 0 [0])) "test1.c":263 665 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 96 95 97 11 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":259 217 {*addsi_1}
     (nil))
;;  succ:       12 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU,DFS_BACK)
;;              10 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 124
(code_label 97 96 98 12 61 (nil) [1 uses])
(note 98 97 100 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 100 98 101 12 (set (reg:SI 0 ax [124])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])) "test1.c":259 82 {*movsi_internal}
     (nil))
(insn 101 100 102 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [124])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 file_num+0 S4 A32]))) "test1.c":259 7 {*cmpsi_1}
     (nil))
(jump_insn 102 101 103 12 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 99)
            (pc))) "test1.c":259 627 {*jcc_1}
     (nil)
 -> 99)
;;  succ:       11
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 103 102 104 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 104 103 241 13 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])
        (const_int 0 [0])) "test1.c":272 82 {*movsi_internal}
     (nil))
(jump_insn 241 104 242 13 (set (pc)
        (label_ref 112)) "test1.c":272 659 {jump}
     (nil)
 -> 112)
;;  succ:       15 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 242 241 114)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       15
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 125
(code_label 114 242 107 14 64 (nil) [1 uses])
(note 107 114 108 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 108 107 109 14 (set (reg:SI 0 ax [125])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])) "test1.c":276 82 {*movsi_internal}
     (nil))
(insn 109 108 110 14 (set (reg:SI 5 di)
        (reg:SI 0 ax [125])) "test1.c":276 82 {*movsi_internal}
     (nil))
(call_insn 110 109 111 14 (call (mem:QI (symbol_ref:DI ("mapperFunc") [flags 0x3]  <function_decl 0x7fa517a7c600 mapperFunc>) [0 mapperFunc S1 A8])
        (const_int 0 [0])) "test1.c":276 665 {*call}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 111 110 112 14 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":272 217 {*addsi_1}
     (nil))
;;  succ:       15 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU,DFS_BACK)
;;              13 [100.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 126
(code_label 112 111 113 15 63 (nil) [1 uses])
(note 113 112 115 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 115 113 116 15 (set (reg:SI 0 ax [126])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])) "test1.c":272 82 {*movsi_internal}
     (nil))
(insn 116 115 117 15 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [126])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 file_num+0 S4 A32]))) "test1.c":272 7 {*cmpsi_1}
     (nil))
(jump_insn 117 116 118 15 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 114)
            (pc))) "test1.c":272 627 {*jcc_1}
     (nil)
 -> 114)
;;  succ:       14
;;              16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 127 128 129
(note 118 117 119 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 119 118 120 16 (set (reg:SI 0 ax [127])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 file_num+0 S4 A32])) "test1.c":282 82 {*movsi_internal}
     (nil))
(insn 120 119 121 16 (set (reg:SI 5 di)
        (reg:SI 0 ax [127])) "test1.c":282 82 {*movsi_internal}
     (nil))
(call_insn 121 120 122 16 (call (mem:QI (symbol_ref:DI ("reducerFunc") [flags 0x3]  <function_decl 0x7fa517a7c800 reducerFunc>) [0 reducerFunc S1 A8])
        (const_int 0 [0])) "test1.c":282 665 {*call}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 122 121 123 16 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7fa517afe900 *.LC13>)) "test1.c":284 81 {*movdi_internal}
     (nil))
(insn 123 122 124 16 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7fa517afe990 *.LC14>)) "test1.c":284 81 {*movdi_internal}
     (nil))
(call_insn 124 123 126 16 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7fa517dd2a00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) "test1.c":284 676 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 126 124 127 16 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [7 fp+0 S8 A64])
        (reg:DI 0 ax [128])) "test1.c":284 81 {*movdi_internal}
     (nil))
(insn 127 126 128 16 (set (reg:DI 0 ax [129])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [7 fp+0 S8 A64])) "test1.c":286 81 {*movdi_internal}
     (nil))
(insn 128 127 129 16 (set (reg:DI 5 di)
        (reg:DI 0 ax [129])) "test1.c":286 81 {*movdi_internal}
     (nil))
(call_insn 129 128 130 16 (call (mem:QI (symbol_ref:DI ("writerFunc") [flags 0x3]  <function_decl 0x7fa517a7ca00 writerFunc>) [0 writerFunc S1 A8])
        (const_int 0 [0])) "test1.c":286 665 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 130 129 131 16 (set (reg:SI 5 di)
        (const_int 100 [0x64])) "test1.c":288 82 {*movsi_internal}
     (nil))
(call_insn 131 130 132 16 (call (mem:QI (symbol_ref:DI ("hashTablePrintFunc") [flags 0x3]  <function_decl 0x7fa517a7c000 hashTablePrintFunc>) [0 hashTablePrintFunc S1 A8])
        (const_int 0 [0])) "test1.c":288 665 {*call}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 132 131 243 16 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])
        (const_int 0 [0])) "test1.c":291 82 {*movsi_internal}
     (nil))
(jump_insn 243 132 244 16 (set (pc)
        (label_ref 182)) "test1.c":291 659 {jump}
     (nil)
 -> 182)
;;  succ:       24 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 244 243 184)
;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       24
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 184 244 135 17 69 (nil) [1 uses])
(note 135 184 136 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 136 135 245 17 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 j+0 S4 A32])
        (const_int 0 [0])) "test1.c":293 82 {*movsi_internal}
     (nil))
(jump_insn 245 136 246 17 (set (pc)
        (label_ref 175)) "test1.c":293 659 {jump}
     (nil)
 -> 175)
;;  succ:       22 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 246 245 177)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       22
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 101 130 131 132 133 134 135 136 137
(code_label 177 246 139 18 68 (nil) [1 uses])
(note 139 177 140 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 140 139 141 18 (set (reg:SI 0 ax [131])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 j+0 S4 A32])) "test1.c":295 82 {*movsi_internal}
     (nil))
(insn 141 140 142 18 (set (reg:DI 0 ax [130])
        (sign_extend:DI (reg:SI 0 ax [131]))) "test1.c":295 145 {*extendsidi2_rex64}
     (nil))
(insn 142 141 143 18 (set (reg:SI 1 dx [133])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])) "test1.c":295 82 {*movsi_internal}
     (nil))
(insn 143 142 144 18 (set (reg:DI 1 dx [132])
        (sign_extend:DI (reg:SI 1 dx [133]))) "test1.c":295 145 {*extendsidi2_rex64}
     (nil))
(insn 144 143 145 18 (parallel [
            (set (reg:DI 1 dx [134])
                (mult:DI (reg:DI 1 dx [132])
                    (const_int 100000 [0x186a0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":295 339 {*muldi3_1}
     (nil))
(insn 145 144 146 18 (parallel [
            (set (reg:DI 0 ax [135])
                (plus:DI (reg:DI 0 ax [130])
                    (reg:DI 1 dx [134])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":295 218 {*adddi_1}
     (nil))
(insn 146 145 147 18 (parallel [
            (set (reg:DI 1 dx [136])
                (ashift:DI (reg:DI 0 ax [135])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":295 522 {*ashldi3_1}
     (nil))
(insn 147 146 148 18 (set (reg:DI 0 ax [137])
        (symbol_ref:DI ("hashTable") [flags 0x2]  <var_decl 0x7fa517a76000 hashTable>)) "test1.c":295 81 {*movdi_internal}
     (nil))
(insn 148 147 149 18 (set (reg/f:DI 0 ax [orig:101 _15 ] [101])
        (mem/f:DI (plus:DI (reg:DI 1 dx [136])
                (reg:DI 0 ax [137])) [2 hashTable S8 A64])) "test1.c":295 81 {*movdi_internal}
     (nil))
(insn 149 148 150 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:101 _15 ] [101])
            (const_int 0 [0]))) "test1.c":295 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 150 149 151 18 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 172)
            (pc))) "test1.c":295 627 {*jcc_1}
     (nil)
 -> 172)
;;  succ:       19 (FALLTHRU)
;;              21
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 138 139 140 141 142 143 144 145 146
(note 151 150 152 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 152 151 153 19 (set (reg:SI 0 ax [139])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 j+0 S4 A32])) "test1.c":297 82 {*movsi_internal}
     (nil))
(insn 153 152 154 19 (set (reg:DI 0 ax [138])
        (sign_extend:DI (reg:SI 0 ax [139]))) "test1.c":297 145 {*extendsidi2_rex64}
     (nil))
(insn 154 153 155 19 (set (reg:SI 1 dx [141])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])) "test1.c":297 82 {*movsi_internal}
     (nil))
(insn 155 154 156 19 (set (reg:DI 1 dx [140])
        (sign_extend:DI (reg:SI 1 dx [141]))) "test1.c":297 145 {*extendsidi2_rex64}
     (nil))
(insn 156 155 157 19 (parallel [
            (set (reg:DI 1 dx [142])
                (mult:DI (reg:DI 1 dx [140])
                    (const_int 100000 [0x186a0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":297 339 {*muldi3_1}
     (nil))
(insn 157 156 158 19 (parallel [
            (set (reg:DI 0 ax [143])
                (plus:DI (reg:DI 0 ax [138])
                    (reg:DI 1 dx [142])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":297 218 {*adddi_1}
     (nil))
(insn 158 157 159 19 (parallel [
            (set (reg:DI 1 dx [144])
                (ashift:DI (reg:DI 0 ax [143])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":297 522 {*ashldi3_1}
     (nil))
(insn 159 158 160 19 (set (reg:DI 0 ax [145])
        (symbol_ref:DI ("hashTable") [flags 0x2]  <var_decl 0x7fa517a76000 hashTable>)) "test1.c":297 81 {*movdi_internal}
     (nil))
(insn 160 159 161 19 (set (reg/f:DI 0 ax [146])
        (mem/f:DI (plus:DI (reg:DI 1 dx [144])
                (reg:DI 0 ax [145])) [2 hashTable S8 A64])) "test1.c":297 81 {*movdi_internal}
     (nil))
(insn 161 160 162 19 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [2 pHead+0 S8 A64])
        (reg/f:DI 0 ax [146])) "test1.c":297 81 {*movdi_internal}
     (nil))
(insn 162 161 163 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [2 pHead+0 S8 A64])
            (const_int 0 [0]))) "test1.c":298 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 163 162 164 19 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 172)
            (pc))) "test1.c":298 627 {*jcc_1}
     (nil)
 -> 172)
;;  succ:       20 (FALLTHRU)
;;              21
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 102 147 148
(note 164 163 165 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 165 164 166 20 (set (reg/f:DI 0 ax [147])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [2 pHead+0 S8 A64])) "test1.c":300 81 {*movdi_internal}
     (nil))
(insn 166 165 167 20 (set (reg/f:DI 0 ax [orig:102 _16 ] [102])
        (mem/f:DI (reg/f:DI 0 ax [147]) [3 pHead_70->Key+0 S8 A64])) "test1.c":300 81 {*movdi_internal}
     (nil))
(insn 167 166 168 20 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:102 _16 ] [102])) "test1.c":300 81 {*movdi_internal}
     (nil))
(call_insn 168 167 169 20 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fa517d1a800 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "test1.c":300 665 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 169 168 170 20 (set (reg:DI 0 ax [148])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [2 pHead+0 S8 A64])) "test1.c":301 81 {*movdi_internal}
     (nil))
(insn 170 169 171 20 (set (reg:DI 5 di)
        (reg:DI 0 ax [148])) "test1.c":301 81 {*movdi_internal}
     (nil))
(call_insn 171 170 172 20 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fa517d1a800 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "test1.c":301 665 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       18
;;              19
;;              20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 172 171 173 21 67 (nil) [2 uses])
(note 173 172 174 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 174 173 175 21 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [1 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [1 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":293 217 {*addsi_1}
     (nil))
;;  succ:       22 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       21 (FALLTHRU,DFS_BACK)
;;              17 [100.0%] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 175 174 176 22 66 (nil) [1 uses])
(note 176 175 178 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 178 176 179 22 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [1 j+0 S4 A32])
            (const_int 99999 [0x1869f]))) "test1.c":293 7 {*cmpsi_1}
     (nil))
(jump_insn 179 178 180 22 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 177)
            (pc))) "test1.c":293 627 {*jcc_1}
     (nil)
 -> 177)
;;  succ:       18
;;              23 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 180 179 181 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 181 180 182 23 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":291 217 {*addsi_1}
     (nil))
;;  succ:       24 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       23 (FALLTHRU,DFS_BACK)
;;              16 [100.0%] 
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 182 181 183 24 65 (nil) [1 uses])
(note 183 182 185 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 185 183 186 24 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])
            (const_int 99 [0x63]))) "test1.c":291 7 {*cmpsi_1}
     (nil))
(jump_insn 186 185 187 24 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 184)
            (pc))) "test1.c":291 627 {*jcc_1}
     (nil)
 -> 184)
;;  succ:       17
;;              25 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 103 149 150 151 152
(note 187 186 188 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 188 187 189 25 (set (reg:DI 0 ax [149])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [7 fp+0 S8 A64])) "test1.c":308 81 {*movdi_internal}
     (nil))
(insn 189 188 190 25 (set (reg:DI 5 di)
        (reg:DI 0 ax [149])) "test1.c":308 81 {*movdi_internal}
     (nil))
(call_insn 190 189 191 25 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7fa517dd2700 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) "test1.c":308 676 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn 191 190 192 25 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("omp_get_wtime") [flags 0x41]  <function_decl 0x7fa517a6c700 omp_get_wtime>) [0 omp_get_wtime S1 A8])
            (const_int 0 [0]))) "test1.c":309 676 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 192 191 193 25 (set (reg:DF 22 xmm1 [orig:103 _17 ] [103])
        (reg:DF 21 xmm0)) "test1.c":309 126 {*movdf_internal}
     (nil))
(insn 193 192 194 25 (set (reg:DF 21 xmm0 [151])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [9 time+0 S8 A64])) "test1.c":309 126 {*movdf_internal}
     (nil))
(insn 194 193 195 25 (set (reg:DF 21 xmm0 [150])
        (plus:DF (reg:DF 21 xmm0 [151])
            (reg:DF 22 xmm1 [orig:103 _17 ] [103]))) "test1.c":309 813 {*fop_df_comm}
     (nil))
(insn 195 194 196 25 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [9 time+0 S8 A64])
        (reg:DF 21 xmm0 [150])) "test1.c":309 126 {*movdf_internal}
     (nil))
(insn 196 195 197 25 (set (reg:DF 0 ax [152])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [9 time+0 S8 A64])) "test1.c":310 126 {*movdf_internal}
     (nil))
(insn 197 196 250 25 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [10 %sfp+-72 S8 A64])
        (reg:DF 0 ax [152])) "test1.c":310 126 {*movdf_internal}
     (nil))
(insn 250 197 198 25 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [10 %sfp+-72 S8 A64])) "test1.c":310 126 {*movdf_internal}
     (nil))
(insn 198 250 199 25 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7fa517afea20 *.LC15>)) "test1.c":310 81 {*movdi_internal}
     (nil))
(insn 199 198 200 25 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) "test1.c":310 84 {*movqi_internal}
     (nil))
(call_insn 200 199 201 25 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fa517cfff00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":310 676 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DF (use (reg:DF 21 xmm0))
                (nil)))))
(insn 201 200 247 25 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])
        (const_int 0 [0])) "test1.c":312 82 {*movsi_internal}
     (nil))
(jump_insn 247 201 248 25 (set (pc)
        (label_ref 214)) "test1.c":312 659 {jump}
     (nil)
 -> 214)
;;  succ:       27 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 248 247 216)
;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       27
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 104 105 106 107 153 154
(code_label 216 248 204 26 71 (nil) [1 uses])
(note 204 216 205 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 205 204 206 26 (set (reg:SI 0 ax [153])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])) "test1.c":314 82 {*movsi_internal}
     (nil))
(insn 206 205 207 26 (set (reg:DI 0 ax [orig:104 _18 ] [104])
        (sign_extend:DI (reg:SI 0 ax [153]))) "test1.c":314 145 {*extendsidi2_rex64}
     (nil))
(insn 207 206 208 26 (parallel [
            (set (reg:DI 1 dx [orig:105 _19 ] [105])
                (ashift:DI (reg:DI 0 ax [orig:104 _18 ] [104])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":314 522 {*ashldi3_1}
     (nil))
(insn 208 207 209 26 (set (reg/f:DI 0 ax [154])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [8 filename_list_array+0 S8 A64])) "test1.c":314 81 {*movdi_internal}
     (nil))
(insn 209 208 210 26 (parallel [
            (set (reg/f:DI 0 ax [orig:106 _20 ] [106])
                (plus:DI (reg/f:DI 0 ax [154])
                    (reg:DI 1 dx [orig:105 _19 ] [105])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":314 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [8 filename_list_array+0 S8 A64])
            (reg:DI 1 dx [orig:105 _19 ] [105]))
        (nil)))
(insn 210 209 211 26 (set (reg/f:DI 0 ax [orig:107 _21 ] [107])
        (mem/f:DI (reg/f:DI 0 ax [orig:106 _20 ] [106]) [3 *_20+0 S8 A64])) "test1.c":314 81 {*movdi_internal}
     (nil))
(insn 211 210 212 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:107 _21 ] [107])) "test1.c":314 81 {*movdi_internal}
     (nil))
(call_insn 212 211 213 26 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fa517d1a800 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "test1.c":314 665 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 213 212 214 26 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":312 217 {*addsi_1}
     (nil))
;;  succ:       27 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL, MODIFIED)
;;  pred:       26 (FALLTHRU,DFS_BACK)
;;              25 [100.0%] 
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 214 213 215 27 70 (nil) [1 uses])
(note 215 214 217 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 217 215 218 27 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])
            (const_int 99 [0x63]))) "test1.c":312 7 {*cmpsi_1}
     (nil))
(jump_insn 218 217 219 27 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 216)
            (pc))) "test1.c":312 627 {*jcc_1}
     (nil)
 -> 216)
;;  succ:       26
;;              28 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 108 155
(note 219 218 220 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 220 219 221 28 (set (reg:DI 0 ax [155])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [8 filename_list_array+0 S8 A64])) "test1.c":316 81 {*movdi_internal}
     (nil))
(insn 221 220 222 28 (set (reg:DI 5 di)
        (reg:DI 0 ax [155])) "test1.c":316 81 {*movdi_internal}
     (nil))
(call_insn 222 221 223 28 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fa517d1a800 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "test1.c":316 665 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 223 222 224 28 (set (reg:SI 0 ax [orig:108 _29 ] [108])
        (const_int 0 [0])) "test1.c":318 82 {*movsi_internal}
     (nil))
;;  succ:       29 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 108

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 1, flags: (RTL, MODIFIED)
;;  pred:       28 (FALLTHRU)
;;              6 [100.0%] 
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 108
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 108
;; lr  def 	 0 [ax] 109
(code_label 224 223 225 29 58 (nil) [1 uses])
(note 225 224 230 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 230 225 231 29 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:109 <retval> ] [109])) "test1.c":319 82 {*movsi_internal}
     (nil))
(insn 231 230 249 29 (use (reg/i:SI 0 ax)) "test1.c":319 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 249 231 0 NOTE_INSN_DELETED)
