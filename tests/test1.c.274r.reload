
;; Function main (main, funcdef_no=0, decl_uid=1795, cgraph_uid=0, symbol_order=1)

      Creating newreg=229
Removing SCRATCH in insn #228 (nop 3)
rescanning insn with uid = 228.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=8896, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=8880, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 5:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 6:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 7:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 8:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 9:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 13:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 14:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 18:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 19:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 23:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 24:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 28:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 29:  (0) m  (1) v {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 33:  (0) v  (1) vm {*extendsfdf2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 37:  (0) v  (1) vm {*truncdfsf_fast_mixed}
      Creating newreg=230, assigning class ALL_SSE_REGS to r230
   37: r230:SF=float_trunc(r88:DF)
      REG_DEAD r88:DF
    Inserting insn reload after:
  293: [frame:DI-0x14]=r230:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 293:  (0) m  (1) v {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 38:  (0) v  (1) vm {*extendsfdf2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 42:  (0) v  (1) vm {*truncdfsf_fast_mixed}
      Creating newreg=231, assigning class ALL_SSE_REGS to r231
   42: r231:SF=float_trunc(r90:DF)
      REG_DEAD r90:DF
    Inserting insn reload after:
  294: [frame:DI-0x18]=r231:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 294:  (0) m  (1) v {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 43:  (0) v  (1) vm {*extendsfdf2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 47:  (0) v  (1) vm {*truncdfsf_fast_mixed}
      Creating newreg=232, assigning class ALL_SSE_REGS to r232
   47: r232:SF=float_trunc(r92:DF)
      REG_DEAD r92:DF
    Inserting insn reload after:
  295: [frame:DI-0x1c]=r232:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 295:  (0) m  (1) v {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 48:  (0) v  (1) vm {*extendsfdf2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 52:  (0) v  (1) vm {*truncdfsf_fast_mixed}
      Creating newreg=233, assigning class ALL_SSE_REGS to r233
   52: r233:SF=float_trunc(r94:DF)
      REG_DEAD r94:DF
    Inserting insn reload after:
  296: [frame:DI-0x20]=r233:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 296:  (0) m  (1) v {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 53:  (0) v  (1) vm {*extendsfdf2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 57:  (0) v  (1) vm {*truncdfsf_fast_mixed}
      Creating newreg=234, assigning class ALL_SSE_REGS to r234
   57: r234:SF=float_trunc(r96:DF)
      REG_DEAD r96:DF
    Inserting insn reload after:
  297: [frame:DI-0x24]=r234:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 297:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 58:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 59:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 60
	 Choosing alt 1 in insn 60:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 61:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 62:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 63:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 64:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=235 from oldreg=97, assigning class SSE_REGS to r235
   64: r235:SF=r235:SF*[frame:DI-0x1c]
      REG_DEAD r97:SF
    Inserting insn reload before:
  298: r235:SF=r97:SF
    Inserting insn reload after:
  299: r98:SF=r235:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 65:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 66:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 67
	 Choosing alt 1 in insn 67:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 68:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 69:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 70:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 71:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=236 from oldreg=175, assigning class SSE_REGS to r236
   71: r236:SF=r236:SF/r101:SF
      REG_DEAD r175:SF
      REG_DEAD r101:SF
    Inserting insn reload before:
  300: r236:SF=r175:SF
    Inserting insn reload after:
  301: r174:SF=r236:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 72:  (0) m  (1) v {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 73:  (0) v  (1) vm {*extendsfdf2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 77:  (0) v  (1) vm {*truncdfsf_fast_mixed}
      Creating newreg=237, assigning class ALL_SSE_REGS to r237
   77: r237:SF=float_trunc(r103:DF)
      REG_DEAD r103:DF
    Inserting insn reload after:
  302: [frame:DI-0x30]=r237:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 302:  (0) m  (1) v {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 78:  (0) v  (1) vm {*extendsfdf2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 82:  (0) v  (1) vm {*truncdfsf_fast_mixed}
      Creating newreg=238, assigning class ALL_SSE_REGS to r238
   82: r238:SF=float_trunc(r105:DF)
      REG_DEAD r105:DF
    Inserting insn reload after:
  303: [frame:DI-0x34]=r238:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 303:  (0) m  (1) v {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 83:  (0) v  (1) vm {*extendsfdf2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 87:  (0) v  (1) vm {*truncdfsf_fast_mixed}
      Creating newreg=239, assigning class ALL_SSE_REGS to r239
   87: r239:SF=float_trunc(r107:DF)
      REG_DEAD r107:DF
    Inserting insn reload after:
  304: [frame:DI-0x38]=r239:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 304:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 88:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 89:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 90:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 91:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 92:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 93:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 94:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 95:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 96:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 97:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 98:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 99:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 100:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 101:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 102:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 103:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 104
	 Choosing alt 1 in insn 104:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 105:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 106:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) v {fix_truncsfsi_sse}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 108:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 109:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 110:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 111:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 112:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 113:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 114:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=240 from oldreg=119, assigning class SSE_REGS to r240
  114: r240:SF=r240:SF*[frame:DI-0x38]
      REG_DEAD r119:SF
    Inserting insn reload before:
  305: r240:SF=r119:SF
    Inserting insn reload after:
  306: r120:SF=r240:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 115:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 116:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 117
	 Choosing alt 1 in insn 117:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 118
	 Choosing alt 1 in insn 118:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 119:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 120:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =r  (1) v {fix_truncsfsi_sse}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 122:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 134
	 Choosing alt 0 in insn 134:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 135:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 136:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 137:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 138:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 139:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 140:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 141:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 142:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 143:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 144:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 145:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 146:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 147:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 148:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 149:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 150:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 151:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 152:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 153:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 154:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 155:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =r  (1) v {fix_truncsfsi_sse}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 157:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 161:  (0) ?mr {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 164:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 172:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 173:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 174:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 182:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 183:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 184:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =r  (2) rm  (3) 0 {*movsicc_noc}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 187:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 188:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 189:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 192:  (0) m  (1) qn {*movqi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 195:  (0) v  (1) vm {*extendsfdf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 196:  (0) v  (1) m {*movdf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 197:  (0) x  (1) 0  (2) xm {*fop_df_comm}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 198:  (0) v  (1) vm {*truncdfsf_fast_mixed}
      Creating newreg=241, assigning class ALL_SSE_REGS to r241
  198: r241:SF=float_trunc(r144:DF)
      REG_DEAD r144:DF
    Inserting insn reload after:
  307: [frame:DI-0xc]=r241:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 307:  (0) m  (1) v {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 201:  (0) v  (1) vm {*extendsfdf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 203:  (0) v  (1) m {*movdf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 204:  (0) v  (1) vm {*cmpiudf}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 207:  (0) v  (1) vm {*extendsfdf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 208:  (0) v  (1) m {*movdf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 209:  (0) x  (1) 0  (2) xm {*fop_df_comm}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 210:  (0) v  (1) vm {*truncdfsf_fast_mixed}
      Creating newreg=242, assigning class ALL_SSE_REGS to r242
  210: r242:SF=float_trunc(r147:DF)
      REG_DEAD r147:DF
    Inserting insn reload after:
  308: [frame:DI-0x10]=r242:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 308:  (0) m  (1) v {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 213:  (0) v  (1) vm {*extendsfdf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 215:  (0) v  (1) m {*movdf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 216:  (0) v  (1) vm {*cmpiudf}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 219:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 220:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 222:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 227:  (0) =r  (1) g {*movsi_internal}
            1 Small class reload: reject+=3
            3 Matching alt: reject+=2
            3 Super set class reg: reject-=3
            3 Small class reload: reject+=3
            3 Non input pseudo reload: reject++
          alt=0,overall=24,losers=3,rld_nregs=2
            1 Small class reload: reject+=3
            3 Matching alt: reject+=2
            3 Super set class reg: reject-=3
            3 Small class reload: reject+=3
            3 Non input pseudo reload: reject++
          alt=0,overall=24,losers=3,rld_nregs=2
	 Choosing alt 0 in insn 228:  (0) =d  (1) %a  (2) rm  (3) =1 {*smulsi3_highpart_1}
      Creating newreg=243 from oldreg=229, assigning class AREG to r243
  228: {r220:SI=trunc(sign_extend(r243:SI)*sign_extend(r221:SI) 0>>0x20);clobber r243:SI;clobber flags:CC;}
      REG_UNUSED r229:SI
      REG_DEAD r221:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  309: r243:SI=r149:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Small class reload: reject+=3
          alt=0,overall=21,losers=2,rld_nregs=2
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 230:  (0) rm  (1) 0 {ashrsi3_cvt}
      Creating newreg=244 from oldreg=223, assigning class GENERAL_REGS to r244
  230: {r244:SI=r244:SI>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  310: r244:SI=r149:SI
    Inserting insn reload after:
  311: r223:SI=r244:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 231:  (0) =rm  (1) 0  (2) re {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 233:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 234:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 235:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 237:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=245 from oldreg=149, assigning class GENERAL_REGS to r245
  237: {r245:SI=r245:SI-r224:SI;clobber flags:CC;}
      REG_DEAD r224:SI
      REG_DEAD r149:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  312: r245:SI=r149:SI
    Inserting insn reload after:
  313: r150:SI=r245:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 243:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 249:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 254:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 255:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 256:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 259:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (0) rm  (1) re {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 264:  (0) v  (1) vm {*extendsfdf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 265:  (0) v  (1) m {*movdf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 266:  (0) x  (1) 0  (2) xm {*fop_df_comm}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 267:  (0) v  (1) vm {*truncdfsf_fast_mixed}
      Creating newreg=246, assigning class ALL_SSE_REGS to r246
  267: r246:SF=float_trunc(r157:DF)
      REG_DEAD r157:DF
    Inserting insn reload after:
  314: [frame:DI-0x4]=r246:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 314:  (0) m  (1) v {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 268:  (0) v  (1) vm {*extendsfdf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 269:  (0) v  (1) m {*movdf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 270:  (0) x  (1) 0  (2) xm {*fop_df_comm}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 271:  (0) v  (1) vm {*truncdfsf_fast_mixed}
      Creating newreg=247, assigning class ALL_SSE_REGS to r247
  271: r247:SF=float_trunc(r159:DF)
      REG_DEAD r159:DF
    Inserting insn reload after:
  315: [frame:DI-0x8]=r247:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 315:  (0) m  (1) v {*movsf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21

********** Pseudo live ranges #1: **********

  BB 12
   Insn 205: point = 0, n_alt = -1
   Insn 204: point = 0, n_alt = 1
   Insn 203: point = 1, n_alt = 14
   Insn 201: point = 2, n_alt = 2
  BB 4
   Insn 284: point = 3, n_alt = -1
   Insn 29: point = 3, n_alt = 8
   Insn 28: point = 4, n_alt = 7
  BB 14
   Insn 217: point = 5, n_alt = -1
   Insn 216: point = 5, n_alt = 1
   Insn 215: point = 6, n_alt = 14
   Insn 213: point = 7, n_alt = 2
  BB 3
   Insn 282: point = 8, n_alt = -1
   Insn 24: point = 8, n_alt = 8
   Insn 23: point = 9, n_alt = 7
   Insn 22: point = 10, n_alt = 0
   Insn 21: point = 10, n_alt = -2
   Insn 20: point = 11, n_alt = 0
   Insn 19: point = 11, n_alt = 2
   Insn 18: point = 11, n_alt = 3
   Insn 17: point = 12, n_alt = 0
   Insn 16: point = 12, n_alt = -2
   Insn 15: point = 13, n_alt = 0
   Insn 14: point = 13, n_alt = 2
   Insn 13: point = 13, n_alt = 3
  BB 21
   Insn 290: point = 14, n_alt = -1
   Insn 315: point = 14, n_alt = 8
   Insn 271: point = 15, n_alt = 1
   Insn 270: point = 17, n_alt = 1
   Insn 269: point = 19, n_alt = 14
   Insn 268: point = 20, n_alt = 2
   Insn 314: point = 21, n_alt = 8
   Insn 267: point = 22, n_alt = 1
   Insn 266: point = 24, n_alt = 1
   Insn 265: point = 26, n_alt = 14
   Insn 264: point = 27, n_alt = 2
  BB 20
   Insn 262: point = 28, n_alt = -1
   Insn 261: point = 28, n_alt = 0
   Insn 259: point = 29, n_alt = 0
  BB 15
   Insn 286: point = 30, n_alt = -1
   Insn 222: point = 30, n_alt = 1
   Insn 221: point = 30, n_alt = 0
   Insn 220: point = 30, n_alt = 1
   Insn 219: point = 30, n_alt = 4
  BB 19
   Insn 256: point = 30, n_alt = 1
   Insn 255: point = 31, n_alt = 0
   Insn 254: point = 33, n_alt = 0
   Insn 253: point = 34, n_alt = 0
   Insn 252: point = 34, n_alt = -2
  BB 17
   Insn 288: point = 36, n_alt = -1
   Insn 244: point = 36, n_alt = 0
   Insn 243: point = 38, n_alt = 2
   Insn 242: point = 40, n_alt = 0
   Insn 241: point = 42, n_alt = 0
  BB 18
   Insn 249: point = 43, n_alt = 0
  BB 16
   Insn 239: point = 44, n_alt = -1
   Insn 238: point = 44, n_alt = 0
   Insn 313: point = 45, n_alt = -2
	Hard reg 1 is preferable by r245 with profit 1
   Insn 237: point = 47, n_alt = 0
   Insn 312: point = 48, n_alt = -2
	Hard reg 1 is preferable by r245 with profit 1
	Hard reg 2 is preferable by r245 with profit 1
   Insn 236: point = 50, n_alt = -2
   Insn 235: point = 52, n_alt = 0
   Insn 234: point = 54, n_alt = 0
   Insn 233: point = 55, n_alt = 0
   Insn 232: point = 55, n_alt = -2
   Insn 231: point = 56, n_alt = 0
   Insn 311: point = 58, n_alt = -2
	Hard reg 0 is preferable by r244 with profit 1
   Insn 230: point = 60, n_alt = 1
   Insn 310: point = 60, n_alt = -2
   Insn 229: point = 61, n_alt = 0
   Insn 228: point = 63, n_alt = 0
   Insn 309: point = 65, n_alt = -2
   Insn 227: point = 66, n_alt = 0
   Insn 226: point = 67, n_alt = 0
  BB 2
   Insn 11: point = 68, n_alt = 0
   Insn 10: point = 68, n_alt = 1
   Insn 9: point = 68, n_alt = 4
   Insn 8: point = 68, n_alt = 8
   Insn 7: point = 69, n_alt = 7
   Insn 6: point = 70, n_alt = 8
   Insn 5: point = 71, n_alt = 7
  BB 13
   Insn 308: point = 72, n_alt = 8
   Insn 210: point = 73, n_alt = 1
   Insn 209: point = 75, n_alt = 1
   Insn 208: point = 77, n_alt = 14
   Insn 207: point = 78, n_alt = 2
  BB 11
   Insn 307: point = 79, n_alt = 8
   Insn 198: point = 80, n_alt = 1
   Insn 197: point = 82, n_alt = 1
   Insn 196: point = 84, n_alt = 14
   Insn 195: point = 85, n_alt = 2
  BB 10
   Insn 192: point = 86, n_alt = 6
   Insn 191: point = 87, n_alt = 0
   Insn 190: point = 89, n_alt = 0
   Insn 189: point = 90, n_alt = 2
   Insn 188: point = 92, n_alt = 4
   Insn 187: point = 93, n_alt = 1
   Insn 186: point = 95, n_alt = 0
   Insn 184: point = 97, n_alt = 1
   Insn 185: point = 97, n_alt = 0
   Insn 183: point = 98, n_alt = 8
   Insn 182: point = 99, n_alt = 7
   Insn 181: point = 100, n_alt = 0
   Insn 180: point = 102, n_alt = 0
  BB 9
   Insn 175: point = 103, n_alt = -1
   Insn 174: point = 103, n_alt = 1
   Insn 173: point = 104, n_alt = 7
   Insn 172: point = 105, n_alt = 7
   Insn 171: point = 107, n_alt = 0
   Insn 170: point = 109, n_alt = 0
  BB 8
   Insn 168: point = 110, n_alt = -1
   Insn 167: point = 110, n_alt = 0
  BB 7
   Insn 165: point = 110, n_alt = -1
   Insn 164: point = 110, n_alt = 1
  BB 6
   Insn 162: point = 110, n_alt = -1
   Insn 161: point = 110, n_alt = 1
  BB 5
   Insn 159: point = 110, n_alt = -1
   Insn 158: point = 110, n_alt = 0
   Insn 157: point = 110, n_alt = 1
   Insn 156: point = 111, n_alt = 0
   Insn 155: point = 113, n_alt = 1
   Insn 154: point = 115, n_alt = 7
   Insn 153: point = 116, n_alt = 2
   Insn 152: point = 118, n_alt = 1
   Insn 151: point = 120, n_alt = 1
   Insn 150: point = 122, n_alt = 7
   Insn 149: point = 123, n_alt = 2
   Insn 148: point = 125, n_alt = 1
   Insn 147: point = 127, n_alt = 7
   Insn 146: point = 128, n_alt = 2
   Insn 145: point = 130, n_alt = 1
   Insn 144: point = 132, n_alt = 1
   Insn 143: point = 134, n_alt = 7
   Insn 142: point = 135, n_alt = 1
   Insn 141: point = 137, n_alt = 2
   Insn 140: point = 139, n_alt = 1
   Insn 139: point = 141, n_alt = 1
   Insn 138: point = 143, n_alt = 7
   Insn 137: point = 144, n_alt = 1
   Insn 136: point = 146, n_alt = 7
   Insn 135: point = 147, n_alt = 1
   Insn 134: point = 148, n_alt = 0
   Insn 133: point = 150, n_alt = 0
   Insn 129: point = 151, n_alt = -2
   Insn 128: point = 153, n_alt = -2
   Insn 127: point = 155, n_alt = 0
   Insn 126: point = 157, n_alt = 0
   Insn 125: point = 158, n_alt = 0
   Insn 124: point = 158, n_alt = -2
   Insn 123: point = 159, n_alt = 0
   Insn 122: point = 160, n_alt = 1
   Insn 121: point = 161, n_alt = 0
   Insn 120: point = 163, n_alt = 1
   Insn 119: point = 165, n_alt = 7
   Insn 118: point = 166, n_alt = 1
   Insn 117: point = 168, n_alt = 1
   Insn 116: point = 170, n_alt = 1
   Insn 115: point = 172, n_alt = 7
   Insn 306: point = 173, n_alt = -2
	Hard reg 23 is preferable by r240 with profit 1
   Insn 114: point = 175, n_alt = 1
   Insn 305: point = 175, n_alt = -2
	Hard reg 23 is preferable by r240 with profit 1
	Hard reg 21 is preferable by r240 with profit 1
   Insn 113: point = 177, n_alt = 1
   Insn 112: point = 179, n_alt = 7
   Insn 111: point = 180, n_alt = 1
   Insn 110: point = 182, n_alt = 7
   Insn 109: point = 183, n_alt = 7
   Insn 108: point = 184, n_alt = 1
   Insn 107: point = 185, n_alt = 0
   Insn 106: point = 187, n_alt = 1
   Insn 105: point = 189, n_alt = 7
   Insn 104: point = 190, n_alt = 1
   Insn 103: point = 192, n_alt = 2
   Insn 102: point = 194, n_alt = 1
   Insn 101: point = 196, n_alt = 7
   Insn 100: point = 197, n_alt = 1
   Insn 99: point = 199, n_alt = 1
   Insn 98: point = 201, n_alt = 7
   Insn 97: point = 202, n_alt = 1
   Insn 96: point = 204, n_alt = 7
   Insn 95: point = 205, n_alt = 7
   Insn 94: point = 206, n_alt = 8
   Insn 93: point = 207, n_alt = 2
   Insn 92: point = 209, n_alt = 1
   Insn 91: point = 211, n_alt = 7
   Insn 90: point = 212, n_alt = 1
   Insn 89: point = 214, n_alt = 1
   Insn 88: point = 216, n_alt = 7
   Insn 304: point = 217, n_alt = 8
   Insn 87: point = 218, n_alt = 1
   Insn 86: point = 220, n_alt = -2
   Insn 85: point = 221, n_alt = 0
   Insn 84: point = 221, n_alt = -2
   Insn 83: point = 222, n_alt = 2
   Insn 303: point = 223, n_alt = 8
   Insn 82: point = 224, n_alt = 1
   Insn 81: point = 226, n_alt = -2
   Insn 80: point = 227, n_alt = 0
   Insn 79: point = 227, n_alt = -2
   Insn 78: point = 228, n_alt = 2
   Insn 302: point = 229, n_alt = 8
   Insn 77: point = 230, n_alt = 1
   Insn 76: point = 232, n_alt = -2
   Insn 75: point = 233, n_alt = 0
   Insn 74: point = 233, n_alt = -2
   Insn 73: point = 234, n_alt = 2
   Insn 72: point = 235, n_alt = 8
   Insn 301: point = 236, n_alt = -2
	Hard reg 21 is preferable by r236 with profit 1
   Insn 71: point = 238, n_alt = 2
   Insn 300: point = 239, n_alt = -2
	Hard reg 21 is preferable by r236 with profit 1
	Hard reg 22 is preferable by r236 with profit 1
   Insn 70: point = 241, n_alt = 7
   Insn 69: point = 242, n_alt = 1
   Insn 68: point = 244, n_alt = 7
   Insn 67: point = 245, n_alt = 1
   Insn 66: point = 247, n_alt = 1
   Insn 65: point = 249, n_alt = 7
   Insn 299: point = 250, n_alt = -2
	Hard reg 22 is preferable by r235 with profit 1
   Insn 64: point = 252, n_alt = 1
   Insn 298: point = 252, n_alt = -2
	Hard reg 22 is preferable by r235 with profit 1
	Hard reg 21 is preferable by r235 with profit 1
   Insn 63: point = 254, n_alt = 1
   Insn 62: point = 256, n_alt = 7
   Insn 61: point = 257, n_alt = 8
   Insn 60: point = 258, n_alt = 1
   Insn 59: point = 260, n_alt = 7
   Insn 58: point = 261, n_alt = 7
   Insn 297: point = 262, n_alt = 8
   Insn 57: point = 263, n_alt = 1
   Insn 56: point = 265, n_alt = -2
   Insn 55: point = 266, n_alt = 0
   Insn 54: point = 266, n_alt = -2
   Insn 53: point = 267, n_alt = 2
   Insn 296: point = 268, n_alt = 8
   Insn 52: point = 269, n_alt = 1
   Insn 51: point = 271, n_alt = -2
   Insn 50: point = 272, n_alt = 0
   Insn 49: point = 272, n_alt = -2
   Insn 48: point = 273, n_alt = 2
   Insn 295: point = 274, n_alt = 8
   Insn 47: point = 275, n_alt = 1
   Insn 46: point = 277, n_alt = -2
   Insn 45: point = 278, n_alt = 0
   Insn 44: point = 278, n_alt = -2
   Insn 43: point = 279, n_alt = 2
   Insn 294: point = 280, n_alt = 8
   Insn 42: point = 281, n_alt = 1
   Insn 41: point = 283, n_alt = -2
   Insn 40: point = 284, n_alt = 0
   Insn 39: point = 284, n_alt = -2
   Insn 38: point = 285, n_alt = 2
   Insn 293: point = 286, n_alt = 8
   Insn 37: point = 287, n_alt = 1
   Insn 36: point = 289, n_alt = -2
   Insn 35: point = 290, n_alt = 0
   Insn 34: point = 290, n_alt = -2
   Insn 33: point = 291, n_alt = 2
 r87: [290..291]
 r88: [288..289]
 r89: [284..285]
 r90: [282..283]
 r91: [278..279]
 r92: [276..277]
 r93: [272..273]
 r94: [270..271]
 r95: [266..267]
 r96: [264..265]
 r97: [253..254]
 r98: [246..250]
 r99: [246..247]
 r100: [243..245]
 r101: [238..242]
 r102: [233..234]
 r103: [231..232]
 r104: [227..228]
 r105: [225..226]
 r106: [221..222]
 r107: [219..220]
 r108: [213..214]
 r109: [208..212]
 r110: [208..209]
 r111: [191..202]
 r112: [198..199]
 r113: [193..197]
 r114: [193..194]
 r115: [191..192]
 r116: [188..190]
 r117: [186..187]
 r118: [167..180]
 r119: [176..177]
 r120: [169..173]
 r121: [169..170]
 r122: [167..168]
 r123: [164..166]
 r124: [162..163]
 r125: [149..151]
 r126: [138..144]
 r127: [140..141]
 r128: [138..139]
 r129: [136..137]
 r130: [129..135]
 r131: [131..132]
 r132: [129..130]
 r133: [124..128]
 r134: [124..125]
 r135: [117..123]
 r136: [119..120]
 r137: [117..118]
 r138: [114..116]
 r139: [112..113]
 r140: [103..105]
 r141: [94..95]
 r142: [86..90]
 r143: [83..85]
 r144: [81..82]
 r145: [0..2]
 r146: [76..78]
 r147: [74..75]
 r148: [5..7]
 r149: [49..67]
 r150: [54..56] [44..45]
 r151: [41..42]
 r152: [37..38]
 r153: [32..33]
 r154: [30..31]
 r155: [28..29]
 r156: [25..27]
 r157: [23..24]
 r158: [18..20]
 r159: [16..17]
 r160: [43..43] [34..36]
 r162: [70..71]
 r163: [68..69]
 r164: [12..13]
 r165: [10..11]
 r166: [8..9]
 r167: [3..4]
 r168: [257..258]
 r169: [259..261]
 r170: [259..260]
 r171: [255..256]
 r172: [248..249]
 r173: [243..244]
 r174: [235..236]
 r175: [240..241]
 r176: [215..216]
 r177: [210..211]
 r178: [206..207]
 r179: [203..205]
 r180: [203..204]
 r181: [200..201]
 r182: [195..196]
 r183: [188..189]
 r184: [184..185]
 r185: [181..183]
 r186: [181..182]
 r187: [178..179]
 r188: [171..172]
 r189: [164..165]
 r190: [160..161]
 r191: [157..159]
 r192: [156..158] [152..153]
 r193: [154..155]
 r196: [147..148]
 r197: [149..150]
 r198: [145..146]
 r199: [142..143]
 r200: [133..134]
 r201: [126..127]
 r202: [121..122]
 r203: [114..115]
 r204: [110..111]
 r205: [106..107]
 r206: [108..109]
 r207: [103..104]
 r208: [98..100]
 r209: [101..102]
 r210: [98..99]
 r211: [96..97]
 r212: [91..93]
 r213: [91..92]
 r214: [86..87]
 r215: [88..89]
 r216: [83..84]
 r217: [0..1]
 r218: [76..77]
 r219: [5..6]
 r220: [62..63]
 r221: [64..66]
 r222: [57..61]
 r223: [57..58]
 r224: [53..55] [47..50]
 r225: [51..52]
 r226: [39..40]
 r227: [25..26]
 r228: [18..19]
 r230: [286..287]
 r231: [280..281]
 r232: [274..275]
 r233: [268..269]
 r234: [262..263]
 r235: [251..252]
 r236: [237..239]
 r237: [229..230]
 r238: [223..224]
 r239: [217..218]
 r240: [174..175]
 r241: [79..80]
 r242: [72..73]
 r243: [63..65]
 r244: [59..60]
 r245: [46..48]
 r246: [21..22]
 r247: [14..15]
Compressing live ranges: from 292 to 253 - 86%
Ranges after the compression:
 r87: [251..252]
 r88: [249..250]
 r89: [245..246]
 r90: [243..244]
 r91: [239..240]
 r92: [237..238]
 r93: [233..234]
 r94: [231..232]
 r95: [227..228]
 r96: [225..226]
 r97: [215..216]
 r98: [209..212]
 r99: [209..210]
 r100: [207..208]
 r101: [203..206]
 r102: [199..200]
 r103: [197..198]
 r104: [193..194]
 r105: [191..192]
 r106: [187..188]
 r107: [185..186]
 r108: [179..180]
 r109: [175..178]
 r110: [175..176]
 r111: [161..170]
 r112: [167..168]
 r113: [163..166]
 r114: [163..164]
 r115: [161..162]
 r116: [159..160]
 r117: [157..158]
 r118: [141..152]
 r119: [149..150]
 r120: [143..146]
 r121: [143..144]
 r122: [141..142]
 r123: [139..140]
 r124: [137..138]
 r125: [127..128]
 r126: [117..122]
 r127: [119..120]
 r128: [117..118]
 r129: [115..116]
 r130: [109..114]
 r131: [111..112]
 r132: [109..110]
 r133: [105..108]
 r134: [105..106]
 r135: [99..104]
 r136: [101..102]
 r137: [99..100]
 r138: [97..98]
 r139: [95..96]
 r140: [87..88]
 r141: [79..80]
 r142: [73..76]
 r143: [71..72]
 r144: [69..70]
 r145: [0..1]
 r146: [65..66]
 r147: [63..64]
 r148: [4..5]
 r149: [43..56]
 r150: [47..48] [39..40]
 r151: [36..37]
 r152: [32..33]
 r153: [28..29]
 r154: [26..27]
 r155: [24..25]
 r156: [22..23]
 r157: [20..21]
 r158: [16..17]
 r159: [14..15]
 r160: [38..38] [30..31]
 r162: [59..60]
 r163: [57..58]
 r164: [10..11]
 r165: [8..9]
 r166: [6..7]
 r167: [2..3]
 r168: [219..220]
 r169: [221..222]
 r170: [221..222]
 r171: [217..218]
 r172: [211..212]
 r173: [207..208]
 r174: [201..202]
 r175: [205..206]
 r176: [181..182]
 r177: [177..178]
 r178: [173..174]
 r179: [171..172]
 r180: [171..172]
 r181: [169..170]
 r182: [165..166]
 r183: [159..160]
 r184: [155..156]
 r185: [153..154]
 r186: [153..154]
 r187: [151..152]
 r188: [145..146]
 r189: [139..140]
 r190: [135..136]
 r191: [133..134]
 r192: [133..134] [129..130]
 r193: [131..132]
 r196: [125..126]
 r197: [127..128]
 r198: [123..124]
 r199: [121..122]
 r200: [113..114]
 r201: [107..108]
 r202: [103..104]
 r203: [97..98]
 r204: [93..94]
 r205: [89..90]
 r206: [91..92]
 r207: [87..88]
 r208: [83..84]
 r209: [85..86]
 r210: [83..84]
 r211: [81..82]
 r212: [77..78]
 r213: [77..78]
 r214: [73..74]
 r215: [75..76]
 r216: [71..72]
 r217: [0..1]
 r218: [65..66]
 r219: [4..5]
 r220: [53..54]
 r221: [55..56]
 r222: [49..52]
 r223: [49..50]
 r224: [47..48] [41..44]
 r225: [45..46]
 r226: [34..35]
 r227: [22..23]
 r228: [16..17]
 r230: [247..248]
 r231: [241..242]
 r232: [235..236]
 r233: [229..230]
 r234: [223..224]
 r235: [213..214]
 r236: [203..204]
 r237: [195..196]
 r238: [189..190]
 r239: [183..184]
 r240: [147..148]
 r241: [67..68]
 r242: [61..62]
 r243: [54..56]
 r244: [51..52]
 r245: [41..42]
 r246: [18..19]
 r247: [12..13]

********** Assignment #1: **********

	 Assigning to 243 (cl=AREG, orig=229, freq=2, tfirst=243, tfreq=2)...
	   Assign 0 to reload r243 (freq=2)
	 Assigning to 244 (cl=GENERAL_REGS, orig=223, freq=3, tfirst=244, tfreq=3)...
	   Assign 0 to reload r244 (freq=3)
	 Assigning to 245 (cl=GENERAL_REGS, orig=149, freq=3, tfirst=245, tfreq=3)...
	   Assign 2 to reload r245 (freq=3)
	 Assigning to 235 (cl=SSE_REGS, orig=97, freq=3, tfirst=235, tfreq=3)...
	   Assign 22 to reload r235 (freq=3)
	 Assigning to 236 (cl=SSE_REGS, orig=175, freq=3, tfirst=236, tfreq=3)...
	   Assign 22 to reload r236 (freq=3)
	 Assigning to 240 (cl=SSE_REGS, orig=119, freq=3, tfirst=240, tfreq=3)...
	   Assign 23 to reload r240 (freq=3)
	 Assigning to 230 (cl=ALL_SSE_REGS, orig=230, freq=2, tfirst=230, tfreq=2)...
	   Assign 24 to reload r230 (freq=2)
	 Assigning to 231 (cl=ALL_SSE_REGS, orig=231, freq=2, tfirst=231, tfreq=2)...
	   Assign 25 to reload r231 (freq=2)
	 Assigning to 232 (cl=ALL_SSE_REGS, orig=232, freq=2, tfirst=232, tfreq=2)...
	   Assign 26 to reload r232 (freq=2)
	 Assigning to 233 (cl=ALL_SSE_REGS, orig=233, freq=2, tfirst=233, tfreq=2)...
	   Assign 27 to reload r233 (freq=2)
	 Assigning to 234 (cl=ALL_SSE_REGS, orig=234, freq=2, tfirst=234, tfreq=2)...
	   Assign 28 to reload r234 (freq=2)
	 Assigning to 237 (cl=ALL_SSE_REGS, orig=237, freq=2, tfirst=237, tfreq=2)...
	   Assign 24 to reload r237 (freq=2)
	 Assigning to 238 (cl=ALL_SSE_REGS, orig=238, freq=2, tfirst=238, tfreq=2)...
	   Assign 25 to reload r238 (freq=2)
	 Assigning to 239 (cl=ALL_SSE_REGS, orig=239, freq=2, tfirst=239, tfreq=2)...
	   Assign 26 to reload r239 (freq=2)
	 Assigning to 241 (cl=ALL_SSE_REGS, orig=241, freq=2, tfirst=241, tfreq=2)...
	   Assign 27 to reload r241 (freq=2)
	 Assigning to 242 (cl=ALL_SSE_REGS, orig=242, freq=2, tfirst=242, tfreq=2)...
	   Assign 28 to reload r242 (freq=2)
	 Assigning to 246 (cl=ALL_SSE_REGS, orig=246, freq=2, tfirst=246, tfreq=2)...
	   Assign 24 to reload r246 (freq=2)
	 Assigning to 247 (cl=ALL_SSE_REGS, orig=247, freq=2, tfirst=247, tfreq=2)...
	   Assign 25 to reload r247 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=8896, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=8880, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 33
changing reg in insn 34
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 56
changing reg in insn 57
changing reg in insn 63
changing reg in insn 66
changing reg in insn 67
changing reg in insn 69
changing reg in insn 69
changing reg in insn 71
changing reg in insn 73
changing reg in insn 74
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 86
changing reg in insn 87
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 93
changing reg in insn 92
changing reg in insn 93
changing reg in insn 97
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 103
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 106
changing reg in insn 106
changing reg in insn 107
changing reg in insn 111
changing reg in insn 113
changing reg in insn 116
changing reg in insn 117
changing reg in insn 118
changing reg in insn 120
changing reg in insn 120
changing reg in insn 121
changing reg in insn 129
changing reg in insn 134
changing reg in insn 137
changing reg in insn 141
changing reg in insn 139
changing reg in insn 140
changing reg in insn 140
changing reg in insn 141
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 146
changing reg in insn 144
changing reg in insn 145
changing reg in insn 145
changing reg in insn 146
changing reg in insn 146
changing reg in insn 149
changing reg in insn 148
changing reg in insn 149
changing reg in insn 149
changing reg in insn 153
changing reg in insn 151
changing reg in insn 152
changing reg in insn 152
changing reg in insn 153
changing reg in insn 153
changing reg in insn 155
changing reg in insn 155
changing reg in insn 156
changing reg in insn 172
changing reg in insn 174
changing reg in insn 186
changing reg in insn 187
changing reg in insn 189
changing reg in insn 192
changing reg in insn 195
changing reg in insn 197
changing reg in insn 197
changing reg in insn 198
changing reg in insn 201
changing reg in insn 204
changing reg in insn 207
changing reg in insn 209
changing reg in insn 209
changing reg in insn 210
changing reg in insn 213
changing reg in insn 216
changing reg in insn 226
changing reg in insn 231
changing reg in insn 231
changing reg in insn 238
changing reg in insn 234
changing reg in insn 232
changing reg in insn 234
changing reg in insn 241
changing reg in insn 242
changing reg in insn 243
changing reg in insn 244
changing reg in insn 254
changing reg in insn 255
changing reg in insn 255
changing reg in insn 256
changing reg in insn 259
changing reg in insn 261
changing reg in insn 264
changing reg in insn 266
changing reg in insn 266
changing reg in insn 267
changing reg in insn 268
changing reg in insn 270
changing reg in insn 270
changing reg in insn 271
changing reg in insn 249
changing reg in insn 244
changing reg in insn 252
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 13
changing reg in insn 16
changing reg in insn 18
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 28
changing reg in insn 29
changing reg in insn 60
changing reg in insn 61
changing reg in insn 58
changing reg in insn 59
changing reg in insn 62
changing reg in insn 63
changing reg in insn 65
changing reg in insn 66
changing reg in insn 68
changing reg in insn 69
changing reg in insn 72
changing reg in insn 70
changing reg in insn 88
changing reg in insn 89
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 97
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 101
changing reg in insn 102
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 109
changing reg in insn 111
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 113
changing reg in insn 115
changing reg in insn 116
changing reg in insn 119
changing reg in insn 120
changing reg in insn 121
changing reg in insn 122
changing reg in insn 123
changing reg in insn 126
changing reg in insn 124
changing reg in insn 126
changing reg in insn 128
changing reg in insn 126
changing reg in insn 125
changing reg in insn 124
changing reg in insn 129
changing reg in insn 127
changing reg in insn 126
changing reg in insn 125
changing reg in insn 127
changing reg in insn 128
changing reg in insn 134
changing reg in insn 135
changing reg in insn 133
changing reg in insn 136
changing reg in insn 137
changing reg in insn 138
changing reg in insn 139
changing reg in insn 143
changing reg in insn 144
changing reg in insn 147
changing reg in insn 148
changing reg in insn 150
changing reg in insn 151
changing reg in insn 154
changing reg in insn 155
changing reg in insn 156
changing reg in insn 157
changing reg in insn 171
changing reg in insn 172
changing reg in insn 170
changing reg in insn 171
changing reg in insn 173
changing reg in insn 174
changing reg in insn 181
changing reg in insn 183
changing reg in insn 180
changing reg in insn 181
changing reg in insn 182
changing reg in insn 183
changing reg in insn 185
changing reg in insn 186
changing reg in insn 187
changing reg in insn 189
changing reg in insn 188
changing reg in insn 189
changing reg in insn 191
changing reg in insn 192
changing reg in insn 190
changing reg in insn 191
changing reg in insn 196
changing reg in insn 197
changing reg in insn 203
changing reg in insn 204
changing reg in insn 208
changing reg in insn 209
changing reg in insn 215
changing reg in insn 216
changing reg in insn 228
changing reg in insn 229
changing reg in insn 227
changing reg in insn 228
changing reg in insn 229
changing reg in insn 231
changing reg in insn 231
changing reg in insn 236
changing reg in insn 234
changing reg in insn 233
changing reg in insn 232
changing reg in insn 237
changing reg in insn 235
changing reg in insn 234
changing reg in insn 233
changing reg in insn 235
changing reg in insn 236
changing reg in insn 242
changing reg in insn 243
changing reg in insn 265
changing reg in insn 266
changing reg in insn 269
changing reg in insn 270
deleting insn with uid = 34.
deleting insn with uid = 36.
deleting insn with uid = 39.
deleting insn with uid = 41.
deleting insn with uid = 44.
deleting insn with uid = 46.
deleting insn with uid = 49.
deleting insn with uid = 51.
deleting insn with uid = 54.
deleting insn with uid = 56.
deleting insn with uid = 299.
deleting insn with uid = 300.
deleting insn with uid = 74.
deleting insn with uid = 76.
deleting insn with uid = 79.
deleting insn with uid = 81.
deleting insn with uid = 84.
deleting insn with uid = 86.
deleting insn with uid = 306.
deleting insn with uid = 128.
deleting insn with uid = 311.
deleting insn with uid = 236.
deleting insn with uid = 312.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 35.
verify found no changes in insn with uid = 40.
verify found no changes in insn with uid = 45.
verify found no changes in insn with uid = 50.
verify found no changes in insn with uid = 55.
verify found no changes in insn with uid = 75.
verify found no changes in insn with uid = 80.
verify found no changes in insn with uid = 85.
verify found no changes in insn with uid = 221.
verify found no changes in insn with uid = 253.


main

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7]
;;  ref usage 	r0={52d,37u} r1={25d,13u,3e} r2={16d,4u,1e} r4={16d,2u} r5={19d,5u} r6={1d,114u} r7={1d,34u} r8={13d} r9={13d} r10={13d} r11={13d} r12={13d} r13={13d} r14={13d} r15={13d} r17={38d,10u} r18={13d} r19={13d} r20={1d,1u,1e} r21={74d,68u} r22={47d,33u} r23={18d,4u} r24={17d,3u} r25={17d,3u} r26={16d,2u} r27={16d,2u} r28={16d,2u} r29={13d} r30={13d} r31={13d} r32={13d} r33={13d} r34={13d} r35={13d} r36={13d} r37={14d} r38={14d} r39={13d} r40={13d} r45={13d} r46={13d} r47={13d} r48={13d} r49={13d} r50={13d} r51={13d} r52={13d} r53={13d} r54={13d} r55={13d} r56={13d} r57={13d} r58={13d} r59={13d} r60={13d} r61={13d} r62={13d} r63={13d} r64={13d} r65={13d} r66={13d} r67={13d} r68={13d} r69={13d} r70={13d} r71={13d} r72={13d} r73={13d} r74={13d} r75={13d} r76={13d} r77={13d} r78={13d} r79={13d} r80={13d} 
;;    total ref usage 1488{1146d,337u,5e} in 230{217 regular + 13 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 162 163
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SF 21 xmm0 [162])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [2  S4 A32])) "test1.c":4 127 {*movsf_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [2 A+0 S4 A32])
        (reg:SF 21 xmm0 [162])) "test1.c":4 127 {*movsf_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SF 21 xmm0 [163])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [2  S4 A32])) "test1.c":5 127 {*movsf_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 B+0 S4 A32])
        (reg:SF 21 xmm0 [163])) "test1.c":5 127 {*movsf_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f84e0b383f0 *.LC1>)) "test1.c":6 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":6 84 {*movqi_internal}
     (nil))
(call_insn 11 10 272 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f84e0a83f00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":6 676 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              21 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 164 165 166
(code_label 272 11 12 3 12 (nil) [1 uses])
(note 12 272 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (parallel [
            (set (reg:DI 0 ax [164])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -8880 [0xffffffffffffdd50])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":7 218 {*adddi_1}
     (nil))
(insn 14 13 15 3 (set (reg:DI 1 dx)
        (const_int 1760 [0x6e0])) "test1.c":7 81 {*movdi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:SI 4 si)
        (const_int 32 [0x20])) "test1.c":7 82 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [164])) "test1.c":7 81 {*movdi_internal}
     (nil))
(call_insn 17 16 18 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memset") [flags 0x41]  <function_decl 0x7f84e0a7af00 memset>) [0 __builtin_memset S1 A8])
            (const_int 0 [0]))) "test1.c":7 676 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 18 17 19 3 (parallel [
            (set (reg:DI 0 ax [165])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -7120 [0xffffffffffffe430])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":7 218 {*adddi_1}
     (nil))
(insn 19 18 20 3 (set (reg:DI 1 dx)
        (const_int 7040 [0x1b80])) "test1.c":7 81 {*movdi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:SI 4 si)
        (const_int 0 [0])) "test1.c":7 82 {*movsi_internal}
     (nil))
(insn 21 20 22 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [165])) "test1.c":7 81 {*movdi_internal}
     (nil))
(call_insn 22 21 23 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memset") [flags 0x41]  <function_decl 0x7f84e0a7af00 memset>) [0 __builtin_memset S1 A8])
            (const_int 0 [0]))) "test1.c":7 676 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 23 22 24 3 (set (reg:SF 21 xmm0 [166])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [2  S4 A32])) "test1.c":8 127 {*movsf_internal}
     (nil))
(insn 24 23 282 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 j+0 S4 A32])
        (reg:SF 21 xmm0 [166])) "test1.c":8 127 {*movsf_internal}
     (nil))
(jump_insn 282 24 283 3 (set (pc)
        (label_ref 211)) "test1.c":8 659 {jump}
     (nil)
 -> 211)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 283 282 214)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       14
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 167
(code_label 214 283 27 4 7 (nil) [1 uses])
(note 27 214 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 4 (set (reg:SF 21 xmm0 [167])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [2  S4 A32])) "test1.c":8 127 {*movsf_internal}
     (nil))
(insn 29 28 284 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 i+0 S4 A32])
        (reg:SF 21 xmm0 [167])) "test1.c":8 127 {*movsf_internal}
     (nil))
(jump_insn 284 29 285 4 (set (pc)
        (label_ref 199)) "test1.c":8 659 {jump}
     (nil)
 -> 199)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 285 284 202)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       12
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 196 197 198 199 200 201 202 203 204
(code_label 202 285 32 5 6 (nil) [1 uses])
(note 32 202 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 35 5 (set (reg:DF 21 xmm0 [orig:87 _1 ] [87])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [2 i+0 S4 A32]))) "test1.c":9 154 {*extendsfdf2}
     (nil))
(call_insn/u 35 33 37 5 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x7f84e0a5ee00 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) "test1.c":9 676 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 37 35 293 5 (set (reg:SF 24 xmm3 [230])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:88 _2 ] [88]))) "test1.c":9 157 {*truncdfsf_fast_mixed}
     (nil))
(insn 293 37 38 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 c+0 S4 A32])
        (reg:SF 24 xmm3 [230])) "test1.c":9 127 {*movsf_internal}
     (nil))
(insn 38 293 40 5 (set (reg:DF 21 xmm0 [orig:89 _3 ] [89])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [2 j+0 S4 A32]))) "test1.c":9 154 {*extendsfdf2}
     (nil))
(call_insn/u 40 38 42 5 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7f84e0a2fa00 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) "test1.c":9 676 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 42 40 294 5 (set (reg:SF 25 xmm4 [231])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:90 _4 ] [90]))) "test1.c":9 157 {*truncdfsf_fast_mixed}
     (nil))
(insn 294 42 43 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 d+0 S4 A32])
        (reg:SF 25 xmm4 [231])) "test1.c":9 127 {*movsf_internal}
     (nil))
(insn 43 294 45 5 (set (reg:DF 21 xmm0 [orig:91 _5 ] [91])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [2 A+0 S4 A32]))) "test1.c":10 154 {*extendsfdf2}
     (nil))
(call_insn/u 45 43 47 5 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x7f84e0a5ee00 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) "test1.c":10 676 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 47 45 295 5 (set (reg:SF 26 xmm5 [232])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:92 _6 ] [92]))) "test1.c":9 157 {*truncdfsf_fast_mixed}
     (nil))
(insn 295 47 48 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 e+0 S4 A32])
        (reg:SF 26 xmm5 [232])) "test1.c":9 127 {*movsf_internal}
     (nil))
(insn 48 295 50 5 (set (reg:DF 21 xmm0 [orig:93 _7 ] [93])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [2 j+0 S4 A32]))) "test1.c":10 154 {*extendsfdf2}
     (nil))
(call_insn/u 50 48 52 5 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x7f84e0a5ee00 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) "test1.c":10 676 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 52 50 296 5 (set (reg:SF 27 xmm6 [233])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:94 _8 ] [94]))) "test1.c":10 157 {*truncdfsf_fast_mixed}
     (nil))
(insn 296 52 53 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 f+0 S4 A32])
        (reg:SF 27 xmm6 [233])) "test1.c":10 127 {*movsf_internal}
     (nil))
(insn 53 296 55 5 (set (reg:DF 21 xmm0 [orig:95 _9 ] [95])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [2 A+0 S4 A32]))) "test1.c":10 154 {*extendsfdf2}
     (nil))
(call_insn/u 55 53 57 5 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7f84e0a2fa00 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) "test1.c":10 676 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 57 55 297 5 (set (reg:SF 28 xmm7 [234])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:96 _10 ] [96]))) "test1.c":10 157 {*truncdfsf_fast_mixed}
     (nil))
(insn 297 57 58 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [2 g+0 S4 A32])
        (reg:SF 28 xmm7 [234])) "test1.c":10 127 {*movsf_internal}
     (nil))
(insn 58 297 59 5 (set (reg:SF 22 xmm1 [169])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 d+0 S4 A32])) "test1.c":10 127 {*movsf_internal}
     (nil))
(insn 59 58 60 5 (set (reg:SF 21 xmm0 [170])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [2  S4 A32])) "test1.c":10 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 2.0e+0 [0x0.8p+2])
        (nil)))
(insn 60 59 61 5 (set (reg:SF 21 xmm0 [168])
        (plus:SF (reg:SF 21 xmm0 [170])
            (reg:SF 22 xmm1 [169]))) "test1.c":10 812 {*fop_sf_comm}
     (nil))
(insn 61 60 62 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 h+0 S4 A32])
        (reg:SF 21 xmm0 [168])) "test1.c":10 127 {*movsf_internal}
     (nil))
(insn 62 61 63 5 (set (reg:SF 21 xmm0 [171])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 c+0 S4 A32])) "test1.c":10 127 {*movsf_internal}
     (nil))
(insn 63 62 298 5 (set (reg:SF 21 xmm0 [orig:97 _11 ] [97])
        (mult:SF (reg:SF 21 xmm0 [171])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [2 h+0 S4 A32]))) "test1.c":10 812 {*fop_sf_comm}
     (nil))
(insn 298 63 64 5 (set (reg:SF 22 xmm1 [orig:97 _11 ] [97])
        (reg:SF 21 xmm0 [orig:97 _11 ] [97])) "test1.c":11 127 {*movsf_internal}
     (nil))
(insn 64 298 65 5 (set (reg:SF 22 xmm1 [orig:97 _11 ] [97])
        (mult:SF (reg:SF 22 xmm1 [orig:97 _11 ] [97])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [2 e+0 S4 A32]))) "test1.c":11 812 {*fop_sf_comm}
     (nil))
(insn 65 64 66 5 (set (reg:SF 21 xmm0 [172])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 f+0 S4 A32])) "test1.c":11 127 {*movsf_internal}
     (nil))
(insn 66 65 67 5 (set (reg:SF 21 xmm0 [orig:99 _13 ] [99])
        (mult:SF (reg:SF 21 xmm0 [172])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [2 g+0 S4 A32]))) "test1.c":11 812 {*fop_sf_comm}
     (nil))
(insn 67 66 68 5 (set (reg:SF 21 xmm0 [orig:100 _14 ] [100])
        (plus:SF (reg:SF 21 xmm0 [orig:99 _13 ] [99])
            (reg:SF 22 xmm1 [orig:98 _12 ] [98]))) "test1.c":11 812 {*fop_sf_comm}
     (nil))
(insn 68 67 69 5 (set (reg:SF 22 xmm1 [173])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [2  S4 A32])) "test1.c":11 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 5.0e+0 [0x0.ap+3])
        (nil)))
(insn 69 68 70 5 (set (reg:SF 21 xmm0 [orig:101 _15 ] [101])
        (plus:SF (reg:SF 21 xmm0 [orig:100 _14 ] [100])
            (reg:SF 22 xmm1 [173]))) "test1.c":11 812 {*fop_sf_comm}
     (nil))
(insn 70 69 71 5 (set (reg:SF 22 xmm1 [175])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC4") [flags 0x2]) [2  S4 A32])) "test1.c":10 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 71 70 301 5 (set (reg:SF 22 xmm1 [175])
        (div:SF (reg:SF 22 xmm1 [175])
            (reg:SF 21 xmm0 [orig:101 _15 ] [101]))) "test1.c":10 815 {*fop_sf_1}
     (nil))
(insn 301 71 72 5 (set (reg:SF 21 xmm0 [174])
        (reg:SF 22 xmm1 [175])) "test1.c":10 127 {*movsf_internal}
     (nil))
(insn 72 301 73 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [2 D+0 S4 A32])
        (reg:SF 21 xmm0 [174])) "test1.c":10 127 {*movsf_internal}
     (nil))
(insn 73 72 75 5 (set (reg:DF 21 xmm0 [orig:102 _16 ] [102])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [2 i+0 S4 A32]))) "test1.c":11 154 {*extendsfdf2}
     (nil))
(call_insn/u 75 73 77 5 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7f84e0a2fa00 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) "test1.c":11 676 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 77 75 302 5 (set (reg:SF 24 xmm3 [237])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:103 _17 ] [103]))) "test1.c":11 157 {*truncdfsf_fast_mixed}
     (nil))
(insn 302 77 78 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 l+0 S4 A32])
        (reg:SF 24 xmm3 [237])) "test1.c":11 127 {*movsf_internal}
     (nil))
(insn 78 302 80 5 (set (reg:DF 21 xmm0 [orig:104 _18 ] [104])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [2 B+0 S4 A32]))) "test1.c":11 154 {*extendsfdf2}
     (nil))
(call_insn/u 80 78 82 5 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7f84e0a2fa00 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) "test1.c":11 676 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 82 80 303 5 (set (reg:SF 25 xmm4 [238])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:105 _19 ] [105]))) "test1.c":11 157 {*truncdfsf_fast_mixed}
     (nil))
(insn 303 82 83 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [2 m+0 S4 A32])
        (reg:SF 25 xmm4 [238])) "test1.c":11 127 {*movsf_internal}
     (nil))
(insn 83 303 85 5 (set (reg:DF 21 xmm0 [orig:106 _20 ] [106])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [2 B+0 S4 A32]))) "test1.c":11 154 {*extendsfdf2}
     (nil))
(call_insn/u 85 83 87 5 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x7f84e0a5ee00 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) "test1.c":11 676 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 87 85 304 5 (set (reg:SF 26 xmm5 [239])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:107 _21 ] [107]))) "test1.c":11 157 {*truncdfsf_fast_mixed}
     (nil))
(insn 304 87 88 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 n+0 S4 A32])
        (reg:SF 26 xmm5 [239])) "test1.c":11 127 {*movsf_internal}
     (nil))
(insn 88 304 89 5 (set (reg:SF 21 xmm0 [176])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 c+0 S4 A32])) "test1.c":12 127 {*movsf_internal}
     (nil))
(insn 89 88 90 5 (set (reg:SF 21 xmm0 [orig:108 _22 ] [108])
        (mult:SF (reg:SF 21 xmm0 [176])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [2 h+0 S4 A32]))) "test1.c":12 812 {*fop_sf_comm}
     (nil))
(insn 90 89 91 5 (set (reg:SF 21 xmm0 [orig:109 _23 ] [109])
        (mult:SF (reg:SF 21 xmm0 [orig:108 _22 ] [108])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [2 g+0 S4 A32]))) "test1.c":12 812 {*fop_sf_comm}
     (nil))
(insn 91 90 92 5 (set (reg:SF 22 xmm1 [177])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 f+0 S4 A32])) "test1.c":12 127 {*movsf_internal}
     (nil))
(insn 92 91 93 5 (set (reg:SF 22 xmm1 [orig:110 _24 ] [110])
        (mult:SF (reg:SF 22 xmm1 [177])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [2 e+0 S4 A32]))) "test1.c":12 812 {*fop_sf_comm}
     (nil))
(insn 93 92 94 5 (set (reg:SF 21 xmm0 [178])
        (minus:SF (reg:SF 21 xmm0 [orig:109 _23 ] [109])
            (reg:SF 22 xmm1 [orig:110 _24 ] [110]))) "test1.c":12 815 {*fop_sf_1}
     (nil))
(insn 94 93 95 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [2 t+0 S4 A32])
        (reg:SF 21 xmm0 [178])) "test1.c":12 127 {*movsf_internal}
     (nil))
(insn 95 94 96 5 (set (reg:SF 22 xmm1 [179])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [2 D+0 S4 A32])) "test1.c":12 127 {*movsf_internal}
     (nil))
(insn 96 95 97 5 (set (reg:SF 21 xmm0 [180])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [2  S4 A32])) "test1.c":12 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+1 [0x0.fp+5])
        (nil)))
(insn 97 96 98 5 (set (reg:SF 22 xmm1 [orig:111 _25 ] [111])
        (mult:SF (reg:SF 22 xmm1 [179])
            (reg:SF 21 xmm0 [180]))) "test1.c":12 812 {*fop_sf_comm}
     (nil))
(insn 98 97 99 5 (set (reg:SF 21 xmm0 [181])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 l+0 S4 A32])) "test1.c":13 127 {*movsf_internal}
     (nil))
(insn 99 98 100 5 (set (reg:SF 21 xmm0 [orig:112 _26 ] [112])
        (mult:SF (reg:SF 21 xmm0 [181])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [2 h+0 S4 A32]))) "test1.c":13 812 {*fop_sf_comm}
     (nil))
(insn 100 99 101 5 (set (reg:SF 21 xmm0 [orig:113 _27 ] [113])
        (mult:SF (reg:SF 21 xmm0 [orig:112 _26 ] [112])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [2 m+0 S4 A32]))) "test1.c":13 812 {*fop_sf_comm}
     (nil))
(insn 101 100 102 5 (set (reg:SF 23 xmm2 [182])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [2 t+0 S4 A32])) "test1.c":13 127 {*movsf_internal}
     (nil))
(insn 102 101 103 5 (set (reg:SF 23 xmm2 [orig:114 _28 ] [114])
        (mult:SF (reg:SF 23 xmm2 [182])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [2 n+0 S4 A32]))) "test1.c":13 812 {*fop_sf_comm}
     (nil))
(insn 103 102 104 5 (set (reg:SF 21 xmm0 [orig:115 _29 ] [115])
        (minus:SF (reg:SF 21 xmm0 [orig:113 _27 ] [113])
            (reg:SF 23 xmm2 [orig:114 _28 ] [114]))) "test1.c":13 815 {*fop_sf_1}
     (nil))
(insn 104 103 105 5 (set (reg:SF 21 xmm0 [orig:116 _30 ] [116])
        (mult:SF (reg:SF 21 xmm0 [orig:115 _29 ] [115])
            (reg:SF 22 xmm1 [orig:111 _25 ] [111]))) "test1.c":12 812 {*fop_sf_comm}
     (nil))
(insn 105 104 106 5 (set (reg:SF 22 xmm1 [183])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [2  S4 A32])) "test1.c":12 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 4.0e+1 [0x0.ap+6])
        (nil)))
(insn 106 105 107 5 (set (reg:SF 21 xmm0 [orig:117 _31 ] [117])
        (plus:SF (reg:SF 21 xmm0 [orig:116 _30 ] [116])
            (reg:SF 22 xmm1 [183]))) "test1.c":12 812 {*fop_sf_comm}
     (nil))
(insn 107 106 108 5 (set (reg:SI 0 ax [184])
        (fix:SI (reg:SF 21 xmm0 [orig:117 _31 ] [117]))) "test1.c":12 170 {fix_truncsfsi_sse}
     (nil))
(insn 108 107 109 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [1 x+0 S4 A32])
        (reg:SI 0 ax [184])) "test1.c":12 82 {*movsi_internal}
     (nil))
(insn 109 108 110 5 (set (reg:SF 22 xmm1 [185])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [2 D+0 S4 A32])) "test1.c":13 127 {*movsf_internal}
     (nil))
(insn 110 109 111 5 (set (reg:SF 21 xmm0 [186])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [2  S4 A32])) "test1.c":13 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.5e+1 [0x0.fp+4])
        (nil)))
(insn 111 110 112 5 (set (reg:SF 22 xmm1 [orig:118 _32 ] [118])
        (mult:SF (reg:SF 22 xmm1 [185])
            (reg:SF 21 xmm0 [186]))) "test1.c":13 812 {*fop_sf_comm}
     (nil))
(insn 112 111 113 5 (set (reg:SF 21 xmm0 [187])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 l+0 S4 A32])) "test1.c":13 127 {*movsf_internal}
     (nil))
(insn 113 112 305 5 (set (reg:SF 21 xmm0 [orig:119 _33 ] [119])
        (mult:SF (reg:SF 21 xmm0 [187])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [2 h+0 S4 A32]))) "test1.c":13 812 {*fop_sf_comm}
     (nil))
(insn 305 113 114 5 (set (reg:SF 23 xmm2 [orig:119 _33 ] [119])
        (reg:SF 21 xmm0 [orig:119 _33 ] [119])) "test1.c":13 127 {*movsf_internal}
     (nil))
(insn 114 305 115 5 (set (reg:SF 23 xmm2 [orig:119 _33 ] [119])
        (mult:SF (reg:SF 23 xmm2 [orig:119 _33 ] [119])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [2 n+0 S4 A32]))) "test1.c":13 812 {*fop_sf_comm}
     (nil))
(insn 115 114 116 5 (set (reg:SF 21 xmm0 [188])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [2 t+0 S4 A32])) "test1.c":14 127 {*movsf_internal}
     (nil))
(insn 116 115 117 5 (set (reg:SF 21 xmm0 [orig:121 _35 ] [121])
        (mult:SF (reg:SF 21 xmm0 [188])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [2 m+0 S4 A32]))) "test1.c":14 812 {*fop_sf_comm}
     (nil))
(insn 117 116 118 5 (set (reg:SF 21 xmm0 [orig:122 _36 ] [122])
        (plus:SF (reg:SF 21 xmm0 [orig:121 _35 ] [121])
            (reg:SF 23 xmm2 [orig:120 _34 ] [120]))) "test1.c":14 812 {*fop_sf_comm}
     (nil))
(insn 118 117 119 5 (set (reg:SF 21 xmm0 [orig:123 _37 ] [123])
        (mult:SF (reg:SF 21 xmm0 [orig:122 _36 ] [122])
            (reg:SF 22 xmm1 [orig:118 _32 ] [118]))) "test1.c":13 812 {*fop_sf_comm}
     (nil))
(insn 119 118 120 5 (set (reg:SF 22 xmm1 [189])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC8") [flags 0x2]) [2  S4 A32])) "test1.c":13 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.2e+1 [0x0.cp+4])
        (nil)))
(insn 120 119 121 5 (set (reg:SF 21 xmm0 [orig:124 _38 ] [124])
        (plus:SF (reg:SF 21 xmm0 [orig:123 _37 ] [123])
            (reg:SF 22 xmm1 [189]))) "test1.c":13 812 {*fop_sf_comm}
     (nil))
(insn 121 120 122 5 (set (reg:SI 0 ax [190])
        (fix:SI (reg:SF 21 xmm0 [orig:124 _38 ] [124]))) "test1.c":13 170 {fix_truncsfsi_sse}
     (nil))
(insn 122 121 123 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [1 y+0 S4 A32])
        (reg:SI 0 ax [190])) "test1.c":13 82 {*movsi_internal}
     (nil))
(insn 123 122 124 5 (set (reg:SI 1 dx [191])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [1 y+0 S4 A32])) "test1.c":14 82 {*movsi_internal}
     (nil))
(insn 124 123 125 5 (set (reg:SI 0 ax [192])
        (reg:SI 1 dx [191])) "test1.c":14 82 {*movsi_internal}
     (nil))
(insn 125 124 126 5 (parallel [
            (set (reg:SI 0 ax [192])
                (ashift:SI (reg:SI 0 ax [192])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":14 521 {*ashlsi3_1}
     (nil))
(insn 126 125 127 5 (parallel [
            (set (reg:SI 0 ax [192])
                (plus:SI (reg:SI 0 ax [192])
                    (reg:SI 1 dx [191])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":14 217 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 1 dx [191])
            (const_int 5 [0x5]))
        (nil)))
(insn 127 126 129 5 (parallel [
            (set (reg:SI 0 ax [193])
                (ashift:SI (reg:SI 0 ax [192])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":14 521 {*ashlsi3_1}
     (nil))
(insn 129 127 133 5 (set (reg:SI 1 dx [orig:125 _39 ] [125])
        (reg:SI 0 ax [192])) "test1.c":14 82 {*movsi_internal}
     (nil))
(insn 133 129 134 5 (set (reg:SI 0 ax [197])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [1 x+0 S4 A32])) "test1.c":14 82 {*movsi_internal}
     (nil))
(insn 134 133 135 5 (parallel [
            (set (reg:SI 0 ax [196])
                (plus:SI (reg:SI 0 ax [197])
                    (reg:SI 1 dx [orig:125 _39 ] [125])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":14 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:125 _39 ] [125])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [1 x+0 S4 A32]))
        (nil)))
(insn 135 134 136 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [1 o+0 S4 A32])
        (reg:SI 0 ax [196])) "test1.c":14 82 {*movsi_internal}
     (nil))
(insn 136 135 137 5 (set (reg:SF 21 xmm0 [198])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 f+0 S4 A32])) "test1.c":14 127 {*movsf_internal}
     (nil))
(insn 137 136 138 5 (set (reg:SF 21 xmm0 [orig:126 _40 ] [126])
        (mult:SF (reg:SF 21 xmm0 [198])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [2 e+0 S4 A32]))) "test1.c":14 812 {*fop_sf_comm}
     (nil))
(insn 138 137 139 5 (set (reg:SF 22 xmm1 [199])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 c+0 S4 A32])) "test1.c":14 127 {*movsf_internal}
     (nil))
(insn 139 138 140 5 (set (reg:SF 22 xmm1 [orig:127 _41 ] [127])
        (mult:SF (reg:SF 22 xmm1 [199])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [2 d+0 S4 A32]))) "test1.c":14 812 {*fop_sf_comm}
     (nil))
(insn 140 139 141 5 (set (reg:SF 22 xmm1 [orig:128 _42 ] [128])
        (mult:SF (reg:SF 22 xmm1 [orig:127 _41 ] [127])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [2 g+0 S4 A32]))) "test1.c":14 812 {*fop_sf_comm}
     (nil))
(insn 141 140 142 5 (set (reg:SF 21 xmm0 [orig:129 _43 ] [129])
        (minus:SF (reg:SF 21 xmm0 [orig:126 _40 ] [126])
            (reg:SF 22 xmm1 [orig:128 _42 ] [128]))) "test1.c":14 815 {*fop_sf_1}
     (nil))
(insn 142 141 143 5 (set (reg:SF 21 xmm0 [orig:130 _44 ] [130])
        (mult:SF (reg:SF 21 xmm0 [orig:129 _43 ] [129])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [2 m+0 S4 A32]))) "test1.c":15 812 {*fop_sf_comm}
     (nil))
(insn 143 142 144 5 (set (reg:SF 22 xmm1 [200])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 c+0 S4 A32])) "test1.c":15 127 {*movsf_internal}
     (nil))
(insn 144 143 145 5 (set (reg:SF 22 xmm1 [orig:131 _45 ] [131])
        (mult:SF (reg:SF 22 xmm1 [200])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [2 d+0 S4 A32]))) "test1.c":15 812 {*fop_sf_comm}
     (nil))
(insn 145 144 146 5 (set (reg:SF 22 xmm1 [orig:132 _46 ] [132])
        (mult:SF (reg:SF 22 xmm1 [orig:131 _45 ] [131])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [2 e+0 S4 A32]))) "test1.c":15 812 {*fop_sf_comm}
     (nil))
(insn 146 145 147 5 (set (reg:SF 21 xmm0 [orig:133 _47 ] [133])
        (minus:SF (reg:SF 21 xmm0 [orig:130 _44 ] [130])
            (reg:SF 22 xmm1 [orig:132 _46 ] [132]))) "test1.c":15 815 {*fop_sf_1}
     (nil))
(insn 147 146 148 5 (set (reg:SF 22 xmm1 [201])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 f+0 S4 A32])) "test1.c":15 127 {*movsf_internal}
     (nil))
(insn 148 147 149 5 (set (reg:SF 22 xmm1 [orig:134 _48 ] [134])
        (mult:SF (reg:SF 22 xmm1 [201])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [2 g+0 S4 A32]))) "test1.c":15 812 {*fop_sf_comm}
     (nil))
(insn 149 148 150 5 (set (reg:SF 21 xmm0 [orig:135 _49 ] [135])
        (minus:SF (reg:SF 21 xmm0 [orig:133 _47 ] [133])
            (reg:SF 22 xmm1 [orig:134 _48 ] [134]))) "test1.c":15 815 {*fop_sf_1}
     (nil))
(insn 150 149 151 5 (set (reg:SF 22 xmm1 [202])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 l+0 S4 A32])) "test1.c":15 127 {*movsf_internal}
     (nil))
(insn 151 150 152 5 (set (reg:SF 22 xmm1 [orig:136 _50 ] [136])
        (mult:SF (reg:SF 22 xmm1 [202])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [2 d+0 S4 A32]))) "test1.c":15 812 {*fop_sf_comm}
     (nil))
(insn 152 151 153 5 (set (reg:SF 22 xmm1 [orig:137 _51 ] [137])
        (mult:SF (reg:SF 22 xmm1 [orig:136 _50 ] [136])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [2 n+0 S4 A32]))) "test1.c":15 812 {*fop_sf_comm}
     (nil))
(insn 153 152 154 5 (set (reg:SF 21 xmm0 [orig:138 _52 ] [138])
        (minus:SF (reg:SF 21 xmm0 [orig:135 _49 ] [135])
            (reg:SF 22 xmm1 [orig:137 _51 ] [137]))) "test1.c":15 815 {*fop_sf_1}
     (nil))
(insn 154 153 155 5 (set (reg:SF 22 xmm1 [203])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [2  S4 A32])) "test1.c":14 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 8.0e+0 [0x0.8p+4])
        (nil)))
(insn 155 154 156 5 (set (reg:SF 21 xmm0 [orig:139 _53 ] [139])
        (mult:SF (reg:SF 21 xmm0 [orig:138 _52 ] [138])
            (reg:SF 22 xmm1 [203]))) "test1.c":14 812 {*fop_sf_comm}
     (nil))
(insn 156 155 157 5 (set (reg:SI 0 ax [204])
        (fix:SI (reg:SF 21 xmm0 [orig:139 _53 ] [139]))) "test1.c":14 170 {fix_truncsfsi_sse}
     (nil))
(insn 157 156 158 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 N+0 S4 A32])
        (reg:SI 0 ax [204])) "test1.c":14 82 {*movsi_internal}
     (nil))
(insn 158 157 159 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -68 [0xffffffffffffffbc])) [1 y+0 S4 A32])
            (const_int 21 [0x15]))) "test1.c":15 7 {*cmpsi_1}
     (nil))
(jump_insn 159 158 160 5 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 193)
            (pc))) "test1.c":15 627 {*jcc_1}
     (nil)
 -> 193)
;;  succ:       6 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 160 159 161 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 161 160 162 6 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -68 [0xffffffffffffffbc])) [1 y+0 S4 A32])
            (const_int 0 [0]))) "test1.c":15 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 162 161 163 6 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 193)
            (pc))) "test1.c":15 627 {*jcc_1}
     (nil)
 -> 193)
;;  succ:       7 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 163 162 164 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 164 163 165 7 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [1 x+0 S4 A32])
            (const_int 0 [0]))) "test1.c":16 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 165 164 166 7 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 193)
            (pc))) "test1.c":16 627 {*jcc_1}
     (nil)
 -> 193)
;;  succ:       8 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 166 165 167 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 167 166 168 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [1 x+0 S4 A32])
            (const_int 79 [0x4f]))) "test1.c":16 7 {*cmpsi_1}
     (nil))
(jump_insn 168 167 169 8 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 193)
            (pc))) "test1.c":16 627 {*jcc_1}
     (nil)
 -> 193)
;;  succ:       9 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 140 205 206 207
(note 169 168 170 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 170 169 171 9 (set (reg:SI 0 ax [206])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [1 o+0 S4 A32])) "test1.c":16 82 {*movsi_internal}
     (nil))
(insn 171 170 172 9 (set (reg:DI 0 ax [205])
        (sign_extend:DI (reg:SI 0 ax [206]))) "test1.c":16 145 {*extendsidi2_rex64}
     (nil))
(insn 172 171 173 9 (set (reg:SF 22 xmm1 [orig:140 _54 ] [140])
        (mem:SF (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [205])
                        (const_int 4 [0x4]))
                    (reg/f:DI 6 bp))
                (const_int -7120 [0xffffffffffffe430])) [2 z S4 A32])) "test1.c":16 127 {*movsf_internal}
     (nil))
(insn 173 172 174 9 (set (reg:SF 21 xmm0 [207])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [2 D+0 S4 A32])) "test1.c":16 127 {*movsf_internal}
     (nil))
(insn 174 173 175 9 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [207])
            (reg:SF 22 xmm1 [orig:140 _54 ] [140]))) "test1.c":16 51 {*cmpiusf}
     (nil))
(jump_insn 175 174 179 9 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 193)
            (pc))) "test1.c":16 627 {*jcc_1}
     (nil)
 -> 193)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 141 142 208 209 210 211 212 213 214 215
(note 179 175 180 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 180 179 181 10 (set (reg:SI 0 ax [209])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [1 o+0 S4 A32])) "test1.c":16 82 {*movsi_internal}
     (nil))
(insn 181 180 182 10 (set (reg:DI 0 ax [208])
        (sign_extend:DI (reg:SI 0 ax [209]))) "test1.c":16 145 {*extendsidi2_rex64}
     (nil))
(insn 182 181 183 10 (set (reg:SF 21 xmm0 [210])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [2 D+0 S4 A32])) "test1.c":16 127 {*movsf_internal}
     (nil))
(insn 183 182 185 10 (set (mem:SF (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [208])
                        (const_int 4 [0x4]))
                    (reg/f:DI 6 bp))
                (const_int -7120 [0xffffffffffffe430])) [2 z S4 A32])
        (reg:SF 21 xmm0 [210])) "test1.c":16 127 {*movsf_internal}
     (nil))
(insn 185 183 184 10 (set (reg:SI 0 ax [211])
        (const_int 0 [0])) "test1.c":17 82 {*movsi_internal}
     (nil))
(insn 184 185 186 10 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [1 N+0 S4 A32])
            (const_int 0 [0]))) "test1.c":17 3 {*cmpsi_ccno_1}
     (nil))
(insn 186 184 187 10 (set (reg:SI 0 ax [orig:141 _55 ] [141])
        (if_then_else:SI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [1 N+0 S4 A32])
            (reg:SI 0 ax [211]))) "test1.c":17 976 {*movsicc_noc}
     (nil))
(insn 187 186 188 10 (set (reg:DI 1 dx [212])
        (sign_extend:DI (reg:SI 0 ax [orig:141 _55 ] [141]))) "test1.c":17 145 {*extendsidi2_rex64}
     (nil))
(insn 188 187 189 10 (set (reg:DI 0 ax [213])
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f84e0b38480 *.LC10>)) "test1.c":17 81 {*movdi_internal}
     (nil))
(insn 189 188 190 10 (set (reg:QI 1 dx [orig:142 _56 ] [142])
        (mem/u/j:QI (plus:DI (reg:DI 1 dx [212])
                (reg:DI 0 ax [213])) [0  S1 A8])) "test1.c":17 84 {*movqi_internal}
     (nil))
(insn 190 189 191 10 (set (reg:SI 0 ax [215])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [1 o+0 S4 A32])) "test1.c":16 82 {*movsi_internal}
     (nil))
(insn 191 190 192 10 (set (reg:DI 0 ax [214])
        (sign_extend:DI (reg:SI 0 ax [215]))) "test1.c":16 145 {*extendsidi2_rex64}
     (nil))
(insn 192 191 193 10 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [214]))
                (const_int -8880 [0xffffffffffffdd50])) [0 b S1 A8])
        (reg:QI 1 dx [orig:142 _56 ] [142])) "test1.c":16 84 {*movqi_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       5
;;              6
;;              7
;;              8
;;              10 (FALLTHRU)
;;              9
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 143 144 216
(code_label 193 192 194 11 4 (nil) [5 uses])
(note 194 193 195 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 195 194 196 11 (set (reg:DF 21 xmm0 [orig:143 _57 ] [143])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [2 i+0 S4 A32]))) "test1.c":9 154 {*extendsfdf2}
     (nil))
(insn 196 195 197 11 (set (reg:DF 22 xmm1 [216])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [3  S8 A64])) "test1.c":9 126 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 2.0000000000000000416333634234433702658861875534057617e-2 [0x0.a3d70a3d70a3d8p-5])
        (nil)))
(insn 197 196 198 11 (set (reg:DF 21 xmm0 [orig:144 _58 ] [144])
        (plus:DF (reg:DF 21 xmm0 [orig:143 _57 ] [143])
            (reg:DF 22 xmm1 [216]))) "test1.c":9 813 {*fop_df_comm}
     (nil))
(insn 198 197 307 11 (set (reg:SF 27 xmm6 [241])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:144 _58 ] [144]))) "test1.c":9 157 {*truncdfsf_fast_mixed}
     (nil))
(insn 307 198 199 11 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 i+0 S4 A32])
        (reg:SF 27 xmm6 [241])) "test1.c":9 127 {*movsf_internal}
     (nil))
;;  succ:       12 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 145 217
(code_label 199 307 200 12 3 (nil) [1 uses])
(note 200 199 201 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 201 200 203 12 (set (reg:DF 21 xmm0 [orig:145 _59 ] [145])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [2 i+0 S4 A32]))) "test1.c":9 154 {*extendsfdf2}
     (nil))
(insn 203 201 204 12 (set (reg:DF 22 xmm1 [217])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC12") [flags 0x2]) [3  S8 A64])) "test1.c":8 126 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 6.28000000000000024868995751603506505489349365234375e+0 [0x0.c8f5c28f5c28f8p+3])
        (nil)))
(insn 204 203 205 12 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 22 xmm1 [217])
            (reg:DF 21 xmm0 [orig:145 _59 ] [145]))) "test1.c":8 52 {*cmpiudf}
     (nil))
(jump_insn 205 204 206 12 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 202)
            (pc))) "test1.c":8 627 {*jcc_1}
     (nil)
 -> 202)
;;  succ:       5
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 146 147 218
(note 206 205 207 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 207 206 208 13 (set (reg:DF 21 xmm0 [orig:146 _60 ] [146])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [2 j+0 S4 A32]))) "test1.c":8 154 {*extendsfdf2}
     (nil))
(insn 208 207 209 13 (set (reg:DF 22 xmm1 [218])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [3  S8 A64])) "test1.c":8 126 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 7.0000000000000006661338147750939242541790008544921875e-2 [0x0.8f5c28f5c28f6p-3])
        (nil)))
(insn 209 208 210 13 (set (reg:DF 21 xmm0 [orig:147 _61 ] [147])
        (plus:DF (reg:DF 21 xmm0 [orig:146 _60 ] [146])
            (reg:DF 22 xmm1 [218]))) "test1.c":8 813 {*fop_df_comm}
     (nil))
(insn 210 209 308 13 (set (reg:SF 28 xmm7 [242])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:147 _61 ] [147]))) "test1.c":8 157 {*truncdfsf_fast_mixed}
     (nil))
(insn 308 210 211 13 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 j+0 S4 A32])
        (reg:SF 28 xmm7 [242])) "test1.c":8 127 {*movsf_internal}
     (nil))
;;  succ:       14 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 148 219
(code_label 211 308 212 14 2 (nil) [1 uses])
(note 212 211 213 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 213 212 215 14 (set (reg:DF 21 xmm0 [orig:148 _62 ] [148])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [2 j+0 S4 A32]))) "test1.c":8 154 {*extendsfdf2}
     (nil))
(insn 215 213 216 14 (set (reg:DF 22 xmm1 [219])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC12") [flags 0x2]) [3  S8 A64])) "test1.c":8 126 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 6.28000000000000024868995751603506505489349365234375e+0 [0x0.c8f5c28f5c28f8p+3])
        (nil)))
(insn 216 215 217 14 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 22 xmm1 [219])
            (reg:DF 21 xmm0 [orig:148 _62 ] [148]))) "test1.c":8 52 {*cmpiudf}
     (nil))
(jump_insn 217 216 218 14 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 214)
            (pc))) "test1.c":8 627 {*jcc_1}
     (nil)
 -> 214)
;;  succ:       4
;;              15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 218 217 219 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 219 218 220 15 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f84e0b38510 *.LC14>)) "test1.c":18 81 {*movdi_internal}
     (nil))
(insn 220 219 221 15 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":18 84 {*movqi_internal}
     (nil))
(call_insn 221 220 222 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f84e0a83f00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":18 676 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 222 221 286 15 (set (mem/c:SI (symbol_ref:DI ("k") [flags 0x2]  <var_decl 0x7f84e273ae10 k>) [1 k+0 S4 A32])
        (const_int 0 [0])) "test1.c":18 82 {*movsi_internal}
     (nil))
(jump_insn 286 222 287 15 (set (pc)
        (label_ref 257)) "test1.c":18 659 {jump}
     (nil)
 -> 257)
;;  succ:       20 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 287 286 260)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       20
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 149 150 220 221 222 223 224 225
(code_label 260 287 225 16 11 (nil) [1 uses])
(note 225 260 226 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 226 225 227 16 (set (reg:SI 2 cx [orig:149 k.1_63 ] [149])
        (mem/c:SI (symbol_ref:DI ("k") [flags 0x2]  <var_decl 0x7f84e273ae10 k>) [1 k+0 S4 A32])) "test1.c":19 82 {*movsi_internal}
     (nil))
(insn 227 226 309 16 (set (reg:SI 1 dx [221])
        (const_int 1717986919 [0x66666667])) "test1.c":19 82 {*movsi_internal}
     (nil))
(insn 309 227 228 16 (set (reg:SI 0 ax [229])
        (reg:SI 2 cx [orig:149 k.1_63 ] [149])) "test1.c":19 82 {*movsi_internal}
     (nil))
(insn 228 309 229 16 (parallel [
            (set (reg:SI 1 dx [220])
                (truncate:SI (lshiftrt:DI (mult:DI (sign_extend:DI (reg:SI 0 ax [229]))
                            (sign_extend:DI (reg:SI 1 dx [221])))
                        (const_int 32 [0x20]))))
            (clobber (reg:SI 0 ax [229]))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":19 365 {*smulsi3_highpart_1}
     (nil))
(insn 229 228 310 16 (parallel [
            (set (reg:SI 1 dx [222])
                (ashiftrt:SI (reg:SI 1 dx [220])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":19 555 {*ashrsi3_1}
     (nil))
(insn 310 229 230 16 (set (reg:SI 0 ax [223])
        (reg:SI 2 cx [orig:149 k.1_63 ] [149])) "test1.c":19 82 {*movsi_internal}
     (nil))
(insn 230 310 231 16 (parallel [
            (set (reg:SI 0 ax [223])
                (ashiftrt:SI (reg:SI 0 ax [223])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":19 549 {ashrsi3_cvt}
     (nil))
(insn 231 230 232 16 (parallel [
            (set (reg:SI 1 dx [orig:150 _64 ] [150])
                (minus:SI (reg:SI 1 dx [222])
                    (reg:SI 0 ax [223])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":19 273 {*subsi_1}
     (expr_list:REG_EQUAL (div:SI (reg:SI 2 cx [orig:149 k.1_63 ] [149])
            (const_int 80 [0x50]))
        (nil)))
(insn 232 231 233 16 (set (reg:SI 0 ax [224])
        (reg:SI 1 dx [orig:150 _64 ] [150])) "test1.c":19 82 {*movsi_internal}
     (nil))
(insn 233 232 234 16 (parallel [
            (set (reg:SI 0 ax [224])
                (ashift:SI (reg:SI 0 ax [224])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":19 521 {*ashlsi3_1}
     (nil))
(insn 234 233 235 16 (parallel [
            (set (reg:SI 0 ax [224])
                (plus:SI (reg:SI 0 ax [224])
                    (reg:SI 1 dx [orig:150 _64 ] [150])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":19 217 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 1 dx [orig:150 _64 ] [150])
            (const_int 5 [0x5]))
        (nil)))
(insn 235 234 237 16 (parallel [
            (set (reg:SI 0 ax [225])
                (ashift:SI (reg:SI 0 ax [224])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":19 521 {*ashlsi3_1}
     (nil))
(insn 237 235 313 16 (parallel [
            (set (reg:SI 2 cx [orig:149 k.1_63 ] [149])
                (minus:SI (reg:SI 2 cx [orig:149 k.1_63 ] [149])
                    (reg:SI 0 ax [224])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":19 273 {*subsi_1}
     (nil))
(insn 313 237 238 16 (set (reg:SI 1 dx [orig:150 _64 ] [150])
        (reg:SI 2 cx [orig:149 k.1_63 ] [149])) "test1.c":19 82 {*movsi_internal}
     (nil))
(insn 238 313 239 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:150 _64 ] [150])
            (const_int 0 [0]))) "test1.c":19 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 239 238 240 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 247)
            (pc))) "test1.c":19 627 {*jcc_1}
     (nil)
 -> 247)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 151 152 160 226
(note 240 239 241 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 241 240 242 17 (set (reg:SI 0 ax [orig:151 k.2_65 ] [151])
        (mem/c:SI (symbol_ref:DI ("k") [flags 0x2]  <var_decl 0x7f84e273ae10 k>) [1 k+0 S4 A32])) "test1.c":19 82 {*movsi_internal}
     (nil))
(insn 242 241 243 17 (set (reg:DI 0 ax [226])
        (sign_extend:DI (reg:SI 0 ax [orig:151 k.2_65 ] [151]))) "test1.c":19 145 {*extendsidi2_rex64}
     (nil))
(insn 243 242 244 17 (set (reg:QI 0 ax [orig:152 _66 ] [152])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [226]))
                (const_int -8880 [0xffffffffffffdd50])) [0 b S1 A8])) "test1.c":19 84 {*movqi_internal}
     (nil))
(insn 244 243 288 17 (set (reg:SI 0 ax [orig:160 iftmp.0_78 ] [160])
        (sign_extend:SI (reg:QI 0 ax [orig:152 _66 ] [152]))) "test1.c":19 151 {extendqisi2}
     (nil))
(jump_insn 288 244 289 17 (set (pc)
        (label_ref 250)) 659 {jump}
     (nil)
 -> 250)
;;  succ:       19 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 160

(barrier 289 288 247)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       16
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 160
(code_label 247 289 248 18 9 (nil) [1 uses])
(note 248 247 249 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 249 248 250 18 (set (reg:SI 0 ax [orig:160 iftmp.0_78 ] [160])
        (const_int 10 [0xa])) "test1.c":19 82 {*movsi_internal}
     (nil))
;;  succ:       19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 160

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;;              17 [100.0%] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 160
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 160
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 153 154
(code_label 250 249 251 19 10 (nil) [1 uses])
(note 251 250 252 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 252 251 253 19 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:160 iftmp.0_78 ] [160])) "test1.c":19 82 {*movsi_internal}
     (nil))
(call_insn 253 252 254 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7f84e0a84300 putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) "test1.c":19 676 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 254 253 255 19 (set (reg:SI 0 ax [orig:153 k.3_67 ] [153])
        (mem/c:SI (symbol_ref:DI ("k") [flags 0x2]  <var_decl 0x7f84e273ae10 k>) [1 k+0 S4 A32])) "test1.c":18 82 {*movsi_internal}
     (nil))
(insn 255 254 256 19 (parallel [
            (set (reg:SI 0 ax [orig:154 _68 ] [154])
                (plus:SI (reg:SI 0 ax [orig:153 k.3_67 ] [153])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":18 217 {*addsi_1}
     (nil))
(insn 256 255 257 19 (set (mem/c:SI (symbol_ref:DI ("k") [flags 0x2]  <var_decl 0x7f84e273ae10 k>) [1 k+0 S4 A32])
        (reg:SI 0 ax [orig:154 _68 ] [154])) "test1.c":18 82 {*movsi_internal}
     (nil))
;;  succ:       20 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       19 (FALLTHRU,DFS_BACK)
;;              15 [100.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 155
(code_label 257 256 258 20 8 (nil) [1 uses])
(note 258 257 259 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 259 258 261 20 (set (reg:SI 0 ax [orig:155 k.4_69 ] [155])
        (mem/c:SI (symbol_ref:DI ("k") [flags 0x2]  <var_decl 0x7f84e273ae10 k>) [1 k+0 S4 A32])) "test1.c":18 82 {*movsi_internal}
     (nil))
(insn 261 259 262 20 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:155 k.4_69 ] [155])
            (const_int 1760 [0x6e0]))) "test1.c":18 7 {*cmpsi_1}
     (nil))
(jump_insn 262 261 263 20 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 260)
            (pc))) "test1.c":18 627 {*jcc_1}
     (nil)
 -> 260)
;;  succ:       16
;;              21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 1, flags: (RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 156 157 158 159 227 228
(note 263 262 264 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 264 263 265 21 (set (reg:DF 21 xmm0 [orig:156 _70 ] [156])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [2 A+0 S4 A32]))) "test1.c":19 154 {*extendsfdf2}
     (nil))
(insn 265 264 266 21 (set (reg:DF 22 xmm1 [227])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [3  S8 A64])) "test1.c":19 126 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 4.0000000000000000832667268468867405317723751068115234e-2 [0x0.a3d70a3d70a3d8p-4])
        (nil)))
(insn 266 265 267 21 (set (reg:DF 21 xmm0 [orig:157 _71 ] [157])
        (plus:DF (reg:DF 21 xmm0 [orig:156 _70 ] [156])
            (reg:DF 22 xmm1 [227]))) "test1.c":19 813 {*fop_df_comm}
     (nil))
(insn 267 266 314 21 (set (reg:SF 24 xmm3 [246])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:157 _71 ] [157]))) "test1.c":19 157 {*truncdfsf_fast_mixed}
     (nil))
(insn 314 267 268 21 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [2 A+0 S4 A32])
        (reg:SF 24 xmm3 [246])) "test1.c":19 127 {*movsf_internal}
     (nil))
(insn 268 314 269 21 (set (reg:DF 21 xmm0 [orig:158 _72 ] [158])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [2 B+0 S4 A32]))) "test1.c":19 154 {*extendsfdf2}
     (nil))
(insn 269 268 270 21 (set (reg:DF 22 xmm1 [228])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [3  S8 A64])) "test1.c":19 126 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 2.0000000000000000416333634234433702658861875534057617e-2 [0x0.a3d70a3d70a3d8p-5])
        (nil)))
(insn 270 269 271 21 (set (reg:DF 21 xmm0 [orig:159 _73 ] [159])
        (plus:DF (reg:DF 21 xmm0 [orig:158 _72 ] [158])
            (reg:DF 22 xmm1 [228]))) "test1.c":19 813 {*fop_df_comm}
     (nil))
(insn 271 270 315 21 (set (reg:SF 25 xmm4 [247])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:159 _73 ] [159]))) "test1.c":19 157 {*truncdfsf_fast_mixed}
     (nil))
(insn 315 271 290 21 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 B+0 S4 A32])
        (reg:SF 25 xmm4 [247])) "test1.c":19 127 {*movsf_internal}
     (nil))
(jump_insn 290 315 291 21 (set (pc)
        (label_ref 272)) "test1.c":7 659 {jump}
     (nil)
 -> 272)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 291 290 292)
(note 292 291 0 NOTE_INSN_DELETED)
