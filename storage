typedef enum { 
    T_Note = 256, T_Insn, T_JumpInsn, T_CallInsn, T_Call, T_SymbolRef, T_Flags, T_Nil, T_Parallel, T_Clobber, 
    T_Set, T_Use, T_IfThenElse, T_ConstInt, T_Barrier, T_Mem, T_Reg, T_Pc, T_LabelRef, T_IFlag, T_VFlag, 
    T_FFlag, T_CFlag, T_SIType, T_DIType, T_QIType, T_CCType, T_CCZType, T_CCGCType, T_Plus, T_Minus, T_Mult, T_Ashift, 
    T_Subreg, T_ExprList, T_FunBegin, T_StringConstant, T_IntConstant, T_EndPara, T_RArrow, T_SiExtend, T_Compare,
    T_Lt, T_Gt, T_Le, T_Ge, T_Eq, T_Ne
} TokenType;

static const char *gTokenNames[T_NumTokenTypes] = {
  "T_Note", "T_Insn", "T_JumpInsn", "T_CallInsn", "T_Call", "T_SymbolRef", "T_Flags", "T_Nil", "T_Parallel", 
  "T_Clobber", "T_Set", "T_Use", "T_IfThenElse", "T_ConstInt", "T_Barrier", "T_Mem", "T_Reg", "T_Pc", 
  "T_LabelRef", "T_IFlag", "T_VFlag", "T_FFlag", "T_CFlag", "T_SIType", "T_DIType", "T_QIType", "T_CCType", "T_CCZType", 
  "T_CCGCType", "T_Plus", "T_Minus", "T_Mult", "T_Ashift", "T_Subreg", "T_ExprList", "T_FunBegin", "T_StringConstant", 
  "T_IntConstant", "T_EndPara", "T_RArrow", "T_SiExtend", "T_Compare", "T_Lt", "T_Gt", "T_Le", "T_Ge", "T_Eq", "T_Ne"
};

static void DoBeforeEachAction(); 
#define YY_USER_ACTION DoBeforeEachAction();

/*--------------------------------------------------------*
 * Function: PrintOneToken()                              *
 *                                                        *
 * Does exactly what the name says.                       *
 *--------------------------------------------------------*/
static void PrintOneToken(TokenType token, const char *text, YYSTYPE value, yyltype loc) {
    // For now doesn't print the attributes of, say, T_StringContant, i.e. prints
    // only the token type. Should suffice for debugging purposes.
    if (token < 256)
        printf("%c ", token);
    else printf("%s ", gTokenNames[token - T_Note]);
}

/*--------------------------------------------------------*
 * Function: main()                                       *
 * Entry point to the program. For now just retrieves     *
 * tokens from the yylex token stream and prints its type.*
 *--------------------------------------------------------*/
int main(int argc, char **argv) {
    // There was a ParseCommandLine here for the decaf scanner, but it seems
    // we don't need it just yet.
    InitScanner();
    TokenType token;
    while ((token = (TokenType)yylex()) != 0) {
        PrintOneToken(token, yytext, yylval, yylloc);
    }
    return (ReportError::findNumErrors() == 0? 0 : -1);   // No error reporting yet
}